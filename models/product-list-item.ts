/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { ProductListItemProduct } from './product-list-item-product';

/**
 * 
 * @export
 * @interface ProductListItem
 */
export interface ProductListItem {
    /**
     * The ID of the deal-product (the ID of the product attached to the deal)
     * @type {number}
     * @memberof ProductListItem
     */
    'id'?: number;
    /**
     * The ID of the deal
     * @type {number}
     * @memberof ProductListItem
     */
    'deal_id'?: number;
    /**
     * The order number of the product
     * @type {number}
     * @memberof ProductListItem
     */
    'order_nr'?: number;
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductListItem
     */
    'product_id'?: number;
    /**
     * The ID of the product variation
     * @type {number}
     * @memberof ProductListItem
     */
    'product_variation_id'?: number | null;
    /**
     * The price value of the product
     * @type {number}
     * @memberof ProductListItem
     */
    'item_price'?: number;
    /**
     * The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
     * @type {number}
     * @memberof ProductListItem
     */
    'discount'?: number;
    /**
     * The type of the discount\'s value
     * @type {string}
     * @memberof ProductListItem
     */
    'discount_type'?: ProductListItemDiscountTypeConst;
    /**
     * The sum of all the products attached to the deal
     * @type {number}
     * @memberof ProductListItem
     */
    'sum'?: number;
    /**
     * The currency associated with the deal product
     * @type {string}
     * @memberof ProductListItem
     */
    'currency'?: string;
    /**
     * Whether the product is enabled or not
     * @type {boolean}
     * @memberof ProductListItem
     */
    'enabled_flag'?: boolean;
    /**
     * The date and time when the product was added to the deal
     * @type {string}
     * @memberof ProductListItem
     */
    'add_time'?: string;
    /**
     * The date and time when the deal product was last edited
     * @type {string}
     * @memberof ProductListItem
     */
    'last_edit'?: string;
    /**
     * The comments of the product
     * @type {string}
     * @memberof ProductListItem
     */
    'comments'?: string;
    /**
     * Whether the product is active or not
     * @type {boolean}
     * @memberof ProductListItem
     */
    'active_flag'?: boolean;
    /**
     * The product tax
     * @type {number}
     * @memberof ProductListItem
     */
    'tax'?: number;
    /**
     * The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
     * @type {string}
     * @memberof ProductListItem
     */
    'tax_method'?: ProductListItemTaxMethodConst;
    /**
     * The product name
     * @type {string}
     * @memberof ProductListItem
     */
    'name'?: string;
    /**
     * The formatted sum of the product
     * @type {string}
     * @memberof ProductListItem
     */
    'sum_formatted'?: string;
    /**
     * The formatted quantity of the product
     * @type {string}
     * @memberof ProductListItem
     */
    'quantity_formatted'?: string;
    /**
     * The quantity of the product
     * @type {number}
     * @memberof ProductListItem
     */
    'quantity'?: number;
    /**
     * 
     * @type {ProductListItemProduct}
     * @memberof ProductListItem
     */
    'product'?: ProductListItemProduct;
}

export const ProductListItemDiscountTypeConst = {
    percentage: 'percentage',
    amount: 'amount'
} as const;

export type ProductListItemDiscountTypeConst = typeof ProductListItemDiscountTypeConst[keyof typeof ProductListItemDiscountTypeConst];
export const ProductListItemTaxMethodConst = {
    exclusive: 'exclusive',
    inclusive: 'inclusive',
    none: 'none'
} as const;

export type ProductListItemTaxMethodConst = typeof ProductListItemTaxMethodConst[keyof typeof ProductListItemTaxMethodConst];


