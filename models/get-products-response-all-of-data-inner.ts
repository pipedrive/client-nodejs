/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { GetProductsResponseAllOfDataInnerProduct } from './get-products-response-all-of-data-inner-product';

/**
 * 
 * @export
 * @interface GetProductsResponseAllOfDataInner
 */
export interface GetProductsResponseAllOfDataInner {
    /**
     * The ID of the deal-product (the ID of the product attached to the deal)
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'id'?: number;
    /**
     * The ID of the deal
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'deal_id'?: number;
    /**
     * The order number of the product
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'order_nr'?: number;
    /**
     * The ID of the product
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'product_id'?: number;
    /**
     * The ID of the product variation
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'product_variation_id'?: number | null;
    /**
     * The price value of the product
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'item_price'?: number;
    /**
     * The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'discount'?: number;
    /**
     * The type of the discount\'s value
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'discount_type'?: GetProductsResponseAllOfDataInnerDiscountTypeConst;
    /**
     * The sum of all the products attached to the deal
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'sum'?: number;
    /**
     * The currency associated with the deal product
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'currency'?: string;
    /**
     * Whether the product is enabled or not
     * @type {boolean}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'enabled_flag'?: boolean;
    /**
     * The date and time when the product was added to the deal
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'add_time'?: string;
    /**
     * The date and time when the deal product was last edited
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'last_edit'?: string;
    /**
     * The comments of the product
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'comments'?: string;
    /**
     * Whether the product is active or not
     * @type {boolean}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'active_flag'?: boolean;
    /**
     * The product tax
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'tax'?: number;
    /**
     * The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'tax_method'?: GetProductsResponseAllOfDataInnerTaxMethodConst;
    /**
     * The product name
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'name'?: string;
    /**
     * The formatted sum of the product
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'sum_formatted'?: string;
    /**
     * The formatted quantity of the product
     * @type {string}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'quantity_formatted'?: string;
    /**
     * The quantity of the product
     * @type {number}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {GetProductsResponseAllOfDataInnerProduct}
     * @memberof GetProductsResponseAllOfDataInner
     */
    'product'?: GetProductsResponseAllOfDataInnerProduct;
}

export const GetProductsResponseAllOfDataInnerDiscountTypeConst = {
    percentage: 'percentage',
    amount: 'amount'
} as const;

export type GetProductsResponseAllOfDataInnerDiscountTypeConst = typeof GetProductsResponseAllOfDataInnerDiscountTypeConst[keyof typeof GetProductsResponseAllOfDataInnerDiscountTypeConst];
export const GetProductsResponseAllOfDataInnerTaxMethodConst = {
    exclusive: 'exclusive',
    inclusive: 'inclusive',
    none: 'none'
} as const;

export type GetProductsResponseAllOfDataInnerTaxMethodConst = typeof GetProductsResponseAllOfDataInnerTaxMethodConst[keyof typeof GetProductsResponseAllOfDataInnerTaxMethodConst];


