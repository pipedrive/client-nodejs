/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityTypeBulkDeleteResponse from '../model/ActivityTypeBulkDeleteResponse';
import ActivityTypeCreateUpdateDeleteResponse from '../model/ActivityTypeCreateUpdateDeleteResponse';
import ActivityTypeListResponse from '../model/ActivityTypeListResponse';
import IconKey from '../model/IconKey';

/**
* ActivityTypes service.
* @module api/ActivityTypesApi
* @version 1.0.0
*/
export default class ActivityTypesApi {

    /**
    * Constructs a new ActivityTypesApi. 
    * @alias module:api/ActivityTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add new ActivityType
     * Adds a new ActivityType and returns it upon success.
     * @param {String} name The name of the ActivityType
     * @param {module:model/IconKey} iconKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color A designated color for the ActivityType in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse} and HTTP response
     */
    addActivityTypeWithHttpInfo(name, iconKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addActivityType");
      }

      // verify the required parameter 'iconKey' is set
      if (iconKey === undefined || iconKey === null) {
        throw new Error("Missing the required parameter 'iconKey' when calling addActivityType");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'icon_key': iconKey,
        'color': opts['color'],
      };

      let formParamArray = [
        'name',
        'iconKey',
        'color',
      ];

      let contentTypes = ['application/x-www-form-urlencoded', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = ActivityTypeCreateUpdateDeleteResponse;
      return this.apiClient.callApi(
        '/activityTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add new ActivityType
     * Adds a new ActivityType and returns it upon success.
     * @param {String} name The name of the ActivityType
     * @param {module:model/IconKey} iconKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color A designated color for the ActivityType in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse}
     */
    addActivityType(name, iconKey, opts) {
      return this.addActivityTypeWithHttpInfo(name, iconKey, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete an ActivityType
     * Marks an ActivityType as deleted.
     * @param {Number} id The ID of the ActivityType
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse} and HTTP response
     */
    deleteActivityTypeWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActivityType");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = ActivityTypeCreateUpdateDeleteResponse;
      return this.apiClient.callApi(
        '/activityTypes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an ActivityType
     * Marks an ActivityType as deleted.
     * @param {Number} id The ID of the ActivityType
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse}
     */
    deleteActivityType(id) {
      return this.deleteActivityTypeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete multiple ActivityTypes in bulk
     * Marks multiple ActivityTypes as deleted.
     * @param {String} ids The comma-separated ActivityType IDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityTypeBulkDeleteResponse} and HTTP response
     */
    deleteActivityTypesWithHttpInfo(ids) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteActivityTypes");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = ActivityTypeBulkDeleteResponse;
      return this.apiClient.callApi(
        '/activityTypes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete multiple ActivityTypes in bulk
     * Marks multiple ActivityTypes as deleted.
     * @param {String} ids The comma-separated ActivityType IDs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityTypeBulkDeleteResponse}
     */
    deleteActivityTypes(ids) {
      return this.deleteActivityTypesWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get all ActivityTypes
     * Returns all ActivityTypes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityTypeListResponse} and HTTP response
     */
    getActivityTypesWithHttpInfo() {
      const opts = {}
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = ActivityTypeListResponse;
      return this.apiClient.callApi(
        '/activityTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all ActivityTypes
     * Returns all ActivityTypes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityTypeListResponse}
     */
    getActivityTypes() {
      return this.getActivityTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update an ActivityType
     * Updates an ActivityType.
     * @param {Number} id The ID of the ActivityType
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of the ActivityType
     * @param {module:model/IconKey} opts.iconKey 
     * @param {String} opts.color A designated color for the ActivityType in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
     * @param {Number} opts.orderNr An order number for this ActivityType. Order numbers should be used to order the types in the ActivityType selections.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse} and HTTP response
     */
    updateActivityTypeWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivityType");
      }





      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'icon_key': opts['iconKey'],
        'color': opts['color'],
        'order_nr': opts['orderNr'],
      };

      let formParamArray = [
        'name',
        'iconKey',
        'color',
        'orderNr',
      ];

      let contentTypes = ['application/x-www-form-urlencoded', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = ActivityTypeCreateUpdateDeleteResponse;
      return this.apiClient.callApi(
        '/activityTypes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an ActivityType
     * Updates an ActivityType.
     * @param {Number} id The ID of the ActivityType
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of the ActivityType
     * @param {module:model/IconKey} opts.iconKey 
     * @param {String} opts.color A designated color for the ActivityType in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
     * @param {Number} opts.orderNr An order number for this ActivityType. Order numbers should be used to order the types in the ActivityType selections.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityTypeCreateUpdateDeleteResponse}
     */
    updateActivityType(id, opts) {
      return this.updateActivityTypeWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
