/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserProviderLinkCreateRequest from '../model/UserProviderLinkCreateRequest';
import UserProviderLinkErrorResponse from '../model/UserProviderLinkErrorResponse';
import UserProviderLinkSuccessResponse from '../model/UserProviderLinkSuccessResponse';

/**
* Meetings service.
* @module api/MeetingsApi
* @version 1.0.0
*/
export default class MeetingsApi {

    /**
    * Constructs a new MeetingsApi. 
    * @alias module:api/MeetingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient;
    }



    /**
     * Delete the link between a user and the installed video call integration
     * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
     * @param {String} id Unique identifier linking a user to the installed integration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserProviderLinkSuccessResponse} and HTTP response
     */
    deleteUserProviderLinkWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserProviderLink");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = UserProviderLinkSuccessResponse;
      return this.apiClient.callApi(
        '/meetings/userProviderLinks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the link between a user and the installed video call integration
     * A video calling provider must call this endpoint to remove the link between a user and the installed video calling app.
     * @param {String} id Unique identifier linking a user to the installed integration
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserProviderLinkSuccessResponse}
     */
    deleteUserProviderLink(id) {
      return this.deleteUserProviderLinkWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Link a user with the installed video call integration
     * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user's information is sent.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProviderLinkCreateRequest} opts.userProviderLinkCreateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserProviderLinkSuccessResponse} and HTTP response
     */
    saveUserProviderLinkWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['userProviderLinkCreateRequest'];

      if (opts['user_provider_id'] === undefined || opts['user_provider_id'] === null) {
        throw new Error("Missing the required parameter 'user_provider_id' when calling saveUserProviderLink");
      }
      if (opts['user_id'] === undefined || opts['user_id'] === null) {
        throw new Error("Missing the required parameter 'user_id' when calling saveUserProviderLink");
      }
      if (opts['company_id'] === undefined || opts['company_id'] === null) {
        throw new Error("Missing the required parameter 'company_id' when calling saveUserProviderLink");
      }
      if (opts['marketplace_client_id'] === undefined || opts['marketplace_client_id'] === null) {
        throw new Error("Missing the required parameter 'marketplace_client_id' when calling saveUserProviderLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = ['application/json', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = UserProviderLinkSuccessResponse;
      return this.apiClient.callApi(
        '/meetings/userProviderLinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link a user with the installed video call integration
     * A video calling provider must call this endpoint after a user has installed the video calling app so that the new user's information is sent.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProviderLinkCreateRequest} opts.userProviderLinkCreateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserProviderLinkSuccessResponse}
     */
    saveUserProviderLink(opts) {
      return this.saveUserProviderLinkWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
