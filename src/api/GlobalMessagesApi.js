/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GlobalMessageDelete from '../model/GlobalMessageDelete';
import GlobalMessageGet from '../model/GlobalMessageGet';

/**
* GlobalMessages service.
* @module api/GlobalMessagesApi
* @version 1.0.0
*/
export default class GlobalMessagesApi {

    /**
    * Constructs a new GlobalMessagesApi. 
    * @alias module:api/GlobalMessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Dismiss a global message
     * Removes a global message from being shown if the message is dismissible.
     * @param {Number} id The ID of the global message to be dismissed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GlobalMessageDelete} and HTTP response
     */
    deleteGlobalMessageWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGlobalMessage");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', ];
      let accepts = ['application/json', ];
      let returnType = GlobalMessageDelete;
      return this.apiClient.callApi(
        '/globalMessages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Dismiss a global message
     * Removes a global message from being shown if the message is dismissible.
     * @param {Number} id The ID of the global message to be dismissed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GlobalMessageDelete}
     */
    deleteGlobalMessage(id) {
      return this.deleteGlobalMessageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get global messages
     * Returns data about the global messages to display for the authorized user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of messages to get from 1 to 100. The message number 1 is returned by default. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GlobalMessageGet} and HTTP response
     */
    getGlobalMessagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', ];
      let accepts = ['application/json', ];
      let returnType = GlobalMessageGet;
      return this.apiClient.callApi(
        '/globalMessages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get global messages
     * Returns data about the global messages to display for the authorized user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of messages to get from 1 to 100. The message number 1 is returned by default. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GlobalMessageGet}
     */
    getGlobalMessages(opts) {
      return this.getGlobalMessagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
