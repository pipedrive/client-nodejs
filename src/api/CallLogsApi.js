/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseResponse from '../model/BaseResponse';
import CallLogObject from '../model/CallLogObject';
import CallLogResponse400 from '../model/CallLogResponse400';
import CallLogResponse403 from '../model/CallLogResponse403';
import CallLogResponse404 from '../model/CallLogResponse404';
import CallLogResponse409 from '../model/CallLogResponse409';
import CallLogResponse410 from '../model/CallLogResponse410';
import CallLogResponse500 from '../model/CallLogResponse500';

/**
* CallLogs service.
* @module api/CallLogsApi
* @version 1.0.0
*/
export default class CallLogsApi {

    /**
    * Constructs a new CallLogsApi. 
    * @alias module:api/CallLogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a call log
     * Adds a new call log.
     * @param {Object} opts Optional parameters
     * @param {module:model/CallLogObject} opts.callLogObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseResponse} and HTTP response
     */
    addCallLogWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['callLogObject'];

      if (opts['outcome'] === undefined || opts['outcome'] === null) {
        throw new Error("Missing the required parameter 'outcome' when calling addCallLog");
      }
      if (opts['to_phone_number'] === undefined || opts['to_phone_number'] === null) {
        throw new Error("Missing the required parameter 'to_phone_number' when calling addCallLog");
      }
      if (opts['start_time'] === undefined || opts['start_time'] === null) {
        throw new Error("Missing the required parameter 'start_time' when calling addCallLog");
      }
      if (opts['end_time'] === undefined || opts['end_time'] === null) {
        throw new Error("Missing the required parameter 'end_time' when calling addCallLog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = ['application/json', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/callLogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a call log
     * Adds a new call log.
     * @param {Object} opts Optional parameters
     * @param {module:model/CallLogObject} opts.callLogObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseResponse}
     */
    addCallLog(opts) {
      return this.addCallLogWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Attach an audio file to the call log
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @param {String} id The ID received when you create the call log
     * @param {File} file Audio file supported by the HTML5 specification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseResponse} and HTTP response
     */
    addCallLogAudioFileWithHttpInfo(id, file) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCallLogAudioFile");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling addCallLogAudioFile");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
      };

      let formParamArray = [
        'file',
      ];

      let contentTypes = ['multipart/form-data', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/callLogs/{id}/recordings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach an audio file to the call log
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @param {String} id The ID received when you create the call log
     * @param {File} file Audio file supported by the HTML5 specification
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseResponse}
     */
    addCallLogAudioFile(id, file) {
      return this.addCallLogAudioFileWithHttpInfo(id, file)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete a call log
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @param {String} id The ID received when you create the call log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseResponse} and HTTP response
     */
    deleteCallLogWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCallLog");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/callLogs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a call log
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @param {String} id The ID received when you create the call log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseResponse}
     */
    deleteCallLog(id) {
      return this.deleteCallLogWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get details of a call log
     * Returns details of a specific call log.
     * @param {String} id The ID received when you create the call log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseResponse} and HTTP response
     */
    getCallLogWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCallLog");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/callLogs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details of a call log
     * Returns details of a specific call log.
     * @param {String} id The ID received when you create the call log
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseResponse}
     */
    getCallLog(id) {
      return this.getCallLogWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get all call logs assigned to a particular user
     * Returns all call logs assigned to a particular user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseResponse} and HTTP response
     */
    getUserCallLogsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;



      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit'],
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/callLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all call logs assigned to a particular user
     * Returns all call logs assigned to a particular user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseResponse}
     */
    getUserCallLogs(opts) {
      return this.getUserCallLogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
