/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MailMessage from '../model/MailMessage';
import MailThread from '../model/MailThread';
import MailThreadDelete from '../model/MailThreadDelete';
import MailThreadMessages from '../model/MailThreadMessages';
import MailThreadOne from '../model/MailThreadOne';
import MailThreadPut from '../model/MailThreadPut';
import NumberBoolean from '../model/NumberBoolean';
import NumberBooleanDefault0 from '../model/NumberBooleanDefault0';

/**
* Mailbox service.
* @module api/MailboxApi
* @version 1.0.0
*/
export default class MailboxApi {

    /**
    * Constructs a new MailboxApi. 
    * @alias module:api/MailboxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete mail thread
     * Marks a mail thread as deleted.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailThreadDelete} and HTTP response
     */
    deleteMailThreadWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMailThread");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailThreadDelete;
      return this.apiClient.callApi(
        '/mailbox/mailThreads/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete mail thread
     * Marks a mail thread as deleted.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailThreadDelete}
     */
    deleteMailThread(id) {
      return this.deleteMailThreadWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get one mail message
     * Returns data about a specific mail message.
     * @param {Number} id The ID of the mail message to fetch
     * @param {Object} opts Optional parameters
     * @param {module:model/NumberBooleanDefault0} opts.includeBody Whether to include the full message body or not. `0` = Don't include, `1` = Include
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailMessage} and HTTP response
     */
    getMailMessageWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMailMessage");
      }


      let pathParams = {
        'id': id,
      };
      let queryParams = {
        'include_body': opts['includeBody'],
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailMessage;
      return this.apiClient.callApi(
        '/mailbox/mailMessages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get one mail message
     * Returns data about a specific mail message.
     * @param {Number} id The ID of the mail message to fetch
     * @param {Object} opts Optional parameters
     * @param {module:model/NumberBooleanDefault0} opts.includeBody Whether to include the full message body or not. `0` = Don't include, `1` = Include
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailMessage}
     */
    getMailMessage(id, opts) {
      return this.getMailMessageWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get one mail thread
     * Returns a specific mail thread.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailThreadOne} and HTTP response
     */
    getMailThreadWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMailThread");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailThreadOne;
      return this.apiClient.callApi(
        '/mailbox/mailThreads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get one mail thread
     * Returns a specific mail thread.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailThreadOne}
     */
    getMailThread(id) {
      return this.getMailThreadWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get all mail messages of mail thread
     * Get all the mail messages inside a specified mail thread.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailThreadMessages} and HTTP response
     */
    getMailThreadMessagesWithHttpInfo(id) {
      const opts = {}
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMailThreadMessages");
      }

      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailThreadMessages;
      return this.apiClient.callApi(
        '/mailbox/mailThreads/{id}/mailMessages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all mail messages of mail thread
     * Get all the mail messages inside a specified mail thread.
     * @param {Number} id The ID of the mail thread
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailThreadMessages}
     */
    getMailThreadMessages(id) {
      return this.getMailThreadMessagesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get mail threads
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * @param {module:model/String} folder The type of folder to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailThread} and HTTP response
     */
    getMailThreadsWithHttpInfo(folder, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling getMailThreads");
      }



      let pathParams = {
      };
      let queryParams = {
        'folder': folder,
        'start': opts['start'],
        'limit': opts['limit'],
      };
      let headerParams = {
      };
      let formParams = {
      };

      let formParamArray = [
      ];

      let contentTypes = [];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailThread;
      return this.apiClient.callApi(
        '/mailbox/mailThreads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get mail threads
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * @param {module:model/String} folder The type of folder to fetch
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailThread}
     */
    getMailThreads(folder, opts) {
      return this.getMailThreadsWithHttpInfo(folder, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update mail thread details
     * Updates the properties of a mail thread.
     * @param {Number} id The ID of the mail thread
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dealId The ID of the deal this thread is associated with
     * @param {String} opts.leadId The ID of the lead this thread is associated with
     * @param {module:model/NumberBoolean} opts.sharedFlag Whether this thread is shared with other users in your company
     * @param {module:model/NumberBoolean} opts.readFlag Whether this thread is read or unread
     * @param {module:model/NumberBoolean} opts.archivedFlag Whether this thread is archived or not. You can only archive threads that belong to Inbox folder. Archived threads will disappear from Inbox.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MailThreadPut} and HTTP response
     */
    updateMailThreadDetailsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMailThreadDetails");
      }






      let pathParams = {
        'id': id,
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'deal_id': opts['dealId'],
        'lead_id': opts['leadId'],
        'shared_flag': opts['sharedFlag'],
        'read_flag': opts['readFlag'],
        'archived_flag': opts['archivedFlag'],
      };

      let formParamArray = [
        'dealId',
        'leadId',
        'sharedFlag',
        'readFlag',
        'archivedFlag',
      ];

      let contentTypes = ['application/x-www-form-urlencoded', ];
      const isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      const isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = { ...postBody, ...opts };
      } else if (isURLEncoded) {
        for (let key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      let authNames = ['api_key', 'oauth2', ];
      let accepts = ['application/json', ];
      let returnType = MailThreadPut;
      return this.apiClient.callApi(
        '/mailbox/mailThreads/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update mail thread details
     * Updates the properties of a mail thread.
     * @param {Number} id The ID of the mail thread
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dealId The ID of the deal this thread is associated with
     * @param {String} opts.leadId The ID of the lead this thread is associated with
     * @param {module:model/NumberBoolean} opts.sharedFlag Whether this thread is shared with other users in your company
     * @param {module:model/NumberBoolean} opts.readFlag Whether this thread is read or unread
     * @param {module:model/NumberBoolean} opts.archivedFlag Whether this thread is archived or not. You can only archive threads that belong to Inbox folder. Archived threads will disappear from Inbox.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MailThreadPut}
     */
    updateMailThreadDetails(id, opts) {
      return this.updateMailThreadDetailsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
