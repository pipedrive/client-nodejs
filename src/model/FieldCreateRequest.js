/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldCreateRequestAllOf from './FieldCreateRequestAllOf';
import FieldType from './FieldType';
import FieldTypeAsString from './FieldTypeAsString';

/**
 * The FieldCreateRequest model module.
 * @module model/FieldCreateRequest
 * @version 1.0.0
 */
class FieldCreateRequest {
    /**
     * Constructs a new <code>FieldCreateRequest</code>.
     * @alias module:model/FieldCreateRequest
     * @implements module:model/FieldCreateRequestAllOf
     * @implements module:model/FieldType
     * @param name {String} The name of the field
     * @param fieldType {module:model/FieldTypeAsString} 
     */
    constructor(name, fieldType) { 
        FieldCreateRequestAllOf.initialize(this, name);FieldType.initialize(this, fieldType);
        FieldCreateRequest.initialize(this, name, fieldType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, fieldType) { 
        obj['name'] = name;
        obj['field_type'] = fieldType;
    }

    /**
     * Constructs a <code>FieldCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldCreateRequest} obj Optional instance to populate.
     * @return {module:model/FieldCreateRequest} The populated <code>FieldCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldCreateRequest();
            FieldCreateRequestAllOf.constructFromObject(data, obj);
            FieldType.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');

                delete data['name'];
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], 'String');

                delete data['options'];
            }
            if (data.hasOwnProperty('add_visible_flag')) {
                obj['add_visible_flag'] = ApiClient.convertToType(data['add_visible_flag'], 'Boolean');

                delete data['add_visible_flag'];
            }
            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = FieldTypeAsString.constructFromObject(data['field_type']);

                delete data['field_type'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The name of the field
 * @member {String} name
 */
FieldCreateRequest.prototype['name'] = undefined;

/**
 * When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{\"label\":\"New Item\"}]`
 * @member {String} options
 */
FieldCreateRequest.prototype['options'] = undefined;

/**
 * Whether the field is available in the 'add new' modal or not (both in the web and mobile app)
 * @member {module:model/FieldCreateRequest.AddVisibleFlagEnum} add_visible_flag
 * @default true
 */
FieldCreateRequest.prototype['add_visible_flag'] = true;

/**
 * @member {module:model/FieldTypeAsString} field_type
 */
FieldCreateRequest.prototype['field_type'] = undefined;


// Implement FieldCreateRequestAllOf interface:
/**
 * The name of the field
 * @member {String} name
 */
FieldCreateRequestAllOf.prototype['name'] = undefined;
/**
 * When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{\"label\":\"New Item\"}]`
 * @member {String} options
 */
FieldCreateRequestAllOf.prototype['options'] = undefined;
/**
 * Whether the field is available in the 'add new' modal or not (both in the web and mobile app)
 * @member {module:model/FieldCreateRequestAllOf.AddVisibleFlagEnum} add_visible_flag
 * @default true
 */
FieldCreateRequestAllOf.prototype['add_visible_flag'] = true;
// Implement FieldType interface:
/**
 * @member {module:model/FieldTypeAsString} field_type
 */
FieldType.prototype['field_type'] = undefined;



/**
 * Allowed values for the <code>add_visible_flag</code> property.
 * @enum {Boolean}
 * @readonly
 */
FieldCreateRequest['AddVisibleFlagEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default FieldCreateRequest;

