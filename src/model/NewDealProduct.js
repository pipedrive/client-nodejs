/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicDealProduct from './BasicDealProduct';
import NewDealProductAllOf from './NewDealProductAllOf';
import NumberBoolean from './NumberBoolean';

/**
 * The NewDealProduct model module.
 * @module model/NewDealProduct
 * @version 1.0.0
 */
class NewDealProduct {
    /**
     * Constructs a new <code>NewDealProduct</code>.
     * @alias module:model/NewDealProduct
     * @implements module:model/BasicDealProduct
     * @implements module:model/NewDealProductAllOf
     * @param itemPrice {Number} The price at which this product will be added to the deal
     * @param quantity {Number} Quantity – e.g. how many items of this product will be added to the deal
     * @param productId {Number} The ID of the product that will be attached
     */
    constructor(itemPrice, quantity, productId) { 
        BasicDealProduct.initialize(this);NewDealProductAllOf.initialize(this, productId);
        NewDealProduct.initialize(this, itemPrice, quantity, productId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemPrice, quantity, productId) { 
        obj['item_price'] = itemPrice;
        obj['quantity'] = quantity;
        obj['product_id'] = productId;
    }

    /**
     * Constructs a <code>NewDealProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewDealProduct} obj Optional instance to populate.
     * @return {module:model/NewDealProduct} The populated <code>NewDealProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewDealProduct();
            BasicDealProduct.constructFromObject(data, obj);
            NewDealProductAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('item_price')) {
                obj['item_price'] = ApiClient.convertToType(data['item_price'], 'Number');

                delete data['item_price'];
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');

                delete data['quantity'];
            }
            if (data.hasOwnProperty('discount_percentage')) {
                obj['discount_percentage'] = ApiClient.convertToType(data['discount_percentage'], 'Number');

                delete data['discount_percentage'];
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');

                delete data['duration'];
            }
            if (data.hasOwnProperty('product_variation_id')) {
                obj['product_variation_id'] = ApiClient.convertToType(data['product_variation_id'], 'Number');

                delete data['product_variation_id'];
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');

                delete data['comments'];
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');

                delete data['tax'];
            }
            if (data.hasOwnProperty('enabled_flag')) {
                obj['enabled_flag'] = ApiClient.convertToType(data['enabled_flag'], NumberBoolean);

                delete data['enabled_flag'];
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');

                delete data['product_id'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The price at which this product will be added to the deal
 * @member {Number} item_price
 */
NewDealProduct.prototype['item_price'] = undefined;

/**
 * Quantity – e.g. how many items of this product will be added to the deal
 * @member {Number} quantity
 */
NewDealProduct.prototype['quantity'] = undefined;

/**
 * The discount %. If omitted, will be set to 0.
 * @member {Number} discount_percentage
 * @default 0
 */
NewDealProduct.prototype['discount_percentage'] = 0;

/**
 * The duration of the product (when product durations are not enabled for the company or if omitted, defaults to 1)
 * @member {Number} duration
 * @default 1
 */
NewDealProduct.prototype['duration'] = 1;

/**
 * The ID of the product variation to use. When omitted, no variation will be used.
 * @member {Number} product_variation_id
 */
NewDealProduct.prototype['product_variation_id'] = undefined;

/**
 * Any textual comment associated with this product-deal attachment. Visible and editable in the application UI.
 * @member {String} comments
 */
NewDealProduct.prototype['comments'] = undefined;

/**
 * The tax percentage
 * @member {Number} tax
 * @default 0
 */
NewDealProduct.prototype['tax'] = 0;

/**
 * Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with a specific price and discount criteria - but keep them disabled, which refrains them from being included in the deal price calculation. When omitted, the product will be marked as enabled by default.
 * @member {module:model/NumberBoolean} enabled_flag
 */
NewDealProduct.prototype['enabled_flag'] = undefined;

/**
 * The ID of the product that will be attached
 * @member {Number} product_id
 */
NewDealProduct.prototype['product_id'] = undefined;


// Implement BasicDealProduct interface:
/**
 * The price at which this product will be added to the deal
 * @member {Number} item_price
 */
BasicDealProduct.prototype['item_price'] = undefined;
/**
 * Quantity – e.g. how many items of this product will be added to the deal
 * @member {Number} quantity
 */
BasicDealProduct.prototype['quantity'] = undefined;
/**
 * The discount %. If omitted, will be set to 0.
 * @member {Number} discount_percentage
 * @default 0
 */
BasicDealProduct.prototype['discount_percentage'] = 0;
/**
 * The duration of the product (when product durations are not enabled for the company or if omitted, defaults to 1)
 * @member {Number} duration
 * @default 1
 */
BasicDealProduct.prototype['duration'] = 1;
/**
 * The ID of the product variation to use. When omitted, no variation will be used.
 * @member {Number} product_variation_id
 */
BasicDealProduct.prototype['product_variation_id'] = undefined;
/**
 * Any textual comment associated with this product-deal attachment. Visible and editable in the application UI.
 * @member {String} comments
 */
BasicDealProduct.prototype['comments'] = undefined;
/**
 * The tax percentage
 * @member {Number} tax
 * @default 0
 */
BasicDealProduct.prototype['tax'] = 0;
/**
 * Whether the product is enabled on the deal or not. This makes it possible to add products to a deal with a specific price and discount criteria - but keep them disabled, which refrains them from being included in the deal price calculation. When omitted, the product will be marked as enabled by default.
 * @member {module:model/NumberBoolean} enabled_flag
 */
BasicDealProduct.prototype['enabled_flag'] = undefined;
// Implement NewDealProductAllOf interface:
/**
 * The ID of the product that will be attached
 * @member {Number} product_id
 */
NewDealProductAllOf.prototype['product_id'] = undefined;




export default NewDealProduct;

