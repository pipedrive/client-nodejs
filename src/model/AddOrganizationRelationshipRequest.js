/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddOrganizationRelationshipRequest model module.
 * @module model/AddOrganizationRelationshipRequest
 * @version 1.0.0
 */
class AddOrganizationRelationshipRequest {
    /**
     * Constructs a new <code>AddOrganizationRelationshipRequest</code>.
     * @alias module:model/AddOrganizationRelationshipRequest
     * @param type {module:model/AddOrganizationRelationshipRequest.TypeEnum} The type of organization relationship
     * @param relOwnerOrgId {Number} The owner of the relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.
     * @param relLinkedOrgId {Number} The linked organization in the relationship. If type is `parent`, then the linked organization is the daughter.
     */
    constructor(type, relOwnerOrgId, relLinkedOrgId) { 
        
        AddOrganizationRelationshipRequest.initialize(this, type, relOwnerOrgId, relLinkedOrgId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, relOwnerOrgId, relLinkedOrgId) { 
        obj['type'] = type;
        obj['rel_owner_org_id'] = relOwnerOrgId;
        obj['rel_linked_org_id'] = relLinkedOrgId;
    }

    /**
     * Constructs a <code>AddOrganizationRelationshipRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddOrganizationRelationshipRequest} obj Optional instance to populate.
     * @return {module:model/AddOrganizationRelationshipRequest} The populated <code>AddOrganizationRelationshipRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddOrganizationRelationshipRequest();

            if (data.hasOwnProperty('org_id')) {
                obj['org_id'] = ApiClient.convertToType(data['org_id'], 'Number');

                delete data['org_id'];
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');

                delete data['type'];
            }
            if (data.hasOwnProperty('rel_owner_org_id')) {
                obj['rel_owner_org_id'] = ApiClient.convertToType(data['rel_owner_org_id'], 'Number');

                delete data['rel_owner_org_id'];
            }
            if (data.hasOwnProperty('rel_linked_org_id')) {
                obj['rel_linked_org_id'] = ApiClient.convertToType(data['rel_linked_org_id'], 'Number');

                delete data['rel_linked_org_id'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the base organization for the returned calculated values
 * @member {Number} org_id
 */
AddOrganizationRelationshipRequest.prototype['org_id'] = undefined;

/**
 * The type of organization relationship
 * @member {module:model/AddOrganizationRelationshipRequest.TypeEnum} type
 */
AddOrganizationRelationshipRequest.prototype['type'] = undefined;

/**
 * The owner of the relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.
 * @member {Number} rel_owner_org_id
 */
AddOrganizationRelationshipRequest.prototype['rel_owner_org_id'] = undefined;

/**
 * The linked organization in the relationship. If type is `parent`, then the linked organization is the daughter.
 * @member {Number} rel_linked_org_id
 */
AddOrganizationRelationshipRequest.prototype['rel_linked_org_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AddOrganizationRelationshipRequest['TypeEnum'] = {

    /**
     * value: "parent"
     * @const
     */
    "parent": "parent",

    /**
     * value: "related"
     * @const
     */
    "related": "related"
};



export default AddOrganizationRelationshipRequest;

