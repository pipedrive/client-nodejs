/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrganizationDataWithIdAndActiveFlagAllOf from './OrganizationDataWithIdAndActiveFlagAllOf';
import RelationshipOrganizationInfoItem from './RelationshipOrganizationInfoItem';

/**
 * The RelationshipOrganizationInfoItemWithActiveFlag model module.
 * @module model/RelationshipOrganizationInfoItemWithActiveFlag
 * @version 1.0.0
 */
class RelationshipOrganizationInfoItemWithActiveFlag {
    /**
     * Constructs a new <code>RelationshipOrganizationInfoItemWithActiveFlag</code>.
     * @alias module:model/RelationshipOrganizationInfoItemWithActiveFlag
     * @implements module:model/RelationshipOrganizationInfoItem
     * @implements module:model/OrganizationDataWithIdAndActiveFlagAllOf
     */
    constructor() { 
        RelationshipOrganizationInfoItem.initialize(this);OrganizationDataWithIdAndActiveFlagAllOf.initialize(this);
        RelationshipOrganizationInfoItemWithActiveFlag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelationshipOrganizationInfoItemWithActiveFlag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipOrganizationInfoItemWithActiveFlag} obj Optional instance to populate.
     * @return {module:model/RelationshipOrganizationInfoItemWithActiveFlag} The populated <code>RelationshipOrganizationInfoItemWithActiveFlag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipOrganizationInfoItemWithActiveFlag();
            RelationshipOrganizationInfoItem.constructFromObject(data, obj);
            OrganizationDataWithIdAndActiveFlagAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');

                delete data['name'];
            }
            if (data.hasOwnProperty('people_count')) {
                obj['people_count'] = ApiClient.convertToType(data['people_count'], 'Number');

                delete data['people_count'];
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'Number');

                delete data['owner_id'];
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');

                delete data['address'];
            }
            if (data.hasOwnProperty('cc_email')) {
                obj['cc_email'] = ApiClient.convertToType(data['cc_email'], 'String');

                delete data['cc_email'];
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');

                delete data['value'];
            }
            if (data.hasOwnProperty('active_flag')) {
                obj['active_flag'] = ApiClient.convertToType(data['active_flag'], 'Boolean');

                delete data['active_flag'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The name of the organization associated with the item
 * @member {String} name
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['name'] = undefined;

/**
 * The number of people connected with the organization that is associated with the item
 * @member {Number} people_count
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['people_count'] = undefined;

/**
 * The ID of the owner of the organization that is associated with the item
 * @member {Number} owner_id
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['owner_id'] = undefined;

/**
 * The address of the organization
 * @member {String} address
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['address'] = undefined;

/**
 * The BCC email of the organization associated with the item
 * @member {String} cc_email
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['cc_email'] = undefined;

/**
 * The ID of the organization
 * @member {Number} value
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['value'] = undefined;

/**
 * Whether the associated organization is active or not
 * @member {Boolean} active_flag
 */
RelationshipOrganizationInfoItemWithActiveFlag.prototype['active_flag'] = undefined;


// Implement RelationshipOrganizationInfoItem interface:
/**
 * The name of the organization associated with the item
 * @member {String} name
 */
RelationshipOrganizationInfoItem.prototype['name'] = undefined;
/**
 * The number of people connected with the organization that is associated with the item
 * @member {Number} people_count
 */
RelationshipOrganizationInfoItem.prototype['people_count'] = undefined;
/**
 * The ID of the owner of the organization that is associated with the item
 * @member {Number} owner_id
 */
RelationshipOrganizationInfoItem.prototype['owner_id'] = undefined;
/**
 * The address of the organization
 * @member {String} address
 */
RelationshipOrganizationInfoItem.prototype['address'] = undefined;
/**
 * The BCC email of the organization associated with the item
 * @member {String} cc_email
 */
RelationshipOrganizationInfoItem.prototype['cc_email'] = undefined;
/**
 * The ID of the organization
 * @member {Number} value
 */
RelationshipOrganizationInfoItem.prototype['value'] = undefined;
// Implement OrganizationDataWithIdAndActiveFlagAllOf interface:
/**
 * Whether the associated organization is active or not
 * @member {Boolean} active_flag
 */
OrganizationDataWithIdAndActiveFlagAllOf.prototype['active_flag'] = undefined;




export default RelationshipOrganizationInfoItemWithActiveFlag;

