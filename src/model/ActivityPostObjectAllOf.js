/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NumberBoolean from './NumberBoolean';

/**
 * The ActivityPostObjectAllOf model module.
 * @module model/ActivityPostObjectAllOf
 * @version 1.0.0
 */
class ActivityPostObjectAllOf {
    /**
     * Constructs a new <code>ActivityPostObjectAllOf</code>.
     * @alias module:model/ActivityPostObjectAllOf
     */
    constructor() { 
        
        ActivityPostObjectAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityPostObjectAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityPostObjectAllOf} obj Optional instance to populate.
     * @return {module:model/ActivityPostObjectAllOf} The populated <code>ActivityPostObjectAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityPostObjectAllOf();

            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');

                delete data['subject'];
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');

                delete data['type'];
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');

                delete data['user_id'];
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [Object]);

                delete data['participants'];
            }
            if (data.hasOwnProperty('busy_flag')) {
                obj['busy_flag'] = ApiClient.convertToType(data['busy_flag'], 'Boolean');

                delete data['busy_flag'];
            }
            if (data.hasOwnProperty('attendees')) {
                obj['attendees'] = ApiClient.convertToType(data['attendees'], [Object]);

                delete data['attendees'];
            }
            if (data.hasOwnProperty('done')) {
                obj['done'] = ApiClient.convertToType(data['done'], NumberBoolean);

                delete data['done'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The subject of the activity. When value for subject is not set, it will be given a default value `Call`.
 * @member {String} subject
 */
ActivityPostObjectAllOf.prototype['subject'] = undefined;

/**
 * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes. When value for type is not set, it will be given a default value `Call`.
 * @member {String} type
 */
ActivityPostObjectAllOf.prototype['type'] = undefined;

/**
 * The ID of the user whom the activity is assigned to. If omitted, the activity is assigned to the authorized user.
 * @member {Number} user_id
 */
ActivityPostObjectAllOf.prototype['user_id'] = undefined;

/**
 * List of multiple persons (participants) this activity is associated with. If omitted, single participant from `person_id` field is used. It requires a structure as follows: `[{\"person_id\":1,\"primary_flag\":true}]`
 * @member {Array.<Object>} participants
 */
ActivityPostObjectAllOf.prototype['participants'] = undefined;

/**
 * Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
 * @member {module:model/ActivityPostObjectAllOf.BusyFlagEnum} busy_flag
 */
ActivityPostObjectAllOf.prototype['busy_flag'] = undefined;

/**
 * The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{\"email_address\":\"mail@example.org\"}]` or `[{\"person_id\":1, \"email_address\":\"mail@example.org\"}]`
 * @member {Array.<Object>} attendees
 */
ActivityPostObjectAllOf.prototype['attendees'] = undefined;

/**
 * Whether the activity is done or not. 0 = Not done, 1 = Done
 * @member {module:model/NumberBoolean} done
 */
ActivityPostObjectAllOf.prototype['done'] = undefined;





/**
 * Allowed values for the <code>busy_flag</code> property.
 * @enum {Boolean}
 * @readonly
 */
ActivityPostObjectAllOf['BusyFlagEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default ActivityPostObjectAllOf;

