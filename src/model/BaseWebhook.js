/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NumberBooleanDefault1 from './NumberBooleanDefault1';

/**
 * The BaseWebhook model module.
 * @module model/BaseWebhook
 * @version 1.0.0
 */
class BaseWebhook {
    /**
     * Constructs a new <code>BaseWebhook</code>.
     * @alias module:model/BaseWebhook
     */
    constructor() { 
        
        BaseWebhook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseWebhook} obj Optional instance to populate.
     * @return {module:model/BaseWebhook} The populated <code>BaseWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseWebhook();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');

                delete data['id'];
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'Number');

                delete data['company_id'];
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'Number');

                delete data['owner_id'];
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');

                delete data['user_id'];
            }
            if (data.hasOwnProperty('event_action')) {
                obj['event_action'] = ApiClient.convertToType(data['event_action'], 'String');

                delete data['event_action'];
            }
            if (data.hasOwnProperty('event_object')) {
                obj['event_object'] = ApiClient.convertToType(data['event_object'], 'String');

                delete data['event_object'];
            }
            if (data.hasOwnProperty('subscription_url')) {
                obj['subscription_url'] = ApiClient.convertToType(data['subscription_url'], 'String');

                delete data['subscription_url'];
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], NumberBooleanDefault1);

                delete data['is_active'];
            }
            if (data.hasOwnProperty('add_time')) {
                obj['add_time'] = ApiClient.convertToType(data['add_time'], 'Date');

                delete data['add_time'];
            }
            if (data.hasOwnProperty('remove_time')) {
                obj['remove_time'] = ApiClient.convertToType(data['remove_time'], 'Date');

                delete data['remove_time'];
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');

                delete data['type'];
            }
            if (data.hasOwnProperty('http_auth_user')) {
                obj['http_auth_user'] = ApiClient.convertToType(data['http_auth_user'], 'String');

                delete data['http_auth_user'];
            }
            if (data.hasOwnProperty('http_auth_password')) {
                obj['http_auth_password'] = ApiClient.convertToType(data['http_auth_password'], 'String');

                delete data['http_auth_password'];
            }
            if (data.hasOwnProperty('additional_data')) {
                obj['additional_data'] = ApiClient.convertToType(data['additional_data'], Object);

                delete data['additional_data'];
            }
            if (data.hasOwnProperty('remove_reason')) {
                obj['remove_reason'] = ApiClient.convertToType(data['remove_reason'], 'String');

                delete data['remove_reason'];
            }
            if (data.hasOwnProperty('last_delivery_time')) {
                obj['last_delivery_time'] = ApiClient.convertToType(data['last_delivery_time'], 'Date');

                delete data['last_delivery_time'];
            }
            if (data.hasOwnProperty('last_http_status')) {
                obj['last_http_status'] = ApiClient.convertToType(data['last_http_status'], 'Number');

                delete data['last_http_status'];
            }
            if (data.hasOwnProperty('admin_id')) {
                obj['admin_id'] = ApiClient.convertToType(data['admin_id'], 'Number');

                delete data['admin_id'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the Webhook
 * @member {Number} id
 */
BaseWebhook.prototype['id'] = undefined;

/**
 * The ID of the company related to the Webhook
 * @member {Number} company_id
 */
BaseWebhook.prototype['company_id'] = undefined;

/**
 * The ID of the user who owns the Webhook
 * @member {Number} owner_id
 */
BaseWebhook.prototype['owner_id'] = undefined;

/**
 * The ID of the user related to the Webhook
 * @member {Number} user_id
 */
BaseWebhook.prototype['user_id'] = undefined;

/**
 * The Webhook action
 * @member {String} event_action
 */
BaseWebhook.prototype['event_action'] = undefined;

/**
 * The Webhook object
 * @member {String} event_object
 */
BaseWebhook.prototype['event_object'] = undefined;

/**
 * The subscription URL of the Webhook
 * @member {String} subscription_url
 */
BaseWebhook.prototype['subscription_url'] = undefined;

/**
 * The Webhook's status
 * @member {module:model/NumberBooleanDefault1} is_active
 */
BaseWebhook.prototype['is_active'] = undefined;

/**
 * The date when the Webhook was added
 * @member {Date} add_time
 */
BaseWebhook.prototype['add_time'] = undefined;

/**
 * The date when the Webhook was removed (if removed)
 * @member {Date} remove_time
 */
BaseWebhook.prototype['remove_time'] = undefined;

/**
 * The type of the Webhook
 * @member {module:model/BaseWebhook.TypeEnum} type
 */
BaseWebhook.prototype['type'] = undefined;

/**
 * The username of the `subscription_url` of the Webhook
 * @member {String} http_auth_user
 */
BaseWebhook.prototype['http_auth_user'] = undefined;

/**
 * The password of the `subscription_url` of the Webhook
 * @member {String} http_auth_password
 */
BaseWebhook.prototype['http_auth_password'] = undefined;

/**
 * Any additional data related to the Webhook
 * @member {Object} additional_data
 */
BaseWebhook.prototype['additional_data'] = undefined;

/**
 * The removal reason of the Webhook (if removed)
 * @member {String} remove_reason
 */
BaseWebhook.prototype['remove_reason'] = undefined;

/**
 * The last delivery time of the Webhook
 * @member {Date} last_delivery_time
 */
BaseWebhook.prototype['last_delivery_time'] = undefined;

/**
 * The last delivery HTTP status of the Webhook
 * @member {Number} last_http_status
 */
BaseWebhook.prototype['last_http_status'] = undefined;

/**
 * The ID of the admin of the Webhook
 * @member {Number} admin_id
 */
BaseWebhook.prototype['admin_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BaseWebhook['TypeEnum'] = {

    /**
     * value: "general"
     * @const
     */
    "general": "general",

    /**
     * value: "app"
     * @const
     */
    "app": "app"
};



export default BaseWebhook;

