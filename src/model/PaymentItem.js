/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentItem model module.
 * @module model/PaymentItem
 * @version 1.0.0
 */
class PaymentItem {
    /**
     * Constructs a new <code>PaymentItem</code>.
     * @alias module:model/PaymentItem
     */
    constructor() { 
        
        PaymentItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentItem} obj Optional instance to populate.
     * @return {module:model/PaymentItem} The populated <code>PaymentItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');

                delete data['id'];
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'Number');

                delete data['subscription_id'];
            }
            if (data.hasOwnProperty('deal_id')) {
                obj['deal_id'] = ApiClient.convertToType(data['deal_id'], 'Number');

                delete data['deal_id'];
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');

                delete data['is_active'];
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');

                delete data['amount'];
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');

                delete data['currency'];
            }
            if (data.hasOwnProperty('change_amount')) {
                obj['change_amount'] = ApiClient.convertToType(data['change_amount'], 'Number');

                delete data['change_amount'];
            }
            if (data.hasOwnProperty('due_at')) {
                obj['due_at'] = ApiClient.convertToType(data['due_at'], 'Date');

                delete data['due_at'];
            }
            if (data.hasOwnProperty('revenue_movement_type')) {
                obj['revenue_movement_type'] = ApiClient.convertToType(data['revenue_movement_type'], 'String');

                delete data['revenue_movement_type'];
            }
            if (data.hasOwnProperty('payment_type')) {
                obj['payment_type'] = ApiClient.convertToType(data['payment_type'], 'String');

                delete data['payment_type'];
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');

                delete data['description'];
            }
            if (data.hasOwnProperty('add_time')) {
                obj['add_time'] = ApiClient.convertToType(data['add_time'], 'String');

                delete data['add_time'];
            }
            if (data.hasOwnProperty('update_time')) {
                obj['update_time'] = ApiClient.convertToType(data['update_time'], 'String');

                delete data['update_time'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the payment
 * @member {Number} id
 */
PaymentItem.prototype['id'] = undefined;

/**
 * The ID of the subscription this payment is associated with
 * @member {Number} subscription_id
 */
PaymentItem.prototype['subscription_id'] = undefined;

/**
 * The ID of the deal this payment is associated with
 * @member {Number} deal_id
 */
PaymentItem.prototype['deal_id'] = undefined;

/**
 * The payment status
 * @member {Boolean} is_active
 */
PaymentItem.prototype['is_active'] = undefined;

/**
 * The payment amount
 * @member {Number} amount
 */
PaymentItem.prototype['amount'] = undefined;

/**
 * The currency of the payment
 * @member {String} currency
 */
PaymentItem.prototype['currency'] = undefined;

/**
 * The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.
 * @member {Number} change_amount
 */
PaymentItem.prototype['change_amount'] = undefined;

/**
 * The date when payment occurs
 * @member {Date} due_at
 */
PaymentItem.prototype['due_at'] = undefined;

/**
 * Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.
 * @member {module:model/PaymentItem.RevenueMovementTypeEnum} revenue_movement_type
 */
PaymentItem.prototype['revenue_movement_type'] = undefined;

/**
 * The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.
 * @member {module:model/PaymentItem.PaymentTypeEnum} payment_type
 */
PaymentItem.prototype['payment_type'] = undefined;

/**
 * The description of the payment
 * @member {String} description
 */
PaymentItem.prototype['description'] = undefined;

/**
 * The creation time of the payment
 * @member {String} add_time
 */
PaymentItem.prototype['add_time'] = undefined;

/**
 * The update time of the payment
 * @member {String} update_time
 */
PaymentItem.prototype['update_time'] = undefined;





/**
 * Allowed values for the <code>revenue_movement_type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentItem['RevenueMovementTypeEnum'] = {

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "recurring"
     * @const
     */
    "recurring": "recurring",

    /**
     * value: "expansion"
     * @const
     */
    "expansion": "expansion",

    /**
     * value: "contraction"
     * @const
     */
    "contraction": "contraction",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "churn"
     * @const
     */
    "churn": "churn"
};


/**
 * Allowed values for the <code>payment_type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentItem['PaymentTypeEnum'] = {

    /**
     * value: "recurring"
     * @const
     */
    "recurring": "recurring",

    /**
     * value: "additional"
     * @const
     */
    "additional": "additional",

    /**
     * value: "installment"
     * @const
     */
    "installment": "installment"
};



export default PaymentItem;

