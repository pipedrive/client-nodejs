/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldTypeAsString from './FieldTypeAsString';

/**
 * The Field model module.
 * @module model/Field
 * @version 1.0.0
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * @alias module:model/Field
     */
    constructor() { 
        
        Field.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');

                delete data['id'];
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');

                delete data['key'];
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');

                delete data['name'];
            }
            if (data.hasOwnProperty('order_nr')) {
                obj['order_nr'] = ApiClient.convertToType(data['order_nr'], 'Number');

                delete data['order_nr'];
            }
            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = ApiClient.convertToType(data['field_type'], FieldTypeAsString);

                delete data['field_type'];
            }
            if (data.hasOwnProperty('add_time')) {
                obj['add_time'] = ApiClient.convertToType(data['add_time'], 'String');

                delete data['add_time'];
            }
            if (data.hasOwnProperty('update_time')) {
                obj['update_time'] = ApiClient.convertToType(data['update_time'], 'String');

                delete data['update_time'];
            }
            if (data.hasOwnProperty('last_updated_by_user_id')) {
                obj['last_updated_by_user_id'] = ApiClient.convertToType(data['last_updated_by_user_id'], 'Number');

                delete data['last_updated_by_user_id'];
            }
            if (data.hasOwnProperty('active_flag')) {
                obj['active_flag'] = ApiClient.convertToType(data['active_flag'], 'Boolean');

                delete data['active_flag'];
            }
            if (data.hasOwnProperty('edit_flag')) {
                obj['edit_flag'] = ApiClient.convertToType(data['edit_flag'], 'Boolean');

                delete data['edit_flag'];
            }
            if (data.hasOwnProperty('index_visible_flag')) {
                obj['index_visible_flag'] = ApiClient.convertToType(data['index_visible_flag'], 'Boolean');

                delete data['index_visible_flag'];
            }
            if (data.hasOwnProperty('details_visible_flag')) {
                obj['details_visible_flag'] = ApiClient.convertToType(data['details_visible_flag'], 'Boolean');

                delete data['details_visible_flag'];
            }
            if (data.hasOwnProperty('add_visible_flag')) {
                obj['add_visible_flag'] = ApiClient.convertToType(data['add_visible_flag'], 'Boolean');

                delete data['add_visible_flag'];
            }
            if (data.hasOwnProperty('important_flag')) {
                obj['important_flag'] = ApiClient.convertToType(data['important_flag'], 'Boolean');

                delete data['important_flag'];
            }
            if (data.hasOwnProperty('bulk_edit_allowed')) {
                obj['bulk_edit_allowed'] = ApiClient.convertToType(data['bulk_edit_allowed'], 'Boolean');

                delete data['bulk_edit_allowed'];
            }
            if (data.hasOwnProperty('searchable_flag')) {
                obj['searchable_flag'] = ApiClient.convertToType(data['searchable_flag'], 'Boolean');

                delete data['searchable_flag'];
            }
            if (data.hasOwnProperty('filtering_allowed')) {
                obj['filtering_allowed'] = ApiClient.convertToType(data['filtering_allowed'], 'Boolean');

                delete data['filtering_allowed'];
            }
            if (data.hasOwnProperty('sortable_flag')) {
                obj['sortable_flag'] = ApiClient.convertToType(data['sortable_flag'], 'Boolean');

                delete data['sortable_flag'];
            }
            if (data.hasOwnProperty('mandatory_flag')) {
                obj['mandatory_flag'] = ApiClient.convertToType(data['mandatory_flag'], 'Boolean');

                delete data['mandatory_flag'];
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Object]);

                delete data['options'];
            }
            if (data.hasOwnProperty('options_deleted')) {
                obj['options_deleted'] = ApiClient.convertToType(data['options_deleted'], [Object]);

                delete data['options_deleted'];
            }
            if (data.hasOwnProperty('is_subfield')) {
                obj['is_subfield'] = ApiClient.convertToType(data['is_subfield'], 'Boolean');

                delete data['is_subfield'];
            }
            if (data.hasOwnProperty('subfields')) {
                obj['subfields'] = ApiClient.convertToType(data['subfields'], [Object]);

                delete data['subfields'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the field. Value is `null` in case of subfields.
 * @member {Number} id
 */
Field.prototype['id'] = undefined;

/**
 * The key of the field. For custom fields this is generated upon creation.
 * @member {String} key
 */
Field.prototype['key'] = undefined;

/**
 * The name of the field
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * The order number of the field
 * @member {Number} order_nr
 */
Field.prototype['order_nr'] = undefined;

/**
 * @member {module:model/FieldTypeAsString} field_type
 */
Field.prototype['field_type'] = undefined;

/**
 * The creation time of the field
 * @member {String} add_time
 */
Field.prototype['add_time'] = undefined;

/**
 * The update time of the field
 * @member {String} update_time
 */
Field.prototype['update_time'] = undefined;

/**
 * The ID of the user who created or most recently updated the field, only applicable for custom fields
 * @member {Number} last_updated_by_user_id
 */
Field.prototype['last_updated_by_user_id'] = undefined;

/**
 * The active flag of the field
 * @member {Boolean} active_flag
 */
Field.prototype['active_flag'] = undefined;

/**
 * The edit flag of the field
 * @member {Boolean} edit_flag
 */
Field.prototype['edit_flag'] = undefined;

/**
 * Not used
 * @member {Boolean} index_visible_flag
 */
Field.prototype['index_visible_flag'] = undefined;

/**
 * Not used
 * @member {Boolean} details_visible_flag
 */
Field.prototype['details_visible_flag'] = undefined;

/**
 * Not used
 * @member {Boolean} add_visible_flag
 */
Field.prototype['add_visible_flag'] = undefined;

/**
 * Not used
 * @member {Boolean} important_flag
 */
Field.prototype['important_flag'] = undefined;

/**
 * Whether or not the field of an item can be edited in bulk
 * @member {Boolean} bulk_edit_allowed
 */
Field.prototype['bulk_edit_allowed'] = undefined;

/**
 * Whether or not items can be searched by this field
 * @member {Boolean} searchable_flag
 */
Field.prototype['searchable_flag'] = undefined;

/**
 * Whether or not items can be filtered by this field
 * @member {Boolean} filtering_allowed
 */
Field.prototype['filtering_allowed'] = undefined;

/**
 * Whether or not items can be sorted by this field
 * @member {Boolean} sortable_flag
 */
Field.prototype['sortable_flag'] = undefined;

/**
 * Whether or not the field is mandatory
 * @member {Boolean} mandatory_flag
 */
Field.prototype['mandatory_flag'] = undefined;

/**
 * The options of the field. When there are no options, `null` is returned.
 * @member {Array.<Object>} options
 */
Field.prototype['options'] = undefined;

/**
 * The deleted options of the field. Only present when there is at least 1 deleted option.
 * @member {Array.<Object>} options_deleted
 */
Field.prototype['options_deleted'] = undefined;

/**
 * Whether or not the field is a subfield of another field. Only present if field is subfield.
 * @member {Boolean} is_subfield
 */
Field.prototype['is_subfield'] = undefined;

/**
 * The subfields of the field. Only present when the field has subfields.
 * @member {Array.<Object>} subfields
 */
Field.prototype['subfields'] = undefined;






export default Field;

