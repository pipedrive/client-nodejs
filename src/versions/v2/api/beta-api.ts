/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddAInstallmentResponse } from '../models';
// @ts-ignore
import { AddConvertDealToLeadResponse } from '../models';
// @ts-ignore
import { AddConvertLeadToDealResponse } from '../models';
// @ts-ignore
import { AddInstallmentRequestBody } from '../models';
// @ts-ignore
import { ConvertLeadToDealRequest } from '../models';
// @ts-ignore
import { DeleteInstallmentResponse } from '../models';
// @ts-ignore
import { GetConvertResponse } from '../models';
// @ts-ignore
import { GetConvertResponse1 } from '../models';
// @ts-ignore
import { GetInstallmentsResponse } from '../models';
// @ts-ignore
import { UpdateInstallmentRequestBody } from '../models';
// @ts-ignore
import { UpdateInstallmentResponse } from '../models';
/**
 * BetaApi - axios parameter creator
 * @export
 */
export const BetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {number} id The ID of the deal to convert

         * @throws {RequiredError}
         */
        convertDealToLead: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('convertDealToLead', 'id', id)
            const localVarPath = `/deals/{id}/convert/lead`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "leads:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {string} id The ID of the lead to convert
         * @param {ConvertLeadToDealRequest} [ConvertLeadToDealRequest] 

         * @throws {RequiredError}
         */
        convertLeadToDeal: async (id: string, ConvertLeadToDealRequest?: ConvertLeadToDealRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('convertLeadToDeal', 'id', id)
            const localVarPath = `/leads/{id}/convert/deal`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "leads:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(ConvertLeadToDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans. 
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        deleteInstallment: async (id: number, installment_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstallment', 'id', id)
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('deleteInstallment', 'installment_id', installment_id)
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {number} id The ID of a deal
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        getDealConversionStatus: async (id: number, conversion_id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealConversionStatus', 'id', id)
            // verify required parameter 'conversion_id' is not null or undefined
            assertParamExists('getDealConversionStatus', 'conversion_id', conversion_id)
            const localVarPath = `/deals/{id}/convert/status/{conversion_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"conversion_id"}}`, encodeURIComponent(String(conversion_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans. 
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getInstallments: async (deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'billing_date' | 'deal_id', sort_direction?: 'asc' | 'desc', ): Promise<RequestArgs> => {
            // verify required parameter 'deal_ids' is not null or undefined
            assertParamExists('getInstallments', 'deal_ids', deal_ids)
            const localVarPath = `/deals/installments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (deal_ids) {
                localVarQueryParameter['deal_ids'] = deal_ids;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {string} id The ID of a lead
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        getLeadConversionStatus: async (id: string, conversion_id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLeadConversionStatus', 'id', id)
            // verify required parameter 'conversion_id' is not null or undefined
            assertParamExists('getLeadConversionStatus', 'conversion_id', conversion_id)
            const localVarPath = `/leads/{id}/convert/status/{conversion_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"conversion_id"}}`, encodeURIComponent(String(conversion_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["leads:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans. 
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        postInstallment: async (id: number, AddInstallmentRequestBody?: AddInstallmentRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postInstallment', 'id', id)
            const localVarPath = `/deals/{id}/installments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddInstallmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans. 
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        updateInstallment: async (id: number, installment_id: number, UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateInstallment', 'id', id)
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('updateInstallment', 'installment_id', installment_id)
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateInstallmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * BetaApi - functional programming interface
 * @export
 */
export const BetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {number} id The ID of the deal to convert

         * @throws {RequiredError}
         */
        async convertDealToLead(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddConvertDealToLeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertDealToLead(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {string} id The ID of the lead to convert
         * @param {ConvertLeadToDealRequest} [ConvertLeadToDealRequest] 

         * @throws {RequiredError}
         */
        async convertLeadToDeal(id: string, ConvertLeadToDealRequest?: ConvertLeadToDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddConvertLeadToDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertLeadToDeal(id, ConvertLeadToDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans. 
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        async deleteInstallment(id: number, installment_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstallment(id, installment_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {number} id The ID of a deal
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        async getDealConversionStatus(id: number, conversion_id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetConvertResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealConversionStatus(id, conversion_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans. 
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        async getInstallments(deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'billing_date' | 'deal_id', sort_direction?: 'asc' | 'desc', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetInstallmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstallments(deal_ids, cursor, limit, sort_by, sort_direction, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {string} id The ID of a lead
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        async getLeadConversionStatus(id: string, conversion_id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetConvertResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadConversionStatus(id, conversion_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans. 
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        async postInstallment(id: number, AddInstallmentRequestBody?: AddInstallmentRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddAInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInstallment(id, AddInstallmentRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans. 
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        async updateInstallment(id: number, installment_id: number, UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstallment(id, installment_id, UpdateInstallmentRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BetaApi - factory interface
 * @export
 */
export const BetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BetaApiFp(configuration)
    return {
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {BetaApiConvertDealToLeadRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        convertDealToLead(requestParameters: BetaApiConvertDealToLeadRequest, ): Promise<AddConvertDealToLeadResponse> {
            return localVarFp.convertDealToLead(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {BetaApiConvertLeadToDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        convertLeadToDeal(requestParameters: BetaApiConvertLeadToDealRequest, ): Promise<AddConvertLeadToDealResponse> {
            return localVarFp.convertLeadToDeal(requestParameters.id, requestParameters.ConvertLeadToDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Removes an installment from a deal.  Only available in Advanced and above plans. 
         * @summary Delete an installment from a deal
         * @param {BetaApiDeleteInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteInstallment(requestParameters: BetaApiDeleteInstallmentRequest, ): Promise<DeleteInstallmentResponse> {
            return localVarFp.deleteInstallment(requestParameters.id, requestParameters.installment_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {BetaApiGetDealConversionStatusRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealConversionStatus(requestParameters: BetaApiGetDealConversionStatusRequest, ): Promise<GetConvertResponse1> {
            return localVarFp.getDealConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Advanced and above plans. 
         * @summary List installments added to a list of deals
         * @param {BetaApiGetInstallmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getInstallments(requestParameters: BetaApiGetInstallmentsRequest, ): Promise<GetInstallmentsResponse> {
            return localVarFp.getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {BetaApiGetLeadConversionStatusRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getLeadConversionStatus(requestParameters: BetaApiGetLeadConversionStatusRequest, ): Promise<GetConvertResponse1> {
            return localVarFp.getLeadConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans. 
         * @summary Add an installment to a deal
         * @param {BetaApiPostInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        postInstallment(requestParameters: BetaApiPostInstallmentRequest, ): Promise<AddAInstallmentResponse> {
            return localVarFp.postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody, ).then((request) => request(axios, basePath));
        },
        /**
         * Edits an installment added to a deal.  Only available in Advanced and above plans. 
         * @summary Update an installment added to a deal
         * @param {BetaApiUpdateInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateInstallment(requestParameters: BetaApiUpdateInstallmentRequest, ): Promise<UpdateInstallmentResponse> {
            return localVarFp.updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for convertDealToLead operation in BetaApi.
 * @export
 * @interface BetaApiConvertDealToLeadRequest
 */
export interface BetaApiConvertDealToLeadRequest {
    /**
     * The ID of the deal to convert
     * @type {number}
     * @memberof BetaApiConvertDealToLead
     */
    readonly id: number
}

/**
 * Request parameters for convertLeadToDeal operation in BetaApi.
 * @export
 * @interface BetaApiConvertLeadToDealRequest
 */
export interface BetaApiConvertLeadToDealRequest {
    /**
     * The ID of the lead to convert
     * @type {string}
     * @memberof BetaApiConvertLeadToDeal
     */
    readonly id: string

    /**
     * 
     * @type {ConvertLeadToDealRequest}
     * @memberof BetaApiConvertLeadToDeal
     */
    readonly ConvertLeadToDealRequest?: ConvertLeadToDealRequest
}

/**
 * Request parameters for deleteInstallment operation in BetaApi.
 * @export
 * @interface BetaApiDeleteInstallmentRequest
 */
export interface BetaApiDeleteInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof BetaApiDeleteInstallment
     */
    readonly id: number

    /**
     * The ID of the installment
     * @type {number}
     * @memberof BetaApiDeleteInstallment
     */
    readonly installment_id: number
}

/**
 * Request parameters for getDealConversionStatus operation in BetaApi.
 * @export
 * @interface BetaApiGetDealConversionStatusRequest
 */
export interface BetaApiGetDealConversionStatusRequest {
    /**
     * The ID of a deal
     * @type {number}
     * @memberof BetaApiGetDealConversionStatus
     */
    readonly id: number

    /**
     * The ID of the conversion
     * @type {string}
     * @memberof BetaApiGetDealConversionStatus
     */
    readonly conversion_id: string
}

/**
 * Request parameters for getInstallments operation in BetaApi.
 * @export
 * @interface BetaApiGetInstallmentsRequest
 */
export interface BetaApiGetInstallmentsRequest {
    /**
     * An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
     * @type {Array<number>}
     * @memberof BetaApiGetInstallments
     */
    readonly deal_ids: Array<number>

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof BetaApiGetInstallments
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof BetaApiGetInstallments
     */
    readonly limit?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
     * @type {'id' | 'billing_date' | 'deal_id'}
     * @memberof BetaApiGetInstallments
     */
    readonly sort_by?: 'id' | 'billing_date' | 'deal_id'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof BetaApiGetInstallments
     */
    readonly sort_direction?: 'asc' | 'desc'
}

/**
 * Request parameters for getLeadConversionStatus operation in BetaApi.
 * @export
 * @interface BetaApiGetLeadConversionStatusRequest
 */
export interface BetaApiGetLeadConversionStatusRequest {
    /**
     * The ID of a lead
     * @type {string}
     * @memberof BetaApiGetLeadConversionStatus
     */
    readonly id: string

    /**
     * The ID of the conversion
     * @type {string}
     * @memberof BetaApiGetLeadConversionStatus
     */
    readonly conversion_id: string
}

/**
 * Request parameters for postInstallment operation in BetaApi.
 * @export
 * @interface BetaApiPostInstallmentRequest
 */
export interface BetaApiPostInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof BetaApiPostInstallment
     */
    readonly id: number

    /**
     * 
     * @type {AddInstallmentRequestBody}
     * @memberof BetaApiPostInstallment
     */
    readonly AddInstallmentRequestBody?: AddInstallmentRequestBody
}

/**
 * Request parameters for updateInstallment operation in BetaApi.
 * @export
 * @interface BetaApiUpdateInstallmentRequest
 */
export interface BetaApiUpdateInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof BetaApiUpdateInstallment
     */
    readonly id: number

    /**
     * The ID of the installment
     * @type {number}
     * @memberof BetaApiUpdateInstallment
     */
    readonly installment_id: number

    /**
     * 
     * @type {UpdateInstallmentRequestBody}
     * @memberof BetaApiUpdateInstallment
     */
    readonly UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody
}

/**
 * BetaApi - object-oriented interface
 * @export
 * @class BetaApi
 * @extends {BaseAPI}
 */
export class BetaApi extends BaseAPI {
    /**
     * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
     * @summary Convert a deal to a lead (BETA)
     * @param {BetaApiConvertDealToLeadRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public convertDealToLead(requestParameters: BetaApiConvertDealToLeadRequest, ) {
        return BetaApiFp(this.configuration).convertDealToLead(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
     * @summary Convert a lead to a deal (BETA)
     * @param {BetaApiConvertLeadToDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public convertLeadToDeal(requestParameters: BetaApiConvertLeadToDealRequest, ) {
        return BetaApiFp(this.configuration).convertLeadToDeal(requestParameters.id, requestParameters.ConvertLeadToDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an installment from a deal.  Only available in Advanced and above plans. 
     * @summary Delete an installment from a deal
     * @param {BetaApiDeleteInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public deleteInstallment(requestParameters: BetaApiDeleteInstallmentRequest, ) {
        return BetaApiFp(this.configuration).deleteInstallment(requestParameters.id, requestParameters.installment_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
     * @summary Get Deal conversion status (BETA)
     * @param {BetaApiGetDealConversionStatusRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public getDealConversionStatus(requestParameters: BetaApiGetDealConversionStatusRequest, ) {
        return BetaApiFp(this.configuration).getDealConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists installments attached to a list of deals.  Only available in Advanced and above plans. 
     * @summary List installments added to a list of deals
     * @param {BetaApiGetInstallmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public getInstallments(requestParameters: BetaApiGetInstallmentsRequest, ) {
        return BetaApiFp(this.configuration).getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
     * @summary Get Lead conversion status (BETA)
     * @param {BetaApiGetLeadConversionStatusRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public getLeadConversionStatus(requestParameters: BetaApiGetLeadConversionStatusRequest, ) {
        return BetaApiFp(this.configuration).getLeadConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Advanced and above plans. 
     * @summary Add an installment to a deal
     * @param {BetaApiPostInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public postInstallment(requestParameters: BetaApiPostInstallmentRequest, ) {
        return BetaApiFp(this.configuration).postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an installment added to a deal.  Only available in Advanced and above plans. 
     * @summary Update an installment added to a deal
     * @param {BetaApiUpdateInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof BetaApi
     */
    public updateInstallment(requestParameters: BetaApiUpdateInstallmentRequest, ) {
        return BetaApiFp(this.configuration).updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody, ).then((request) => request(this.axios, this.basePath));
    }
}
