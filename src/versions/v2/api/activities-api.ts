/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddActivityRequest } from '../models';
// @ts-ignore
import { DeleteActivityResponse } from '../models';
// @ts-ignore
import { GetActivitiesResponse } from '../models';
// @ts-ignore
import { UpsertActivityResponse } from '../models';
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new activity.
         * @summary Add a new activity
         * @param {AddActivityRequest} [AddActivityRequest] 

         * @throws {RequiredError}
         */
        addActivity: async (AddActivityRequest?: AddActivityRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddActivityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        deleteActivity: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all activities.
         * @summary Get all activities
         * @param {number} [filter_id] If supplied, only activities matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [deal_id] If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
         * @param {string} [lead_id] If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getActivities: async (filter_id?: number, ids?: string, owner_id?: number, deal_id?: number, lead_id?: string, person_id?: number, org_id?: number, updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'attendees', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }

            if (deal_id !== undefined) {
                localVarQueryParameter['deal_id'] = deal_id;
            }

            if (lead_id !== undefined) {
                localVarQueryParameter['lead_id'] = lead_id;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (updated_since !== undefined) {
                localVarQueryParameter['updated_since'] = updated_since;
            }

            if (updated_until !== undefined) {
                localVarQueryParameter['updated_until'] = updated_until;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity
         * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include

         * @throws {RequiredError}
         */
        getActivity: async (id: number, include_fields?: 'attendees', ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of an activity.
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {AddActivityRequest} [AddActivityRequest] 

         * @throws {RequiredError}
         */
        updateActivity: async (id: number, AddActivityRequest?: AddActivityRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddActivityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new activity.
         * @summary Add a new activity
         * @param {AddActivityRequest} [AddActivityRequest] 

         * @throws {RequiredError}
         */
        async addActivity(AddActivityRequest?: AddActivityRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addActivity(AddActivityRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity

         * @throws {RequiredError}
         */
        async deleteActivity(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivity(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all activities.
         * @summary Get all activities
         * @param {number} [filter_id] If supplied, only activities matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [deal_id] If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
         * @param {string} [lead_id] If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getActivities(filter_id?: number, ids?: string, owner_id?: number, deal_id?: number, lead_id?: string, person_id?: number, org_id?: number, updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'attendees', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivities(filter_id, ids, owner_id, deal_id, lead_id, person_id, org_id, updated_since, updated_until, sort_by, sort_direction, include_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity
         * @param {'attendees'} [include_fields] Optional comma separated string array of additional fields to include

         * @throws {RequiredError}
         */
        async getActivity(id: number, include_fields?: 'attendees', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivity(id, include_fields, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of an activity.
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {AddActivityRequest} [AddActivityRequest] 

         * @throws {RequiredError}
         */
        async updateActivity(id: number, AddActivityRequest?: AddActivityRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActivity(id, AddActivityRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * Adds a new activity.
         * @summary Add a new activity
         * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addActivity(requestParameters: ActivitiesApiAddActivityRequest = {}, ): Promise<UpsertActivityResponse> {
            return localVarFp.addActivity(requestParameters.AddActivityRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest, ): Promise<DeleteActivityResponse> {
            return localVarFp.deleteActivity(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all activities.
         * @summary Get all activities
         * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getActivities(requestParameters: ActivitiesApiGetActivitiesRequest = {}, ): Promise<GetActivitiesResponse> {
            return localVarFp.getActivities(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.deal_id, requestParameters.lead_id, requestParameters.person_id, requestParameters.org_id, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getActivity(requestParameters: ActivitiesApiGetActivityRequest, ): Promise<UpsertActivityResponse> {
            return localVarFp.getActivity(requestParameters.id, requestParameters.include_fields, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of an activity.
         * @summary Update an activity
         * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest, ): Promise<UpsertActivityResponse> {
            return localVarFp.updateActivity(requestParameters.id, requestParameters.AddActivityRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiAddActivityRequest
 */
export interface ActivitiesApiAddActivityRequest {
    /**
     * 
     * @type {AddActivityRequest}
     * @memberof ActivitiesApiAddActivity
     */
    readonly AddActivityRequest?: AddActivityRequest
}

/**
 * Request parameters for deleteActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiDeleteActivityRequest
 */
export interface ActivitiesApiDeleteActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiDeleteActivity
     */
    readonly id: number
}

/**
 * Request parameters for getActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivitiesRequest
 */
export interface ActivitiesApiGetActivitiesRequest {
    /**
     * If supplied, only activities matching the specified filter are returned
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly filter_id?: number

    /**
     * Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly ids?: string

    /**
     * If supplied, only activities owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly owner_id?: number

    /**
     * If supplied, only activities linked to the specified deal are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly deal_id?: number

    /**
     * If supplied, only activities linked to the specified lead are returned. If filter_id is provided, this is ignored.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly lead_id?: string

    /**
     * If supplied, only activities whose primary participant is the given person are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly person_id?: number

    /**
     * If supplied, only activities linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly org_id?: number

    /**
     * If set, only activities with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly updated_since?: string

    /**
     * If set, only activities with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly updated_until?: string

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * Optional comma separated string array of additional fields to include
     * @type {'attendees'}
     * @memberof ActivitiesApiGetActivities
     */
    readonly include_fields?: 'attendees'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly cursor?: string
}

/**
 * Request parameters for getActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivityRequest
 */
export interface ActivitiesApiGetActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiGetActivity
     */
    readonly id: number

    /**
     * Optional comma separated string array of additional fields to include
     * @type {'attendees'}
     * @memberof ActivitiesApiGetActivity
     */
    readonly include_fields?: 'attendees'
}

/**
 * Request parameters for updateActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiUpdateActivityRequest
 */
export interface ActivitiesApiUpdateActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly id: number

    /**
     * 
     * @type {AddActivityRequest}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly AddActivityRequest?: AddActivityRequest
}

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * Adds a new activity.
     * @summary Add a new activity
     * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public addActivity(requestParameters: ActivitiesApiAddActivityRequest = {}, ) {
        return ActivitiesApiFp(this.configuration).addActivity(requestParameters.AddActivityRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).deleteActivity(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all activities.
     * @summary Get all activities
     * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivities(requestParameters: ActivitiesApiGetActivitiesRequest = {}, ) {
        return ActivitiesApiFp(this.configuration).getActivities(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.deal_id, requestParameters.lead_id, requestParameters.person_id, requestParameters.org_id, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivity(requestParameters: ActivitiesApiGetActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).getActivity(requestParameters.id, requestParameters.include_fields, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of an activity.
     * @summary Update an activity
     * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).updateActivity(requestParameters.id, requestParameters.AddActivityRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
