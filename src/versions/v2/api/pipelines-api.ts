/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddPipelineRequest } from '../models';
// @ts-ignore
import { DeletePipelineResponse } from '../models';
// @ts-ignore
import { GetPipelinesResponse } from '../models';
// @ts-ignore
import { UpdatePipelineRequest } from '../models';
// @ts-ignore
import { UpsertPipelineResponse } from '../models';
/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export const PipelinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {AddPipelineRequest} [AddPipelineRequest] 

         * @throws {RequiredError}
         */
        addPipeline: async (AddPipelineRequest?: AddPipelineRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        deletePipeline: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePipeline', 'id', id)
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        getPipeline: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPipeline', 'id', id)
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getPipelines: async (sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {UpdatePipelineRequest} [UpdatePipelineRequest] 

         * @throws {RequiredError}
         */
        updatePipeline: async (id: number, UpdatePipelineRequest?: UpdatePipelineRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePipeline', 'id', id)
            const localVarPath = `/pipelines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdatePipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * PipelinesApi - functional programming interface
 * @export
 */
export const PipelinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PipelinesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {AddPipelineRequest} [AddPipelineRequest] 

         * @throws {RequiredError}
         */
        async addPipeline(AddPipelineRequest?: AddPipelineRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPipeline(AddPipelineRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        async deletePipeline(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeletePipelineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {number} id The ID of the pipeline

         * @throws {RequiredError}
         */
        async getPipeline(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPipeline(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getPipelines(sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPipelinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPipelines(sort_by, sort_direction, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {number} id The ID of the pipeline
         * @param {UpdatePipelineRequest} [UpdatePipelineRequest] 

         * @throws {RequiredError}
         */
        async updatePipeline(id: number, UpdatePipelineRequest?: UpdatePipelineRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertPipelineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePipeline(id, UpdatePipelineRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PipelinesApi - factory interface
 * @export
 */
export const PipelinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PipelinesApiFp(configuration)
    return {
        /**
         * Adds a new pipeline.
         * @summary Add a new pipeline
         * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addPipeline(requestParameters: PipelinesApiAddPipelineRequest = {}, ): Promise<UpsertPipelineResponse> {
            return localVarFp.addPipeline(requestParameters.AddPipelineRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a pipeline as deleted.
         * @summary Delete a pipeline
         * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest, ): Promise<DeletePipelineResponse> {
            return localVarFp.deletePipeline(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific pipeline.
         * @summary Get one pipeline
         * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipeline(requestParameters: PipelinesApiGetPipelineRequest, ): Promise<UpsertPipelineResponse> {
            return localVarFp.getPipeline(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all pipelines.
         * @summary Get all pipelines
         * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPipelines(requestParameters: PipelinesApiGetPipelinesRequest = {}, ): Promise<GetPipelinesResponse> {
            return localVarFp.getPipelines(requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a pipeline.
         * @summary Update a pipeline
         * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest, ): Promise<UpsertPipelineResponse> {
            return localVarFp.updatePipeline(requestParameters.id, requestParameters.UpdatePipelineRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiAddPipelineRequest
 */
export interface PipelinesApiAddPipelineRequest {
    /**
     * 
     * @type {AddPipelineRequest}
     * @memberof PipelinesApiAddPipeline
     */
    readonly AddPipelineRequest?: AddPipelineRequest
}

/**
 * Request parameters for deletePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiDeletePipelineRequest
 */
export interface PipelinesApiDeletePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiDeletePipeline
     */
    readonly id: number
}

/**
 * Request parameters for getPipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelineRequest
 */
export interface PipelinesApiGetPipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiGetPipeline
     */
    readonly id: number
}

/**
 * Request parameters for getPipelines operation in PipelinesApi.
 * @export
 * @interface PipelinesApiGetPipelinesRequest
 */
export interface PipelinesApiGetPipelinesRequest {
    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof PipelinesApiGetPipelines
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof PipelinesApiGetPipelines
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof PipelinesApiGetPipelines
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof PipelinesApiGetPipelines
     */
    readonly cursor?: string
}

/**
 * Request parameters for updatePipeline operation in PipelinesApi.
 * @export
 * @interface PipelinesApiUpdatePipelineRequest
 */
export interface PipelinesApiUpdatePipelineRequest {
    /**
     * The ID of the pipeline
     * @type {number}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly id: number

    /**
     * 
     * @type {UpdatePipelineRequest}
     * @memberof PipelinesApiUpdatePipeline
     */
    readonly UpdatePipelineRequest?: UpdatePipelineRequest
}

/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export class PipelinesApi extends BaseAPI {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelinesApiAddPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public addPipeline(requestParameters: PipelinesApiAddPipelineRequest = {}, ) {
        return PipelinesApiFp(this.configuration).addPipeline(requestParameters.AddPipelineRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {PipelinesApiDeletePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public deletePipeline(requestParameters: PipelinesApiDeletePipelineRequest, ) {
        return PipelinesApiFp(this.configuration).deletePipeline(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific pipeline.
     * @summary Get one pipeline
     * @param {PipelinesApiGetPipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public getPipeline(requestParameters: PipelinesApiGetPipelineRequest, ) {
        return PipelinesApiFp(this.configuration).getPipeline(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {PipelinesApiGetPipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public getPipelines(requestParameters: PipelinesApiGetPipelinesRequest = {}, ) {
        return PipelinesApiFp(this.configuration).getPipelines(requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {PipelinesApiUpdatePipelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public updatePipeline(requestParameters: PipelinesApiUpdatePipelineRequest, ) {
        return PipelinesApiFp(this.configuration).updatePipeline(requestParameters.id, requestParameters.UpdatePipelineRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
