/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddConvertLeadToDealResponse } from '../models';
// @ts-ignore
import { ConvertLeadToDealRequest } from '../models';
// @ts-ignore
import { GetConvertResponse } from '../models';
// @ts-ignore
import { GetConvertResponse1 } from '../models';
// @ts-ignore
import { GetLeadSearchResponse } from '../models';
/**
 * LeadsApi - axios parameter creator
 * @export
 */
export const LeadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {string} id The ID of the lead to convert
         * @param {ConvertLeadToDealRequest} [ConvertLeadToDealRequest] 

         * @throws {RequiredError}
         */
        convertLeadToDeal: async (id: string, ConvertLeadToDealRequest?: ConvertLeadToDealRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('convertLeadToDeal', 'id', id)
            const localVarPath = `/leads/{id}/convert/deal`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "leads:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(ConvertLeadToDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {string} id The ID of a lead
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        getLeadConversionStatus: async (id: string, conversion_id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLeadConversionStatus', 'id', id)
            // verify required parameter 'conversion_id' is not null or undefined
            assertParamExists('getLeadConversionStatus', 'conversion_id', conversion_id)
            const localVarPath = `/leads/{id}/convert/status/{conversion_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"conversion_id"}}`, encodeURIComponent(String(conversion_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["leads:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
         * @summary Search leads
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
         * @param {number} [organization_id] Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
         * @param {'lead.was_seen'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        searchLeads: async (term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, include_fields?: 'lead.was_seen', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchLeads', 'term', term)
            const localVarPath = `/leads/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["leads:read", "leads:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (organization_id !== undefined) {
                localVarQueryParameter['organization_id'] = organization_id;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LeadsApi - functional programming interface
 * @export
 */
export const LeadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {string} id The ID of the lead to convert
         * @param {ConvertLeadToDealRequest} [ConvertLeadToDealRequest] 

         * @throws {RequiredError}
         */
        async convertLeadToDeal(id: string, ConvertLeadToDealRequest?: ConvertLeadToDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddConvertLeadToDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertLeadToDeal(id, ConvertLeadToDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {string} id The ID of a lead
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        async getLeadConversionStatus(id: string, conversion_id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetConvertResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadConversionStatus(id, conversion_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
         * @summary Search leads
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
         * @param {number} [organization_id] Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
         * @param {'lead.was_seen'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async searchLeads(term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, include_fields?: 'lead.was_seen', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetLeadSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLeads(term, fields, exact_match, person_id, organization_id, include_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadsApi - factory interface
 * @export
 */
export const LeadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadsApiFp(configuration)
    return {
        /**
         * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a lead to a deal (BETA)
         * @param {LeadsApiConvertLeadToDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        convertLeadToDeal(requestParameters: LeadsApiConvertLeadToDealRequest, ): Promise<AddConvertLeadToDealResponse> {
            return localVarFp.convertLeadToDeal(requestParameters.id, requestParameters.ConvertLeadToDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Lead conversion status (BETA)
         * @param {LeadsApiGetLeadConversionStatusRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getLeadConversionStatus(requestParameters: LeadsApiGetLeadConversionStatusRequest, ): Promise<GetConvertResponse1> {
            return localVarFp.getLeadConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
         * @summary Search leads
         * @param {LeadsApiSearchLeadsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchLeads(requestParameters: LeadsApiSearchLeadsRequest, ): Promise<GetLeadSearchResponse> {
            return localVarFp.searchLeads(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for convertLeadToDeal operation in LeadsApi.
 * @export
 * @interface LeadsApiConvertLeadToDealRequest
 */
export interface LeadsApiConvertLeadToDealRequest {
    /**
     * The ID of the lead to convert
     * @type {string}
     * @memberof LeadsApiConvertLeadToDeal
     */
    readonly id: string

    /**
     * 
     * @type {ConvertLeadToDealRequest}
     * @memberof LeadsApiConvertLeadToDeal
     */
    readonly ConvertLeadToDealRequest?: ConvertLeadToDealRequest
}

/**
 * Request parameters for getLeadConversionStatus operation in LeadsApi.
 * @export
 * @interface LeadsApiGetLeadConversionStatusRequest
 */
export interface LeadsApiGetLeadConversionStatusRequest {
    /**
     * The ID of a lead
     * @type {string}
     * @memberof LeadsApiGetLeadConversionStatus
     */
    readonly id: string

    /**
     * The ID of the conversion
     * @type {string}
     * @memberof LeadsApiGetLeadConversionStatus
     */
    readonly conversion_id: string
}

/**
 * Request parameters for searchLeads operation in LeadsApi.
 * @export
 * @interface LeadsApiSearchLeadsRequest
 */
export interface LeadsApiSearchLeadsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof LeadsApiSearchLeads
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them.
     * @type {'custom_fields' | 'notes' | 'title'}
     * @memberof LeadsApiSearchLeads
     */
    readonly fields?: 'custom_fields' | 'notes' | 'title'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof LeadsApiSearchLeads
     */
    readonly exact_match?: boolean

    /**
     * Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
     * @type {number}
     * @memberof LeadsApiSearchLeads
     */
    readonly person_id?: number

    /**
     * Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
     * @type {number}
     * @memberof LeadsApiSearchLeads
     */
    readonly organization_id?: number

    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'lead.was_seen'}
     * @memberof LeadsApiSearchLeads
     */
    readonly include_fields?: 'lead.was_seen'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof LeadsApiSearchLeads
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof LeadsApiSearchLeads
     */
    readonly cursor?: string
}

/**
 * LeadsApi - object-oriented interface
 * @export
 * @class LeadsApi
 * @extends {BaseAPI}
 */
export class LeadsApi extends BaseAPI {
    /**
     * Initiates a conversion of a lead to a deal. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. If the conversion is successful, the lead is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Leads#getLeadConversionStatus\">/api/v2/leads/{lead_id}/convert/status/{conversion_id}</a> endpoint.
     * @summary Convert a lead to a deal (BETA)
     * @param {LeadsApiConvertLeadToDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public convertLeadToDeal(requestParameters: LeadsApiConvertLeadToDealRequest, ) {
        return LeadsApiFp(this.configuration).convertLeadToDeal(requestParameters.id, requestParameters.ConvertLeadToDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Deal ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
     * @summary Get Lead conversion status (BETA)
     * @param {LeadsApiGetLeadConversionStatusRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public getLeadConversionStatus(requestParameters: LeadsApiGetLeadConversionStatusRequest, ) {
        return LeadsApiFp(this.configuration).getLeadConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
     * @summary Search leads
     * @param {LeadsApiSearchLeadsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof LeadsApi
     */
    public searchLeads(requestParameters: LeadsApiSearchLeadsRequest, ) {
        return LeadsApiFp(this.configuration).searchLeads(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }
}
