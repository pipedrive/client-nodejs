/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddStageRequest } from '../models';
// @ts-ignore
import { DeleteStageResponse } from '../models';
// @ts-ignore
import { GetStagesResponse } from '../models';
// @ts-ignore
import { UpdateStageRequest } from '../models';
// @ts-ignore
import { UpsertStageResponse } from '../models';
/**
 * StagesApi - axios parameter creator
 * @export
 */
export const StagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest] 

         * @throws {RequiredError}
         */
        addStage: async (AddStageRequest?: AddStageRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        deleteStage: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        getStage: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {'id' | 'update_time' | 'add_time' | 'order_nr'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getStages: async (pipeline_id?: number, sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)

            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest] 

         * @throws {RequiredError}
         */
        updateStage: async (id: number, UpdateStageRequest?: UpdateStageRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * StagesApi - functional programming interface
 * @export
 */
export const StagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest] 

         * @throws {RequiredError}
         */
        async addStage(AddStageRequest?: AddStageRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStage(AddStageRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        async deleteStage(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStage(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        async getStage(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStage(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {'id' | 'update_time' | 'add_time' | 'order_nr'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getStages(pipeline_id?: number, sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr', sort_direction?: 'asc' | 'desc', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStages(pipeline_id, sort_by, sort_direction, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest] 

         * @throws {RequiredError}
         */
        async updateStage(id: number, UpdateStageRequest?: UpdateStageRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertStageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStage(id, UpdateStageRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StagesApi - factory interface
 * @export
 */
export const StagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StagesApiFp(configuration)
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {StagesApiAddStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addStage(requestParameters: StagesApiAddStageRequest = {}, ): Promise<UpsertStageResponse> {
            return localVarFp.addStage(requestParameters.AddStageRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteStage(requestParameters: StagesApiDeleteStageRequest, ): Promise<DeleteStageResponse> {
            return localVarFp.deleteStage(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {StagesApiGetStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStage(requestParameters: StagesApiGetStageRequest, ): Promise<UpsertStageResponse> {
            return localVarFp.getStage(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStages(requestParameters: StagesApiGetStagesRequest = {}, ): Promise<GetStagesResponse> {
            return localVarFp.getStages(requestParameters.pipeline_id, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateStage(requestParameters: StagesApiUpdateStageRequest, ): Promise<UpsertStageResponse> {
            return localVarFp.updateStage(requestParameters.id, requestParameters.UpdateStageRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addStage operation in StagesApi.
 * @export
 * @interface StagesApiAddStageRequest
 */
export interface StagesApiAddStageRequest {
    /**
     * 
     * @type {AddStageRequest}
     * @memberof StagesApiAddStage
     */
    readonly AddStageRequest?: AddStageRequest
}

/**
 * Request parameters for deleteStage operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStageRequest
 */
export interface StagesApiDeleteStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiDeleteStage
     */
    readonly id: number
}

/**
 * Request parameters for getStage operation in StagesApi.
 * @export
 * @interface StagesApiGetStageRequest
 */
export interface StagesApiGetStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStage
     */
    readonly id: number
}

/**
 * Request parameters for getStages operation in StagesApi.
 * @export
 * @interface StagesApiGetStagesRequest
 */
export interface StagesApiGetStagesRequest {
    /**
     * The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly pipeline_id?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;, &#x60;order_nr&#x60;.
     * @type {'id' | 'update_time' | 'add_time' | 'order_nr'}
     * @memberof StagesApiGetStages
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time' | 'order_nr'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof StagesApiGetStages
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof StagesApiGetStages
     */
    readonly cursor?: string
}

/**
 * Request parameters for updateStage operation in StagesApi.
 * @export
 * @interface StagesApiUpdateStageRequest
 */
export interface StagesApiUpdateStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiUpdateStage
     */
    readonly id: number

    /**
     * 
     * @type {UpdateStageRequest}
     * @memberof StagesApiUpdateStage
     */
    readonly UpdateStageRequest?: UpdateStageRequest
}

/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export class StagesApi extends BaseAPI {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public addStage(requestParameters: StagesApiAddStageRequest = {}, ) {
        return StagesApiFp(this.configuration).addStage(requestParameters.AddStageRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public deleteStage(requestParameters: StagesApiDeleteStageRequest, ) {
        return StagesApiFp(this.configuration).deleteStage(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public getStage(requestParameters: StagesApiGetStageRequest, ) {
        return StagesApiFp(this.configuration).getStage(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public getStages(requestParameters: StagesApiGetStagesRequest = {}, ) {
        return StagesApiFp(this.configuration).getStages(requestParameters.pipeline_id, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public updateStage(requestParameters: StagesApiUpdateStageRequest, ) {
        return StagesApiFp(this.configuration).updateStage(requestParameters.id, requestParameters.UpdateStageRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
