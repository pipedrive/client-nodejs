/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDealFollowerRequest } from '../models';
// @ts-ignore
import { AddFollowerResponse } from '../models';
// @ts-ignore
import { AddProductRequest } from '../models';
// @ts-ignore
import { AddProductVariationRequest } from '../models';
// @ts-ignore
import { DeleteFollowerResponse } from '../models';
// @ts-ignore
import { DeleteProductResponse } from '../models';
// @ts-ignore
import { DeleteProductVariationResponse } from '../models';
// @ts-ignore
import { GetFollowerChangelogsResponse } from '../models';
// @ts-ignore
import { GetFollowersResponse } from '../models';
// @ts-ignore
import { GetProductResponse } from '../models';
// @ts-ignore
import { GetProductSearchResponse } from '../models';
// @ts-ignore
import { GetProductVariationResponse } from '../models';
// @ts-ignore
import { GetProductVariationsResponse } from '../models';
// @ts-ignore
import { GetProductsResponse } from '../models';
// @ts-ignore
import { UpdateProductRequest } from '../models';
// @ts-ignore
import { UpdateProductResponse } from '../models';
// @ts-ignore
import { UpdateProductVariationRequest } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {AddProductRequest} [AddProductRequest] 

         * @throws {RequiredError}
         */
        addProduct: async (AddProductRequest?: AddProductRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a user as a follower to the product.
         * @summary Add a follower to a product
         * @param {number} id The ID of the product
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        addProductFollower: async (id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addProductFollower', 'id', id)
            const localVarPath = `/products/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new product variation.
         * @summary Add a product variation
         * @param {number} id The ID of the product
         * @param {AddProductVariationRequest} [AddProductVariationRequest] 

         * @throws {RequiredError}
         */
        addProductVariation: async (id: number, AddProductVariationRequest?: AddProductVariationRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addProductVariation', 'id', id)
            const localVarPath = `/products/{id}/variations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddProductVariationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        deleteProduct: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user follower from the product.
         * @summary Delete a follower from a product
         * @param {number} id The ID of the product
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        deleteProductFollower: async (id: number, follower_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductFollower', 'id', id)
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteProductFollower', 'follower_id', follower_id)
            const localVarPath = `/products/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product variation.
         * @summary Delete a product variation
         * @param {number} id The ID of the product
         * @param {number} product_variation_id The ID of the product variation

         * @throws {RequiredError}
         */
        deleteProductVariation: async (id: number, product_variation_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductVariation', 'id', id)
            // verify required parameter 'product_variation_id' is not null or undefined
            assertParamExists('deleteProductVariation', 'product_variation_id', product_variation_id)
            const localVarPath = `/products/{id}/variations/{product_variation_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_variation_id"}}`, encodeURIComponent(String(product_variation_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        getProduct: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists users who are following the product.
         * @summary List followers of a product
         * @param {number} id The ID of the product
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getProductFollowers: async (id: number, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductFollowers', 'id', id)
            const localVarPath = `/products/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists changelogs about users have followed the product.
         * @summary List followers changelog of a product
         * @param {number} id The ID of the product
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getProductFollowersChangelog: async (id: number, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductFollowersChangelog', 'id', id)
            const localVarPath = `/products/{id}/followers/changelog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all product variations.
         * @summary Get all product variations
         * @param {number} id The ID of the product
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.

         * @throws {RequiredError}
         */
        getProductVariations: async (id: number, cursor?: string, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductVariations', 'id', id)
            const localVarPath = `/products/{id}/variations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {number} [owner_id] If supplied, only products owned by the given user will be returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'name' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;name&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {string} [custom_fields] Comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for a smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        getProducts: async (owner_id?: number, ids?: string, filter_id?: number, cursor?: string, limit?: number, sort_by?: 'id' | 'name' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', custom_fields?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        searchProducts: async (term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchProducts', 'term', term)
            const localVarPath = `/products/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {number} id The ID of the product
         * @param {UpdateProductRequest} [UpdateProductRequest] 

         * @throws {RequiredError}
         */
        updateProduct: async (id: number, UpdateProductRequest?: UpdateProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates product variation data.
         * @summary Update a product variation
         * @param {number} id The ID of the product
         * @param {number} product_variation_id The ID of the product variation
         * @param {UpdateProductVariationRequest} [UpdateProductVariationRequest] 

         * @throws {RequiredError}
         */
        updateProductVariation: async (id: number, product_variation_id: number, UpdateProductVariationRequest?: UpdateProductVariationRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProductVariation', 'id', id)
            // verify required parameter 'product_variation_id' is not null or undefined
            assertParamExists('updateProductVariation', 'product_variation_id', product_variation_id)
            const localVarPath = `/products/{id}/variations/{product_variation_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_variation_id"}}`, encodeURIComponent(String(product_variation_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProductVariationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {AddProductRequest} [AddProductRequest] 

         * @throws {RequiredError}
         */
        async addProduct(AddProductRequest?: AddProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(AddProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a user as a follower to the product.
         * @summary Add a follower to a product
         * @param {number} id The ID of the product
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        async addProductFollower(id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductFollower(id, AddDealFollowerRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a new product variation.
         * @summary Add a product variation
         * @param {number} id The ID of the product
         * @param {AddProductVariationRequest} [AddProductVariationRequest] 

         * @throws {RequiredError}
         */
        async addProductVariation(id: number, AddProductVariationRequest?: AddProductVariationRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductVariationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductVariation(id, AddProductVariationRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        async deleteProduct(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a user follower from the product.
         * @summary Delete a follower from a product
         * @param {number} id The ID of the product
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        async deleteProductFollower(id: number, follower_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductFollower(id, follower_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a product variation.
         * @summary Delete a product variation
         * @param {number} id The ID of the product
         * @param {number} product_variation_id The ID of the product variation

         * @throws {RequiredError}
         */
        async deleteProductVariation(id: number, product_variation_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductVariationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductVariation(id, product_variation_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        async getProduct(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists users who are following the product.
         * @summary List followers of a product
         * @param {number} id The ID of the product
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getProductFollowers(id: number, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFollowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductFollowers(id, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists changelogs about users have followed the product.
         * @summary List followers changelog of a product
         * @param {number} id The ID of the product
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getProductFollowersChangelog(id: number, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFollowerChangelogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductFollowersChangelog(id, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all product variations.
         * @summary Get all product variations
         * @param {number} id The ID of the product
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.

         * @throws {RequiredError}
         */
        async getProductVariations(id: number, cursor?: string, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductVariationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductVariations(id, cursor, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {number} [owner_id] If supplied, only products owned by the given user will be returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'name' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;name&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {string} [custom_fields] Comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for a smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        async getProducts(owner_id?: number, ids?: string, filter_id?: number, cursor?: string, limit?: number, sort_by?: 'id' | 'name' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', custom_fields?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(owner_id, ids, filter_id, cursor, limit, sort_by, sort_direction, custom_fields, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async searchProducts(term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProducts(term, fields, exact_match, include_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {number} id The ID of the product
         * @param {UpdateProductRequest} [UpdateProductRequest] 

         * @throws {RequiredError}
         */
        async updateProduct(id: number, UpdateProductRequest?: UpdateProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, UpdateProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates product variation data.
         * @summary Update a product variation
         * @param {number} id The ID of the product
         * @param {number} product_variation_id The ID of the product variation
         * @param {UpdateProductVariationRequest} [UpdateProductVariationRequest] 

         * @throws {RequiredError}
         */
        async updateProductVariation(id: number, product_variation_id: number, UpdateProductVariationRequest?: UpdateProductVariationRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductVariationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductVariation(id, product_variation_id, UpdateProductVariationRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProduct(requestParameters: ProductsApiAddProductRequest = {}, ): Promise<GetProductResponse> {
            return localVarFp.addProduct(requestParameters.AddProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a user as a follower to the product.
         * @summary Add a follower to a product
         * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest, ): Promise<AddFollowerResponse> {
            return localVarFp.addProductFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new product variation.
         * @summary Add a product variation
         * @param {ProductsApiAddProductVariationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProductVariation(requestParameters: ProductsApiAddProductVariationRequest, ): Promise<GetProductVariationResponse> {
            return localVarFp.addProductVariation(requestParameters.id, requestParameters.AddProductVariationRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: ProductsApiDeleteProductRequest, ): Promise<DeleteProductResponse> {
            return localVarFp.deleteProduct(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a user follower from the product.
         * @summary Delete a follower from a product
         * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest, ): Promise<DeleteFollowerResponse> {
            return localVarFp.deleteProductFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a product variation.
         * @summary Delete a product variation
         * @param {ProductsApiDeleteProductVariationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProductVariation(requestParameters: ProductsApiDeleteProductVariationRequest, ): Promise<DeleteProductVariationResponse> {
            return localVarFp.deleteProductVariation(requestParameters.id, requestParameters.product_variation_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProduct(requestParameters: ProductsApiGetProductRequest, ): Promise<GetProductResponse> {
            return localVarFp.getProduct(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists users who are following the product.
         * @summary List followers of a product
         * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest, ): Promise<GetFollowersResponse> {
            return localVarFp.getProductFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists changelogs about users have followed the product.
         * @summary List followers changelog of a product
         * @param {ProductsApiGetProductFollowersChangelogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductFollowersChangelog(requestParameters: ProductsApiGetProductFollowersChangelogRequest, ): Promise<GetFollowerChangelogsResponse> {
            return localVarFp.getProductFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all product variations.
         * @summary Get all product variations
         * @param {ProductsApiGetProductVariationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductVariations(requestParameters: ProductsApiGetProductVariationsRequest, ): Promise<GetProductVariationsResponse> {
            return localVarFp.getProductVariations(requestParameters.id, requestParameters.cursor, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProducts(requestParameters: ProductsApiGetProductsRequest = {}, ): Promise<GetProductsResponse> {
            return localVarFp.getProducts(requestParameters.owner_id, requestParameters.ids, requestParameters.filter_id, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.custom_fields, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchProducts(requestParameters: ProductsApiSearchProductsRequest, ): Promise<GetProductSearchResponse> {
            return localVarFp.searchProducts(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductsApiUpdateProductRequest, ): Promise<UpdateProductResponse> {
            return localVarFp.updateProduct(requestParameters.id, requestParameters.UpdateProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates product variation data.
         * @summary Update a product variation
         * @param {ProductsApiUpdateProductVariationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateProductVariation(requestParameters: ProductsApiUpdateProductVariationRequest, ): Promise<GetProductVariationResponse> {
            return localVarFp.updateProductVariation(requestParameters.id, requestParameters.product_variation_id, requestParameters.UpdateProductVariationRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductRequest
 */
export interface ProductsApiAddProductRequest {
    /**
     * 
     * @type {AddProductRequest}
     * @memberof ProductsApiAddProduct
     */
    readonly AddProductRequest?: AddProductRequest
}

/**
 * Request parameters for addProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductFollowerRequest
 */
export interface ProductsApiAddProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiAddProductFollower
     */
    readonly id: number

    /**
     * 
     * @type {AddDealFollowerRequest}
     * @memberof ProductsApiAddProductFollower
     */
    readonly AddDealFollowerRequest?: AddDealFollowerRequest
}

/**
 * Request parameters for addProductVariation operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductVariationRequest
 */
export interface ProductsApiAddProductVariationRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiAddProductVariation
     */
    readonly id: number

    /**
     * 
     * @type {AddProductVariationRequest}
     * @memberof ProductsApiAddProductVariation
     */
    readonly AddProductVariationRequest?: AddProductVariationRequest
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProduct
     */
    readonly id: number
}

/**
 * Request parameters for deleteProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductFollowerRequest
 */
export interface ProductsApiDeleteProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly id: number

    /**
     * The ID of the following user
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly follower_id: number
}

/**
 * Request parameters for deleteProductVariation operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductVariationRequest
 */
export interface ProductsApiDeleteProductVariationRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProductVariation
     */
    readonly id: number

    /**
     * The ID of the product variation
     * @type {number}
     * @memberof ProductsApiDeleteProductVariation
     */
    readonly product_variation_id: number
}

/**
 * Request parameters for getProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductRequest
 */
export interface ProductsApiGetProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProduct
     */
    readonly id: number
}

/**
 * Request parameters for getProductFollowers operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFollowersRequest
 */
export interface ProductsApiGetProductFollowersRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly id: number

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly cursor?: string
}

/**
 * Request parameters for getProductFollowersChangelog operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFollowersChangelogRequest
 */
export interface ProductsApiGetProductFollowersChangelogRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFollowersChangelog
     */
    readonly id: number

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ProductsApiGetProductFollowersChangelog
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProductsApiGetProductFollowersChangelog
     */
    readonly cursor?: string
}

/**
 * Request parameters for getProductVariations operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductVariationsRequest
 */
export interface ProductsApiGetProductVariationsRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductVariations
     */
    readonly id: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProductsApiGetProductVariations
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ProductsApiGetProductVariations
     */
    readonly limit?: number
}

/**
 * Request parameters for getProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductsRequest
 */
export interface ProductsApiGetProductsRequest {
    /**
     * If supplied, only products owned by the given user will be returned
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly owner_id?: number

    /**
     * Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly ids?: string

    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly filter_id?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly limit?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;name&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @type {'id' | 'name' | 'add_time' | 'update_time'}
     * @memberof ProductsApiGetProducts
     */
    readonly sort_by?: 'id' | 'name' | 'add_time' | 'update_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof ProductsApiGetProducts
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * Comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for a smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly custom_fields?: string
}

/**
 * Request parameters for searchProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiSearchProductsRequest
 */
export interface ProductsApiSearchProductsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'code' | 'custom_fields' | 'name'}
     * @memberof ProductsApiSearchProducts
     */
    readonly fields?: 'code' | 'custom_fields' | 'name'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof ProductsApiSearchProducts
     */
    readonly exact_match?: boolean

    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'product.price'}
     * @memberof ProductsApiSearchProducts
     */
    readonly include_fields?: 'product.price'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly cursor?: string
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiUpdateProduct
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProductRequest}
     * @memberof ProductsApiUpdateProduct
     */
    readonly UpdateProductRequest?: UpdateProductRequest
}

/**
 * Request parameters for updateProductVariation operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductVariationRequest
 */
export interface ProductsApiUpdateProductVariationRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiUpdateProductVariation
     */
    readonly id: number

    /**
     * The ID of the product variation
     * @type {number}
     * @memberof ProductsApiUpdateProductVariation
     */
    readonly product_variation_id: number

    /**
     * 
     * @type {UpdateProductVariationRequest}
     * @memberof ProductsApiUpdateProductVariation
     */
    readonly UpdateProductVariationRequest?: UpdateProductVariationRequest
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProduct(requestParameters: ProductsApiAddProductRequest = {}, ) {
        return ProductsApiFp(this.configuration).addProduct(requestParameters.AddProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a user as a follower to the product.
     * @summary Add a follower to a product
     * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest, ) {
        return ProductsApiFp(this.configuration).addProductFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new product variation.
     * @summary Add a product variation
     * @param {ProductsApiAddProductVariationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProductVariation(requestParameters: ProductsApiAddProductVariationRequest, ) {
        return ProductsApiFp(this.configuration).addProductVariation(requestParameters.id, requestParameters.AddProductVariationRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(requestParameters: ProductsApiDeleteProductRequest, ) {
        return ProductsApiFp(this.configuration).deleteProduct(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a user follower from the product.
     * @summary Delete a follower from a product
     * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest, ) {
        return ProductsApiFp(this.configuration).deleteProductFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a product variation.
     * @summary Delete a product variation
     * @param {ProductsApiDeleteProductVariationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProductVariation(requestParameters: ProductsApiDeleteProductVariationRequest, ) {
        return ProductsApiFp(this.configuration).deleteProductVariation(requestParameters.id, requestParameters.product_variation_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProduct(requestParameters: ProductsApiGetProductRequest, ) {
        return ProductsApiFp(this.configuration).getProduct(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists users who are following the product.
     * @summary List followers of a product
     * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest, ) {
        return ProductsApiFp(this.configuration).getProductFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists changelogs about users have followed the product.
     * @summary List followers changelog of a product
     * @param {ProductsApiGetProductFollowersChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductFollowersChangelog(requestParameters: ProductsApiGetProductFollowersChangelogRequest, ) {
        return ProductsApiFp(this.configuration).getProductFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all product variations.
     * @summary Get all product variations
     * @param {ProductsApiGetProductVariationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductVariations(requestParameters: ProductsApiGetProductVariationsRequest, ) {
        return ProductsApiFp(this.configuration).getProductVariations(requestParameters.id, requestParameters.cursor, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProducts(requestParameters: ProductsApiGetProductsRequest = {}, ) {
        return ProductsApiFp(this.configuration).getProducts(requestParameters.owner_id, requestParameters.ids, requestParameters.filter_id, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.custom_fields, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public searchProducts(requestParameters: ProductsApiSearchProductsRequest, ) {
        return ProductsApiFp(this.configuration).searchProducts(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates product data.
     * @summary Update a product
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(requestParameters: ProductsApiUpdateProductRequest, ) {
        return ProductsApiFp(this.configuration).updateProduct(requestParameters.id, requestParameters.UpdateProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates product variation data.
     * @summary Update a product variation
     * @param {ProductsApiUpdateProductVariationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProductVariation(requestParameters: ProductsApiUpdateProductVariationRequest, ) {
        return ProductsApiFp(this.configuration).updateProductVariation(requestParameters.id, requestParameters.product_variation_id, requestParameters.UpdateProductVariationRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
