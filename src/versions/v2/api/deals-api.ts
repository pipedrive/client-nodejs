/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddAInstallmentResponse } from '../models';
// @ts-ignore
import { AddAdditionalDiscountRequestBody } from '../models';
// @ts-ignore
import { AddAdditionalDiscountResponse } from '../models';
// @ts-ignore
import { AddConvertDealToLeadResponse } from '../models';
// @ts-ignore
import { AddDealFollowerRequest } from '../models';
// @ts-ignore
import { AddDealProductRequest } from '../models';
// @ts-ignore
import { AddDealProductResponse } from '../models';
// @ts-ignore
import { AddDealRequest } from '../models';
// @ts-ignore
import { AddFollowerResponse } from '../models';
// @ts-ignore
import { AddInstallmentRequestBody } from '../models';
// @ts-ignore
import { AddManyDealProductResponse } from '../models';
// @ts-ignore
import { CreateManyDealProductRequest } from '../models';
// @ts-ignore
import { DeleteAdditionalDiscountResponse } from '../models';
// @ts-ignore
import { DeleteDealProductResponse } from '../models';
// @ts-ignore
import { DeleteDealResponse } from '../models';
// @ts-ignore
import { DeleteFollowerResponse } from '../models';
// @ts-ignore
import { DeleteInstallmentResponse } from '../models';
// @ts-ignore
import { DeleteManyDealProductResponse } from '../models';
// @ts-ignore
import { GetAdditionalDiscountsResponse } from '../models';
// @ts-ignore
import { GetConvertResponse } from '../models';
// @ts-ignore
import { GetConvertResponse1 } from '../models';
// @ts-ignore
import { GetDealSearchResponse } from '../models';
// @ts-ignore
import { GetDealsProductsResponse } from '../models';
// @ts-ignore
import { GetDealsResponse } from '../models';
// @ts-ignore
import { GetFollowerChangelogsResponse } from '../models';
// @ts-ignore
import { GetFollowersResponse } from '../models';
// @ts-ignore
import { GetInstallmentsResponse } from '../models';
// @ts-ignore
import { UpdateAdditionalDiscountRequestBody } from '../models';
// @ts-ignore
import { UpdateAdditionalDiscountResponse } from '../models';
// @ts-ignore
import { UpdateDealProductRequest } from '../models';
// @ts-ignore
import { UpdateDealRequest } from '../models';
// @ts-ignore
import { UpdateInstallmentRequestBody } from '../models';
// @ts-ignore
import { UpdateInstallmentResponse } from '../models';
// @ts-ignore
import { UpsertDealResponse } from '../models';
/**
 * DealsApi - axios parameter creator
 * @export
 */
export const DealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new deal.
         * @summary Add a new deal
         * @param {AddDealRequest} [AddDealRequest] 

         * @throws {RequiredError}
         */
        addDeal: async (AddDealRequest?: AddDealRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a user as a follower to the deal.
         * @summary Add a follower to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        addDealFollower: async (id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addDealFollower', 'id', id)
            const localVarPath = `/deals/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealProductRequest} [AddDealProductRequest] 

         * @throws {RequiredError}
         */
        addDealProduct: async (id: number, AddDealProductRequest?: AddDealProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addDealProduct', 'id', id)
            const localVarPath = `/deals/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds multiple products to a deal in a single request. Maximum of 100 products allowed per request.
         * @summary Add multiple products to a deal
         * @param {number} id The ID of the deal
         * @param {CreateManyDealProductRequest} [CreateManyDealProductRequest] 

         * @throws {RequiredError}
         */
        addManyDealProducts: async (id: number, CreateManyDealProductRequest?: CreateManyDealProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addManyDealProducts', 'id', id)
            const localVarPath = `/deals/{id}/products/bulk`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(CreateManyDealProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {number} id The ID of the deal to convert

         * @throws {RequiredError}
         */
        convertDealToLead: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('convertDealToLead', 'id', id)
            const localVarPath = `/deals/{id}/convert/lead`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a discount from a deal, changing the deal value if the deal has one-time products attached.
         * @summary Delete a discount from a deal
         * @param {number} id The ID of the deal
         * @param {string} discount_id The ID of the discount

         * @throws {RequiredError}
         */
        deleteAdditionalDiscount: async (id: number, discount_id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdditionalDiscount', 'id', id)
            // verify required parameter 'discount_id' is not null or undefined
            assertParamExists('deleteAdditionalDiscount', 'discount_id', discount_id)
            const localVarPath = `/deals/{id}/discounts/{discount_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"discount_id"}}`, encodeURIComponent(String(discount_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        deleteDeal: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user follower from the deal.
         * @summary Delete a follower from a deal
         * @param {number} id The ID of the deal
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        deleteDealFollower: async (id: number, follower_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealFollower', 'id', id)
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteDealFollower', 'follower_id', follower_id)
            const localVarPath = `/deals/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The product attachment ID

         * @throws {RequiredError}
         */
        deleteDealProduct: async (id: number, product_attachment_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealProduct', 'id', id)
            // verify required parameter 'product_attachment_id' is not null or undefined
            assertParamExists('deleteDealProduct', 'product_attachment_id', product_attachment_id)
            const localVarPath = `/deals/{id}/products/{product_attachment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(product_attachment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an installment from a deal.  Only available in Growth and above plans. 
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        deleteInstallment: async (id: number, installment_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstallment', 'id', id)
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('deleteInstallment', 'installment_id', installment_id)
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes multiple products from a deal. If no product IDs are specified, up to 100 products will be removed from the deal. A maximum of 100 product IDs can be provided per request.
         * @summary Delete many products from a deal
         * @param {number} id The ID of the deal
         * @param {string} [ids] Comma-separated list of deal product IDs to delete. If not provided, all deal products will be deleted up to 100 items. Maximum 100 IDs allowed.

         * @throws {RequiredError}
         */
        deleteManyDealProducts: async (id: number, ids?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteManyDealProducts', 'id', id)
            const localVarPath = `/deals/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full", "deals:full"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists discounts attached to a deal.
         * @summary List discounts added to a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        getAdditionalDiscounts: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdditionalDiscounts', 'id', id)
            const localVarPath = `/deals/{id}/discounts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all archived deals.
         * @summary Get all archived deals
         * @param {number} [filter_id] If supplied, only deals matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {number} [pipeline_id] If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
         * @param {number} [stage_id] If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getArchivedDeals: async (filter_id?: number, ids?: string, owner_id?: number, person_id?: number, org_id?: number, pipeline_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/deals/archived`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }

            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (updated_since !== undefined) {
                localVarQueryParameter['updated_since'] = updated_since;
            }

            if (updated_until !== undefined) {
                localVarQueryParameter['updated_until'] = updated_until;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific deal.
         * @summary Get details of a deal
         * @param {number} id The ID of the deal
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        getDeal: async (id: number, include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {number} id The ID of a deal
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        getDealConversionStatus: async (id: number, conversion_id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealConversionStatus', 'id', id)
            // verify required parameter 'conversion_id' is not null or undefined
            assertParamExists('getDealConversionStatus', 'conversion_id', conversion_id)
            const localVarPath = `/deals/{id}/convert/status/{conversion_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"conversion_id"}}`, encodeURIComponent(String(conversion_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "deals:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists users who are following the deal.
         * @summary List followers of a deal
         * @param {number} id The ID of the deal
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getDealFollowers: async (id: number, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealFollowers', 'id', id)
            const localVarPath = `/deals/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists changelogs about users have followed the deal.
         * @summary List followers changelog of a deal
         * @param {number} id The ID of the deal
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getDealFollowersChangelog: async (id: number, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealFollowersChangelog', 'id', id)
            const localVarPath = `/deals/{id}/followers/changelog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {number} id The ID of the deal
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getDealProducts: async (id: number, cursor?: string, limit?: number, sort_by?: 'id' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealProducts', 'id', id)
            const localVarPath = `/deals/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full", "deals:read", "deals:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all not archived deals.
         * @summary Get all deals
         * @param {number} [filter_id] If supplied, only deals matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {number} [pipeline_id] If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
         * @param {number} [stage_id] If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        getDeals: async (filter_id?: number, ids?: string, owner_id?: number, person_id?: number, org_id?: number, pipeline_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }

            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (updated_since !== undefined) {
                localVarQueryParameter['updated_since'] = updated_since;
            }

            if (updated_until !== undefined) {
                localVarQueryParameter['updated_until'] = updated_until;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (custom_fields !== undefined) {
                localVarQueryParameter['custom_fields'] = custom_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about products attached to deals
         * @summary Get deal products of several deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached products will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'deal_id' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;deal_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getDealsProducts: async (deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'deal_id' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', ): Promise<RequestArgs> => {
            // verify required parameter 'deal_ids' is not null or undefined
            assertParamExists('getDealsProducts', 'deal_ids', deal_ids)
            const localVarPath = `/deals/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full", "deals:read", "deals:full"], configuration)

            if (deal_ids) {
                localVarQueryParameter['deal_ids'] = deal_ids;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Growth and above plans. 
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        getInstallments: async (deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'billing_date' | 'deal_id', sort_direction?: 'asc' | 'desc', ): Promise<RequestArgs> => {
            // verify required parameter 'deal_ids' is not null or undefined
            assertParamExists('getInstallments', 'deal_ids', deal_ids)
            const localVarPath = `/deals/installments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (deal_ids) {
                localVarQueryParameter['deal_ids'] = deal_ids;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort_by !== undefined) {
                localVarQueryParameter['sort_by'] = sort_by;
            }

            if (sort_direction !== undefined) {
                localVarQueryParameter['sort_direction'] = sort_direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a discount to a deal changing, the deal value if the deal has one-time products attached.
         * @summary Add a discount to a deal
         * @param {number} id The ID of the deal
         * @param {AddAdditionalDiscountRequestBody} [AddAdditionalDiscountRequestBody] 

         * @throws {RequiredError}
         */
        postAdditionalDiscount: async (id: number, AddAdditionalDiscountRequestBody?: AddAdditionalDiscountRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postAdditionalDiscount', 'id', id)
            const localVarPath = `/deals/{id}/discounts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddAdditionalDiscountRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Growth and above plans. 
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        postInstallment: async (id: number, AddInstallmentRequestBody?: AddInstallmentRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postInstallment', 'id', id)
            const localVarPath = `/deals/{id}/installments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddInstallmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
         * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
         * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
         * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        searchDeals: async (term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', limit?: number, cursor?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchDeals', 'term', term)
            const localVarPath = `/deals/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (organization_id !== undefined) {
                localVarQueryParameter['organization_id'] = organization_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a discount added to a deal, changing the deal value if the deal has one-time products attached.
         * @summary Update a discount added to a deal
         * @param {number} id The ID of the deal
         * @param {string} discount_id The ID of the discount
         * @param {UpdateAdditionalDiscountRequestBody} [UpdateAdditionalDiscountRequestBody] 

         * @throws {RequiredError}
         */
        updateAdditionalDiscount: async (id: number, discount_id: string, UpdateAdditionalDiscountRequestBody?: UpdateAdditionalDiscountRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAdditionalDiscount', 'id', id)
            // verify required parameter 'discount_id' is not null or undefined
            assertParamExists('updateAdditionalDiscount', 'discount_id', discount_id)
            const localVarPath = `/deals/{id}/discounts/{discount_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"discount_id"}}`, encodeURIComponent(String(discount_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateAdditionalDiscountRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a deal.
         * @summary Update a deal
         * @param {number} id The ID of the deal
         * @param {UpdateDealRequest} [UpdateDealRequest] 

         * @throws {RequiredError}
         */
        updateDeal: async (id: number, UpdateDealRequest?: UpdateDealRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
         * @param {UpdateDealProductRequest} [UpdateDealProductRequest] 

         * @throws {RequiredError}
         */
        updateDealProduct: async (id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDealProduct', 'id', id)
            // verify required parameter 'product_attachment_id' is not null or undefined
            assertParamExists('updateDealProduct', 'product_attachment_id', product_attachment_id)
            const localVarPath = `/deals/{id}/products/{product_attachment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(product_attachment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateDealProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an installment added to a deal.  Only available in Growth and above plans. 
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        updateInstallment: async (id: number, installment_id: number, UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateInstallment', 'id', id)
            // verify required parameter 'installment_id' is not null or undefined
            assertParamExists('updateInstallment', 'installment_id', installment_id)
            const localVarPath = `/deals/{id}/installments/{installment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"installment_id"}}`, encodeURIComponent(String(installment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateInstallmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * DealsApi - functional programming interface
 * @export
 */
export const DealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DealsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new deal.
         * @summary Add a new deal
         * @param {AddDealRequest} [AddDealRequest] 

         * @throws {RequiredError}
         */
        async addDeal(AddDealRequest?: AddDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDeal(AddDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a user as a follower to the deal.
         * @summary Add a follower to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        async addDealFollower(id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealFollower(id, AddDealFollowerRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealProductRequest} [AddDealProductRequest] 

         * @throws {RequiredError}
         */
        async addDealProduct(id: number, AddDealProductRequest?: AddDealProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddDealProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealProduct(id, AddDealProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds multiple products to a deal in a single request. Maximum of 100 products allowed per request.
         * @summary Add multiple products to a deal
         * @param {number} id The ID of the deal
         * @param {CreateManyDealProductRequest} [CreateManyDealProductRequest] 

         * @throws {RequiredError}
         */
        async addManyDealProducts(id: number, CreateManyDealProductRequest?: CreateManyDealProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddManyDealProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addManyDealProducts(id, CreateManyDealProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {number} id The ID of the deal to convert

         * @throws {RequiredError}
         */
        async convertDealToLead(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddConvertDealToLeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertDealToLead(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a discount from a deal, changing the deal value if the deal has one-time products attached.
         * @summary Delete a discount from a deal
         * @param {number} id The ID of the deal
         * @param {string} discount_id The ID of the discount

         * @throws {RequiredError}
         */
        async deleteAdditionalDiscount(id: number, discount_id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteAdditionalDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdditionalDiscount(id, discount_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async deleteDeal(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeal(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a user follower from the deal.
         * @summary Delete a follower from a deal
         * @param {number} id The ID of the deal
         * @param {number} follower_id The ID of the following user

         * @throws {RequiredError}
         */
        async deleteDealFollower(id: number, follower_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealFollower(id, follower_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The product attachment ID

         * @throws {RequiredError}
         */
        async deleteDealProduct(id: number, product_attachment_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealProduct(id, product_attachment_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an installment from a deal.  Only available in Growth and above plans. 
         * @summary Delete an installment from a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment

         * @throws {RequiredError}
         */
        async deleteInstallment(id: number, installment_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstallment(id, installment_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes multiple products from a deal. If no product IDs are specified, up to 100 products will be removed from the deal. A maximum of 100 product IDs can be provided per request.
         * @summary Delete many products from a deal
         * @param {number} id The ID of the deal
         * @param {string} [ids] Comma-separated list of deal product IDs to delete. If not provided, all deal products will be deleted up to 100 items. Maximum 100 IDs allowed.

         * @throws {RequiredError}
         */
        async deleteManyDealProducts(id: number, ids?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteManyDealProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManyDealProducts(id, ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists discounts attached to a deal.
         * @summary List discounts added to a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async getAdditionalDiscounts(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAdditionalDiscountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalDiscounts(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all archived deals.
         * @summary Get all archived deals
         * @param {number} [filter_id] If supplied, only deals matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {number} [pipeline_id] If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
         * @param {number} [stage_id] If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getArchivedDeals(filter_id?: number, ids?: string, owner_id?: number, person_id?: number, org_id?: number, pipeline_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArchivedDeals(filter_id, ids, owner_id, person_id, org_id, pipeline_id, stage_id, status, updated_since, updated_until, sort_by, sort_direction, include_fields, custom_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific deal.
         * @summary Get details of a deal
         * @param {number} id The ID of the deal
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.

         * @throws {RequiredError}
         */
        async getDeal(id: number, include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeal(id, include_fields, custom_fields, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {number} id The ID of a deal
         * @param {string} conversion_id The ID of the conversion

         * @throws {RequiredError}
         */
        async getDealConversionStatus(id: number, conversion_id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetConvertResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealConversionStatus(id, conversion_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists users who are following the deal.
         * @summary List followers of a deal
         * @param {number} id The ID of the deal
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getDealFollowers(id: number, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFollowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealFollowers(id, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists changelogs about users have followed the deal.
         * @summary List followers changelog of a deal
         * @param {number} id The ID of the deal
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getDealFollowersChangelog(id: number, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFollowerChangelogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealFollowersChangelog(id, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {number} id The ID of the deal
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        async getDealProducts(id: number, cursor?: string, limit?: number, sort_by?: 'id' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealProducts(id, cursor, limit, sort_by, sort_direction, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all not archived deals.
         * @summary Get all deals
         * @param {number} [filter_id] If supplied, only deals matching the specified filter are returned
         * @param {string} [ids] Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
         * @param {number} [owner_id] If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
         * @param {number} [person_id] If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
         * @param {number} [org_id] If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
         * @param {number} [pipeline_id] If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
         * @param {number} [stage_id] If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
         * @param {string} [updated_since] If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {string} [updated_until] If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
         * @param {'id' | 'update_time' | 'add_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
         * @param {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'} [include_fields] Optional comma separated string array of additional fields to include
         * @param {string} [custom_fields] Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async getDeals(filter_id?: number, ids?: string, owner_id?: number, person_id?: number, org_id?: number, pipeline_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', updated_since?: string, updated_until?: string, sort_by?: 'id' | 'update_time' | 'add_time', sort_direction?: 'asc' | 'desc', include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email', custom_fields?: string, limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeals(filter_id, ids, owner_id, person_id, org_id, pipeline_id, stage_id, status, updated_since, updated_until, sort_by, sort_direction, include_fields, custom_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about products attached to deals
         * @summary Get deal products of several deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached products will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'deal_id' | 'add_time' | 'update_time'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;deal_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        async getDealsProducts(deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'deal_id' | 'add_time' | 'update_time', sort_direction?: 'asc' | 'desc', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsProducts(deal_ids, cursor, limit, sort_by, sort_direction, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Growth and above plans. 
         * @summary List installments added to a list of deals
         * @param {Array<number>} deal_ids An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {'id' | 'billing_date' | 'deal_id'} [sort_by] The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
         * @param {'asc' | 'desc'} [sort_direction] The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.

         * @throws {RequiredError}
         */
        async getInstallments(deal_ids: Array<number>, cursor?: string, limit?: number, sort_by?: 'id' | 'billing_date' | 'deal_id', sort_direction?: 'asc' | 'desc', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetInstallmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstallments(deal_ids, cursor, limit, sort_by, sort_direction, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a discount to a deal changing, the deal value if the deal has one-time products attached.
         * @summary Add a discount to a deal
         * @param {number} id The ID of the deal
         * @param {AddAdditionalDiscountRequestBody} [AddAdditionalDiscountRequestBody] 

         * @throws {RequiredError}
         */
        async postAdditionalDiscount(id: number, AddAdditionalDiscountRequestBody?: AddAdditionalDiscountRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddAdditionalDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdditionalDiscount(id, AddAdditionalDiscountRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Growth and above plans. 
         * @summary Add an installment to a deal
         * @param {number} id The ID of the deal
         * @param {AddInstallmentRequestBody} [AddInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        async postInstallment(id: number, AddInstallmentRequestBody?: AddInstallmentRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddAInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postInstallment(id, AddInstallmentRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
         * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
         * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
         * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page

         * @throws {RequiredError}
         */
        async searchDeals(term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', limit?: number, cursor?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchDeals(term, fields, exact_match, person_id, organization_id, status, include_fields, limit, cursor, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edits a discount added to a deal, changing the deal value if the deal has one-time products attached.
         * @summary Update a discount added to a deal
         * @param {number} id The ID of the deal
         * @param {string} discount_id The ID of the discount
         * @param {UpdateAdditionalDiscountRequestBody} [UpdateAdditionalDiscountRequestBody] 

         * @throws {RequiredError}
         */
        async updateAdditionalDiscount(id: number, discount_id: string, UpdateAdditionalDiscountRequestBody?: UpdateAdditionalDiscountRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateAdditionalDiscountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdditionalDiscount(id, discount_id, UpdateAdditionalDiscountRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a deal.
         * @summary Update a deal
         * @param {number} id The ID of the deal
         * @param {UpdateDealRequest} [UpdateDealRequest] 

         * @throws {RequiredError}
         */
        async updateDeal(id: number, UpdateDealRequest?: UpdateDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertDealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeal(id, UpdateDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
         * @param {UpdateDealProductRequest} [UpdateDealProductRequest] 

         * @throws {RequiredError}
         */
        async updateDealProduct(id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddDealProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDealProduct(id, product_attachment_id, UpdateDealProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edits an installment added to a deal.  Only available in Growth and above plans. 
         * @summary Update an installment added to a deal
         * @param {number} id The ID of the deal
         * @param {number} installment_id The ID of the installment
         * @param {UpdateInstallmentRequestBody} [UpdateInstallmentRequestBody] 

         * @throws {RequiredError}
         */
        async updateInstallment(id: number, installment_id: number, UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateInstallmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstallment(id, installment_id, UpdateInstallmentRequestBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DealsApi - factory interface
 * @export
 */
export const DealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DealsApiFp(configuration)
    return {
        /**
         * Adds a new deal.
         * @summary Add a new deal
         * @param {DealsApiAddDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDeal(requestParameters: DealsApiAddDealRequest = {}, ): Promise<UpsertDealResponse> {
            return localVarFp.addDeal(requestParameters.AddDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a user as a follower to the deal.
         * @summary Add a follower to a deal
         * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealFollower(requestParameters: DealsApiAddDealFollowerRequest, ): Promise<AddFollowerResponse> {
            return localVarFp.addDealFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealProduct(requestParameters: DealsApiAddDealProductRequest, ): Promise<AddDealProductResponse> {
            return localVarFp.addDealProduct(requestParameters.id, requestParameters.AddDealProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds multiple products to a deal in a single request. Maximum of 100 products allowed per request.
         * @summary Add multiple products to a deal
         * @param {DealsApiAddManyDealProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addManyDealProducts(requestParameters: DealsApiAddManyDealProductsRequest, ): Promise<AddManyDealProductResponse> {
            return localVarFp.addManyDealProducts(requestParameters.id, requestParameters.CreateManyDealProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
         * @summary Convert a deal to a lead (BETA)
         * @param {DealsApiConvertDealToLeadRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        convertDealToLead(requestParameters: DealsApiConvertDealToLeadRequest, ): Promise<AddConvertDealToLeadResponse> {
            return localVarFp.convertDealToLead(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Removes a discount from a deal, changing the deal value if the deal has one-time products attached.
         * @summary Delete a discount from a deal
         * @param {DealsApiDeleteAdditionalDiscountRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteAdditionalDiscount(requestParameters: DealsApiDeleteAdditionalDiscountRequest, ): Promise<DeleteAdditionalDiscountResponse> {
            return localVarFp.deleteAdditionalDiscount(requestParameters.id, requestParameters.discount_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDeal(requestParameters: DealsApiDeleteDealRequest, ): Promise<DeleteDealResponse> {
            return localVarFp.deleteDeal(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a user follower from the deal.
         * @summary Delete a follower from a deal
         * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest, ): Promise<DeleteFollowerResponse> {
            return localVarFp.deleteDealFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest, ): Promise<DeleteDealProductResponse> {
            return localVarFp.deleteDealProduct(requestParameters.id, requestParameters.product_attachment_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Removes an installment from a deal.  Only available in Growth and above plans. 
         * @summary Delete an installment from a deal
         * @param {DealsApiDeleteInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteInstallment(requestParameters: DealsApiDeleteInstallmentRequest, ): Promise<DeleteInstallmentResponse> {
            return localVarFp.deleteInstallment(requestParameters.id, requestParameters.installment_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes multiple products from a deal. If no product IDs are specified, up to 100 products will be removed from the deal. A maximum of 100 product IDs can be provided per request.
         * @summary Delete many products from a deal
         * @param {DealsApiDeleteManyDealProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteManyDealProducts(requestParameters: DealsApiDeleteManyDealProductsRequest, ): Promise<DeleteManyDealProductResponse> {
            return localVarFp.deleteManyDealProducts(requestParameters.id, requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists discounts attached to a deal.
         * @summary List discounts added to a deal
         * @param {DealsApiGetAdditionalDiscountsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getAdditionalDiscounts(requestParameters: DealsApiGetAdditionalDiscountsRequest, ): Promise<GetAdditionalDiscountsResponse> {
            return localVarFp.getAdditionalDiscounts(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all archived deals.
         * @summary Get all archived deals
         * @param {DealsApiGetArchivedDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getArchivedDeals(requestParameters: DealsApiGetArchivedDealsRequest = {}, ): Promise<GetDealsResponse> {
            return localVarFp.getArchivedDeals(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.person_id, requestParameters.org_id, requestParameters.pipeline_id, requestParameters.stage_id, requestParameters.status, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific deal.
         * @summary Get details of a deal
         * @param {DealsApiGetDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDeal(requestParameters: DealsApiGetDealRequest, ): Promise<UpsertDealResponse> {
            return localVarFp.getDeal(requestParameters.id, requestParameters.include_fields, requestParameters.custom_fields, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
         * @summary Get Deal conversion status (BETA)
         * @param {DealsApiGetDealConversionStatusRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealConversionStatus(requestParameters: DealsApiGetDealConversionStatusRequest, ): Promise<GetConvertResponse1> {
            return localVarFp.getDealConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists users who are following the deal.
         * @summary List followers of a deal
         * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest, ): Promise<GetFollowersResponse> {
            return localVarFp.getDealFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists changelogs about users have followed the deal.
         * @summary List followers changelog of a deal
         * @param {DealsApiGetDealFollowersChangelogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFollowersChangelog(requestParameters: DealsApiGetDealFollowersChangelogRequest, ): Promise<GetFollowerChangelogsResponse> {
            return localVarFp.getDealFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealProducts(requestParameters: DealsApiGetDealProductsRequest, ): Promise<GetDealsProductsResponse> {
            return localVarFp.getDealProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all not archived deals.
         * @summary Get all deals
         * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDeals(requestParameters: DealsApiGetDealsRequest = {}, ): Promise<GetDealsResponse> {
            return localVarFp.getDeals(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.person_id, requestParameters.org_id, requestParameters.pipeline_id, requestParameters.stage_id, requestParameters.status, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about products attached to deals
         * @summary Get deal products of several deals
         * @param {DealsApiGetDealsProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealsProducts(requestParameters: DealsApiGetDealsProductsRequest, ): Promise<GetDealsProductsResponse> {
            return localVarFp.getDealsProducts(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists installments attached to a list of deals.  Only available in Growth and above plans. 
         * @summary List installments added to a list of deals
         * @param {DealsApiGetInstallmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getInstallments(requestParameters: DealsApiGetInstallmentsRequest, ): Promise<GetInstallmentsResponse> {
            return localVarFp.getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a discount to a deal changing, the deal value if the deal has one-time products attached.
         * @summary Add a discount to a deal
         * @param {DealsApiPostAdditionalDiscountRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        postAdditionalDiscount(requestParameters: DealsApiPostAdditionalDiscountRequest, ): Promise<AddAdditionalDiscountResponse> {
            return localVarFp.postAdditionalDiscount(requestParameters.id, requestParameters.AddAdditionalDiscountRequestBody, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Growth and above plans. 
         * @summary Add an installment to a deal
         * @param {DealsApiPostInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        postInstallment(requestParameters: DealsApiPostInstallmentRequest, ): Promise<AddAInstallmentResponse> {
            return localVarFp.postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchDeals(requestParameters: DealsApiSearchDealsRequest, ): Promise<GetDealSearchResponse> {
            return localVarFp.searchDeals(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.status, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(axios, basePath));
        },
        /**
         * Edits a discount added to a deal, changing the deal value if the deal has one-time products attached.
         * @summary Update a discount added to a deal
         * @param {DealsApiUpdateAdditionalDiscountRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateAdditionalDiscount(requestParameters: DealsApiUpdateAdditionalDiscountRequest, ): Promise<UpdateAdditionalDiscountResponse> {
            return localVarFp.updateAdditionalDiscount(requestParameters.id, requestParameters.discount_id, requestParameters.UpdateAdditionalDiscountRequestBody, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a deal.
         * @summary Update a deal
         * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDeal(requestParameters: DealsApiUpdateDealRequest, ): Promise<UpsertDealResponse> {
            return localVarFp.updateDeal(requestParameters.id, requestParameters.UpdateDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest, ): Promise<AddDealProductResponse> {
            return localVarFp.updateDealProduct(requestParameters.id, requestParameters.product_attachment_id, requestParameters.UpdateDealProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Edits an installment added to a deal.  Only available in Growth and above plans. 
         * @summary Update an installment added to a deal
         * @param {DealsApiUpdateInstallmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateInstallment(requestParameters: DealsApiUpdateInstallmentRequest, ): Promise<UpdateInstallmentResponse> {
            return localVarFp.updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDeal operation in DealsApi.
 * @export
 * @interface DealsApiAddDealRequest
 */
export interface DealsApiAddDealRequest {
    /**
     * 
     * @type {AddDealRequest}
     * @memberof DealsApiAddDeal
     */
    readonly AddDealRequest?: AddDealRequest
}

/**
 * Request parameters for addDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiAddDealFollowerRequest
 */
export interface DealsApiAddDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealFollower
     */
    readonly id: number

    /**
     * 
     * @type {AddDealFollowerRequest}
     * @memberof DealsApiAddDealFollower
     */
    readonly AddDealFollowerRequest?: AddDealFollowerRequest
}

/**
 * Request parameters for addDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiAddDealProductRequest
 */
export interface DealsApiAddDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealProduct
     */
    readonly id: number

    /**
     * 
     * @type {AddDealProductRequest}
     * @memberof DealsApiAddDealProduct
     */
    readonly AddDealProductRequest?: AddDealProductRequest
}

/**
 * Request parameters for addManyDealProducts operation in DealsApi.
 * @export
 * @interface DealsApiAddManyDealProductsRequest
 */
export interface DealsApiAddManyDealProductsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddManyDealProducts
     */
    readonly id: number

    /**
     * 
     * @type {CreateManyDealProductRequest}
     * @memberof DealsApiAddManyDealProducts
     */
    readonly CreateManyDealProductRequest?: CreateManyDealProductRequest
}

/**
 * Request parameters for convertDealToLead operation in DealsApi.
 * @export
 * @interface DealsApiConvertDealToLeadRequest
 */
export interface DealsApiConvertDealToLeadRequest {
    /**
     * The ID of the deal to convert
     * @type {number}
     * @memberof DealsApiConvertDealToLead
     */
    readonly id: number
}

/**
 * Request parameters for deleteAdditionalDiscount operation in DealsApi.
 * @export
 * @interface DealsApiDeleteAdditionalDiscountRequest
 */
export interface DealsApiDeleteAdditionalDiscountRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteAdditionalDiscount
     */
    readonly id: number

    /**
     * The ID of the discount
     * @type {string}
     * @memberof DealsApiDeleteAdditionalDiscount
     */
    readonly discount_id: string
}

/**
 * Request parameters for deleteDeal operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealRequest
 */
export interface DealsApiDeleteDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDeal
     */
    readonly id: number
}

/**
 * Request parameters for deleteDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealFollowerRequest
 */
export interface DealsApiDeleteDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly id: number

    /**
     * The ID of the following user
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly follower_id: number
}

/**
 * Request parameters for deleteDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealProductRequest
 */
export interface DealsApiDeleteDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly id: number

    /**
     * The product attachment ID
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly product_attachment_id: number
}

/**
 * Request parameters for deleteInstallment operation in DealsApi.
 * @export
 * @interface DealsApiDeleteInstallmentRequest
 */
export interface DealsApiDeleteInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteInstallment
     */
    readonly id: number

    /**
     * The ID of the installment
     * @type {number}
     * @memberof DealsApiDeleteInstallment
     */
    readonly installment_id: number
}

/**
 * Request parameters for deleteManyDealProducts operation in DealsApi.
 * @export
 * @interface DealsApiDeleteManyDealProductsRequest
 */
export interface DealsApiDeleteManyDealProductsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteManyDealProducts
     */
    readonly id: number

    /**
     * Comma-separated list of deal product IDs to delete. If not provided, all deal products will be deleted up to 100 items. Maximum 100 IDs allowed.
     * @type {string}
     * @memberof DealsApiDeleteManyDealProducts
     */
    readonly ids?: string
}

/**
 * Request parameters for getAdditionalDiscounts operation in DealsApi.
 * @export
 * @interface DealsApiGetAdditionalDiscountsRequest
 */
export interface DealsApiGetAdditionalDiscountsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetAdditionalDiscounts
     */
    readonly id: number
}

/**
 * Request parameters for getArchivedDeals operation in DealsApi.
 * @export
 * @interface DealsApiGetArchivedDealsRequest
 */
export interface DealsApiGetArchivedDealsRequest {
    /**
     * If supplied, only deals matching the specified filter are returned
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly filter_id?: number

    /**
     * Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @type {string}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly ids?: string

    /**
     * If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly owner_id?: number

    /**
     * If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly person_id?: number

    /**
     * If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly org_id?: number

    /**
     * If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly pipeline_id?: number

    /**
     * If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly stage_id?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
     * @type {'open' | 'won' | 'lost' | 'deleted'}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted'

    /**
     * If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly updated_since?: string

    /**
     * If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly updated_until?: string

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * Optional comma separated string array of additional fields to include
     * @type {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'

    /**
     * Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
     * @type {string}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly custom_fields?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetArchivedDeals
     */
    readonly cursor?: string
}

/**
 * Request parameters for getDeal operation in DealsApi.
 * @export
 * @interface DealsApiGetDealRequest
 */
export interface DealsApiGetDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDeal
     */
    readonly id: number

    /**
     * Optional comma separated string array of additional fields to include
     * @type {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'}
     * @memberof DealsApiGetDeal
     */
    readonly include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'

    /**
     * Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
     * @type {string}
     * @memberof DealsApiGetDeal
     */
    readonly custom_fields?: string
}

/**
 * Request parameters for getDealConversionStatus operation in DealsApi.
 * @export
 * @interface DealsApiGetDealConversionStatusRequest
 */
export interface DealsApiGetDealConversionStatusRequest {
    /**
     * The ID of a deal
     * @type {number}
     * @memberof DealsApiGetDealConversionStatus
     */
    readonly id: number

    /**
     * The ID of the conversion
     * @type {string}
     * @memberof DealsApiGetDealConversionStatus
     */
    readonly conversion_id: string
}

/**
 * Request parameters for getDealFollowers operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFollowersRequest
 */
export interface DealsApiGetDealFollowersRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFollowers
     */
    readonly id: number

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealFollowers
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealFollowers
     */
    readonly cursor?: string
}

/**
 * Request parameters for getDealFollowersChangelog operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFollowersChangelogRequest
 */
export interface DealsApiGetDealFollowersChangelogRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFollowersChangelog
     */
    readonly id: number

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealFollowersChangelog
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealFollowersChangelog
     */
    readonly cursor?: string
}

/**
 * Request parameters for getDealProducts operation in DealsApi.
 * @export
 * @interface DealsApiGetDealProductsRequest
 */
export interface DealsApiGetDealProductsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly id: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealProducts
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly limit?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @type {'id' | 'add_time' | 'update_time'}
     * @memberof DealsApiGetDealProducts
     */
    readonly sort_by?: 'id' | 'add_time' | 'update_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof DealsApiGetDealProducts
     */
    readonly sort_direction?: 'asc' | 'desc'
}

/**
 * Request parameters for getDeals operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsRequest
 */
export interface DealsApiGetDealsRequest {
    /**
     * If supplied, only deals matching the specified filter are returned
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly filter_id?: number

    /**
     * Optional comma separated string array of up to 100 entity ids to fetch. If filter_id is provided, this is ignored. If any of the requested entities do not exist or are not visible, they are not included in the response.
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly ids?: string

    /**
     * If supplied, only deals owned by the specified user are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly owner_id?: number

    /**
     * If supplied, only deals linked to the specified person are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly person_id?: number

    /**
     * If supplied, only deals linked to the specified organization are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly org_id?: number

    /**
     * If supplied, only deals in the specified pipeline are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly pipeline_id?: number

    /**
     * If supplied, only deals in the specified stage are returned. If filter_id is provided, this is ignored.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly stage_id?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included. Multiple statuses can be included as a comma separated array. If filter_id is provided, this is ignored.
     * @type {'open' | 'won' | 'lost' | 'deleted'}
     * @memberof DealsApiGetDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted'

    /**
     * If set, only deals with an &#x60;update_time&#x60; later than or equal to this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly updated_since?: string

    /**
     * If set, only deals with an &#x60;update_time&#x60; earlier than this time are returned. In RFC3339 format, e.g. 2025-01-01T10:20:00Z.
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly updated_until?: string

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;update_time&#x60;, &#x60;add_time&#x60;.
     * @type {'id' | 'update_time' | 'add_time'}
     * @memberof DealsApiGetDeals
     */
    readonly sort_by?: 'id' | 'update_time' | 'add_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof DealsApiGetDeals
     */
    readonly sort_direction?: 'asc' | 'desc'

    /**
     * Optional comma separated string array of additional fields to include
     * @type {'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'}
     * @memberof DealsApiGetDeals
     */
    readonly include_fields?: 'next_activity_id' | 'last_activity_id' | 'first_won_time' | 'products_count' | 'files_count' | 'notes_count' | 'followers_count' | 'email_messages_count' | 'activities_count' | 'done_activities_count' | 'undone_activities_count' | 'participants_count' | 'last_incoming_mail_time' | 'last_outgoing_mail_time' | 'smart_bcc_email'

    /**
     * Optional comma separated string array of custom fields keys to include. If you are only interested in a particular set of custom fields, please use this parameter for faster results and smaller response.&lt;br/&gt;A maximum of 15 keys is allowed.
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly custom_fields?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly cursor?: string
}

/**
 * Request parameters for getDealsProducts operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsProductsRequest
 */
export interface DealsApiGetDealsProductsRequest {
    /**
     * An array of integers with the IDs of the deals for which the attached products will be returned. A maximum of 100 deal IDs can be provided.
     * @type {Array<number>}
     * @memberof DealsApiGetDealsProducts
     */
    readonly deal_ids: Array<number>

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealsProducts
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealsProducts
     */
    readonly limit?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;deal_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @type {'id' | 'deal_id' | 'add_time' | 'update_time'}
     * @memberof DealsApiGetDealsProducts
     */
    readonly sort_by?: 'id' | 'deal_id' | 'add_time' | 'update_time'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof DealsApiGetDealsProducts
     */
    readonly sort_direction?: 'asc' | 'desc'
}

/**
 * Request parameters for getInstallments operation in DealsApi.
 * @export
 * @interface DealsApiGetInstallmentsRequest
 */
export interface DealsApiGetInstallmentsRequest {
    /**
     * An array of integers with the IDs of the deals for which the attached installments will be returned. A maximum of 100 deal IDs can be provided.
     * @type {Array<number>}
     * @memberof DealsApiGetInstallments
     */
    readonly deal_ids: Array<number>

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetInstallments
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetInstallments
     */
    readonly limit?: number

    /**
     * The field to sort by. Supported fields: &#x60;id&#x60;, &#x60;billing_date&#x60;, &#x60;deal_id&#x60;.
     * @type {'id' | 'billing_date' | 'deal_id'}
     * @memberof DealsApiGetInstallments
     */
    readonly sort_by?: 'id' | 'billing_date' | 'deal_id'

    /**
     * The sorting direction. Supported values: &#x60;asc&#x60;, &#x60;desc&#x60;.
     * @type {'asc' | 'desc'}
     * @memberof DealsApiGetInstallments
     */
    readonly sort_direction?: 'asc' | 'desc'
}

/**
 * Request parameters for postAdditionalDiscount operation in DealsApi.
 * @export
 * @interface DealsApiPostAdditionalDiscountRequest
 */
export interface DealsApiPostAdditionalDiscountRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiPostAdditionalDiscount
     */
    readonly id: number

    /**
     * 
     * @type {AddAdditionalDiscountRequestBody}
     * @memberof DealsApiPostAdditionalDiscount
     */
    readonly AddAdditionalDiscountRequestBody?: AddAdditionalDiscountRequestBody
}

/**
 * Request parameters for postInstallment operation in DealsApi.
 * @export
 * @interface DealsApiPostInstallmentRequest
 */
export interface DealsApiPostInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiPostInstallment
     */
    readonly id: number

    /**
     * 
     * @type {AddInstallmentRequestBody}
     * @memberof DealsApiPostInstallment
     */
    readonly AddInstallmentRequestBody?: AddInstallmentRequestBody
}

/**
 * Request parameters for searchDeals operation in DealsApi.
 * @export
 * @interface DealsApiSearchDealsRequest
 */
export interface DealsApiSearchDealsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof DealsApiSearchDeals
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'custom_fields' | 'notes' | 'title'}
     * @memberof DealsApiSearchDeals
     */
    readonly fields?: 'custom_fields' | 'notes' | 'title'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof DealsApiSearchDeals
     */
    readonly exact_match?: boolean

    /**
     * Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly person_id?: number

    /**
     * Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly organization_id?: number

    /**
     * Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @type {'open' | 'won' | 'lost'}
     * @memberof DealsApiSearchDeals
     */
    readonly status?: 'open' | 'won' | 'lost'

    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'deal.cc_email'}
     * @memberof DealsApiSearchDeals
     */
    readonly include_fields?: 'deal.cc_email'

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly limit?: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiSearchDeals
     */
    readonly cursor?: string
}

/**
 * Request parameters for updateAdditionalDiscount operation in DealsApi.
 * @export
 * @interface DealsApiUpdateAdditionalDiscountRequest
 */
export interface DealsApiUpdateAdditionalDiscountRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateAdditionalDiscount
     */
    readonly id: number

    /**
     * The ID of the discount
     * @type {string}
     * @memberof DealsApiUpdateAdditionalDiscount
     */
    readonly discount_id: string

    /**
     * 
     * @type {UpdateAdditionalDiscountRequestBody}
     * @memberof DealsApiUpdateAdditionalDiscount
     */
    readonly UpdateAdditionalDiscountRequestBody?: UpdateAdditionalDiscountRequestBody
}

/**
 * Request parameters for updateDeal operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealRequest
 */
export interface DealsApiUpdateDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDeal
     */
    readonly id: number

    /**
     * 
     * @type {UpdateDealRequest}
     * @memberof DealsApiUpdateDeal
     */
    readonly UpdateDealRequest?: UpdateDealRequest
}

/**
 * Request parameters for updateDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealProductRequest
 */
export interface DealsApiUpdateDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly id: number

    /**
     * The ID of the deal-product (the ID of the product attached to the deal)
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly product_attachment_id: number

    /**
     * 
     * @type {UpdateDealProductRequest}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly UpdateDealProductRequest?: UpdateDealProductRequest
}

/**
 * Request parameters for updateInstallment operation in DealsApi.
 * @export
 * @interface DealsApiUpdateInstallmentRequest
 */
export interface DealsApiUpdateInstallmentRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateInstallment
     */
    readonly id: number

    /**
     * The ID of the installment
     * @type {number}
     * @memberof DealsApiUpdateInstallment
     */
    readonly installment_id: number

    /**
     * 
     * @type {UpdateInstallmentRequestBody}
     * @memberof DealsApiUpdateInstallment
     */
    readonly UpdateInstallmentRequestBody?: UpdateInstallmentRequestBody
}

/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
export class DealsApi extends BaseAPI {
    /**
     * Adds a new deal.
     * @summary Add a new deal
     * @param {DealsApiAddDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDeal(requestParameters: DealsApiAddDealRequest = {}, ) {
        return DealsApiFp(this.configuration).addDeal(requestParameters.AddDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a user as a follower to the deal.
     * @summary Add a follower to a deal
     * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDealFollower(requestParameters: DealsApiAddDealFollowerRequest, ) {
        return DealsApiFp(this.configuration).addDealFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDealProduct(requestParameters: DealsApiAddDealProductRequest, ) {
        return DealsApiFp(this.configuration).addDealProduct(requestParameters.id, requestParameters.AddDealProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds multiple products to a deal in a single request. Maximum of 100 products allowed per request.
     * @summary Add multiple products to a deal
     * @param {DealsApiAddManyDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addManyDealProducts(requestParameters: DealsApiAddManyDealProductsRequest, ) {
        return DealsApiFp(this.configuration).addManyDealProducts(requestParameters.id, requestParameters.CreateManyDealProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates a conversion of a deal to a lead. The return value is an ID of a job that was assigned to perform the conversion. Related entities (notes, files, emails, activities, ...) are transferred during the process to the target entity. There are exceptions for entities like invoices or history that are not transferred and remain linked to the original deal. If the conversion is successful, the deal is marked as deleted. To retrieve the created entity ID and the result of the conversion, call the <a href=\"https://developers.pipedrive.com/docs/api/v1/Deals#getDealConversionStatus\">/api/v2/deals/{deal_id}/convert/status/{conversion_id}</a> endpoint.
     * @summary Convert a deal to a lead (BETA)
     * @param {DealsApiConvertDealToLeadRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public convertDealToLead(requestParameters: DealsApiConvertDealToLeadRequest, ) {
        return DealsApiFp(this.configuration).convertDealToLead(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a discount from a deal, changing the deal value if the deal has one-time products attached.
     * @summary Delete a discount from a deal
     * @param {DealsApiDeleteAdditionalDiscountRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteAdditionalDiscount(requestParameters: DealsApiDeleteAdditionalDiscountRequest, ) {
        return DealsApiFp(this.configuration).deleteAdditionalDiscount(requestParameters.id, requestParameters.discount_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDeal(requestParameters: DealsApiDeleteDealRequest, ) {
        return DealsApiFp(this.configuration).deleteDeal(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a user follower from the deal.
     * @summary Delete a follower from a deal
     * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest, ) {
        return DealsApiFp(this.configuration).deleteDealFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * @summary Delete an attached product from a deal
     * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest, ) {
        return DealsApiFp(this.configuration).deleteDealProduct(requestParameters.id, requestParameters.product_attachment_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an installment from a deal.  Only available in Growth and above plans. 
     * @summary Delete an installment from a deal
     * @param {DealsApiDeleteInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteInstallment(requestParameters: DealsApiDeleteInstallmentRequest, ) {
        return DealsApiFp(this.configuration).deleteInstallment(requestParameters.id, requestParameters.installment_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes multiple products from a deal. If no product IDs are specified, up to 100 products will be removed from the deal. A maximum of 100 product IDs can be provided per request.
     * @summary Delete many products from a deal
     * @param {DealsApiDeleteManyDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteManyDealProducts(requestParameters: DealsApiDeleteManyDealProductsRequest, ) {
        return DealsApiFp(this.configuration).deleteManyDealProducts(requestParameters.id, requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists discounts attached to a deal.
     * @summary List discounts added to a deal
     * @param {DealsApiGetAdditionalDiscountsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getAdditionalDiscounts(requestParameters: DealsApiGetAdditionalDiscountsRequest, ) {
        return DealsApiFp(this.configuration).getAdditionalDiscounts(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all archived deals.
     * @summary Get all archived deals
     * @param {DealsApiGetArchivedDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getArchivedDeals(requestParameters: DealsApiGetArchivedDealsRequest = {}, ) {
        return DealsApiFp(this.configuration).getArchivedDeals(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.person_id, requestParameters.org_id, requestParameters.pipeline_id, requestParameters.stage_id, requestParameters.status, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific deal.
     * @summary Get details of a deal
     * @param {DealsApiGetDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDeal(requestParameters: DealsApiGetDealRequest, ) {
        return DealsApiFp(this.configuration).getDeal(requestParameters.id, requestParameters.include_fields, requestParameters.custom_fields, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the conversion. Status is always present and its value (not_started, running, completed, failed, rejected) represents the current state of the conversion. Lead ID is only present if the conversion was successfully finished. This data is only temporary and removed after a few days.
     * @summary Get Deal conversion status (BETA)
     * @param {DealsApiGetDealConversionStatusRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealConversionStatus(requestParameters: DealsApiGetDealConversionStatusRequest, ) {
        return DealsApiFp(this.configuration).getDealConversionStatus(requestParameters.id, requestParameters.conversion_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists users who are following the deal.
     * @summary List followers of a deal
     * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest, ) {
        return DealsApiFp(this.configuration).getDealFollowers(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists changelogs about users have followed the deal.
     * @summary List followers changelog of a deal
     * @param {DealsApiGetDealFollowersChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealFollowersChangelog(requestParameters: DealsApiGetDealFollowersChangelogRequest, ) {
        return DealsApiFp(this.configuration).getDealFollowersChangelog(requestParameters.id, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealProducts(requestParameters: DealsApiGetDealProductsRequest, ) {
        return DealsApiFp(this.configuration).getDealProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all not archived deals.
     * @summary Get all deals
     * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDeals(requestParameters: DealsApiGetDealsRequest = {}, ) {
        return DealsApiFp(this.configuration).getDeals(requestParameters.filter_id, requestParameters.ids, requestParameters.owner_id, requestParameters.person_id, requestParameters.org_id, requestParameters.pipeline_id, requestParameters.stage_id, requestParameters.status, requestParameters.updated_since, requestParameters.updated_until, requestParameters.sort_by, requestParameters.sort_direction, requestParameters.include_fields, requestParameters.custom_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about products attached to deals
     * @summary Get deal products of several deals
     * @param {DealsApiGetDealsProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealsProducts(requestParameters: DealsApiGetDealsProductsRequest, ) {
        return DealsApiFp(this.configuration).getDealsProducts(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists installments attached to a list of deals.  Only available in Growth and above plans. 
     * @summary List installments added to a list of deals
     * @param {DealsApiGetInstallmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getInstallments(requestParameters: DealsApiGetInstallmentsRequest, ) {
        return DealsApiFp(this.configuration).getInstallments(requestParameters.deal_ids, requestParameters.cursor, requestParameters.limit, requestParameters.sort_by, requestParameters.sort_direction, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a discount to a deal changing, the deal value if the deal has one-time products attached.
     * @summary Add a discount to a deal
     * @param {DealsApiPostAdditionalDiscountRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public postAdditionalDiscount(requestParameters: DealsApiPostAdditionalDiscountRequest, ) {
        return DealsApiFp(this.configuration).postAdditionalDiscount(requestParameters.id, requestParameters.AddAdditionalDiscountRequestBody, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an installment to a deal.  An installment can only be added if the deal includes at least one one-time product.  If the deal contains at least one recurring product, adding installments is not allowed.  Only available in Growth and above plans. 
     * @summary Add an installment to a deal
     * @param {DealsApiPostInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public postInstallment(requestParameters: DealsApiPostInstallmentRequest, ) {
        return DealsApiFp(this.configuration).postInstallment(requestParameters.id, requestParameters.AddInstallmentRequestBody, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public searchDeals(requestParameters: DealsApiSearchDealsRequest, ) {
        return DealsApiFp(this.configuration).searchDeals(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.status, requestParameters.include_fields, requestParameters.limit, requestParameters.cursor, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a discount added to a deal, changing the deal value if the deal has one-time products attached.
     * @summary Update a discount added to a deal
     * @param {DealsApiUpdateAdditionalDiscountRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateAdditionalDiscount(requestParameters: DealsApiUpdateAdditionalDiscountRequest, ) {
        return DealsApiFp(this.configuration).updateAdditionalDiscount(requestParameters.id, requestParameters.discount_id, requestParameters.UpdateAdditionalDiscountRequestBody, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a deal.
     * @summary Update a deal
     * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateDeal(requestParameters: DealsApiUpdateDealRequest, ) {
        return DealsApiFp(this.configuration).updateDeal(requestParameters.id, requestParameters.UpdateDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest, ) {
        return DealsApiFp(this.configuration).updateDealProduct(requestParameters.id, requestParameters.product_attachment_id, requestParameters.UpdateDealProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an installment added to a deal.  Only available in Growth and above plans. 
     * @summary Update an installment added to a deal
     * @param {DealsApiUpdateInstallmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateInstallment(requestParameters: DealsApiUpdateInstallmentRequest, ) {
        return DealsApiFp(this.configuration).updateInstallment(requestParameters.id, requestParameters.installment_id, requestParameters.UpdateInstallmentRequestBody, ).then((request) => request(this.axios, this.basePath));
    }
}
