/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetRecentsResponse } from '../models';
/**
 * RecentsApi - axios parameter creator
 * @export
 */
export const RecentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {string} since_timestamp The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
         * @param {'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'} [items] Multiple selection of item types to include in the query (optional)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRecents: async (since_timestamp: string, items?: 'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user', start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'since_timestamp' is not null or undefined
            assertParamExists('getRecents', 'since_timestamp', since_timestamp)
            const localVarPath = `/recents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read", "search:read"], configuration)

            if (since_timestamp !== undefined) {
                localVarQueryParameter['since_timestamp'] = since_timestamp;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * RecentsApi - functional programming interface
 * @export
 */
export const RecentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {string} since_timestamp The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
         * @param {'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'} [items] Multiple selection of item types to include in the query (optional)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getRecents(since_timestamp: string, items?: 'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user', start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRecentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecents(since_timestamp, items, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecentsApi - factory interface
 * @export
 */
export const RecentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecentsApiFp(configuration)
    return {
        /**
         * Returns data about all recent changes occurred after the given timestamp.
         * @summary Get recents
         * @param {RecentsApiGetRecentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRecents(requestParameters: RecentsApiGetRecentsRequest, ): Promise<GetRecentsResponse> {
            return localVarFp.getRecents(requestParameters.since_timestamp, requestParameters.items, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRecents operation in RecentsApi.
 * @export
 * @interface RecentsApiGetRecentsRequest
 */
export interface RecentsApiGetRecentsRequest {
    /**
     * The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
     * @type {string}
     * @memberof RecentsApiGetRecents
     */
    readonly since_timestamp: string

    /**
     * Multiple selection of item types to include in the query (optional)
     * @type {'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'}
     * @memberof RecentsApiGetRecents
     */
    readonly items?: 'activity' | 'activityType' | 'deal' | 'file' | 'filter' | 'note' | 'person' | 'organization' | 'pipeline' | 'product' | 'stage' | 'user'

    /**
     * Pagination start
     * @type {number}
     * @memberof RecentsApiGetRecents
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof RecentsApiGetRecents
     */
    readonly limit?: number
}

/**
 * RecentsApi - object-oriented interface
 * @export
 * @class RecentsApi
 * @extends {BaseAPI}
 */
export class RecentsApi extends BaseAPI {
    /**
     * Returns data about all recent changes occurred after the given timestamp.
     * @summary Get recents
     * @param {RecentsApiGetRecentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RecentsApi
     */
    public getRecents(requestParameters: RecentsApiGetRecentsRequest, ) {
        return RecentsApiFp(this.configuration).getRecents(requestParameters.since_timestamp, requestParameters.items, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }
}
