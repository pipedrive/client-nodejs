/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFieldRequest } from '../models';
// @ts-ignore
import { DeleteFieldsResponse } from '../models';
// @ts-ignore
import { DeleteResponse } from '../models';
// @ts-ignore
import { GetFieldResponse } from '../models';
// @ts-ignore
import { GetFieldsResponse } from '../models';
// @ts-ignore
import { UpdateFieldRequest } from '../models';
/**
 * DealFieldsApi - axios parameter creator
 * @export
 */
export const DealFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {CreateFieldRequest} [CreateFieldRequest] 

         * @throws {RequiredError}
         */
        addDealField: async (CreateFieldRequest?: CreateFieldRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(CreateFieldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        deleteDealField: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealField', 'id', id)
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        deleteDealFields: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteDealFields', 'ids', ids)
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        getDealField: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealField', 'id', id)
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealFields: async (start?: number, limit?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/dealFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest] 

         * @throws {RequiredError}
         */
        updateDealField: async (id: number, UpdateFieldRequest?: UpdateFieldRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDealField', 'id', id)
            const localVarPath = `/dealFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateFieldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * DealFieldsApi - functional programming interface
 * @export
 */
export const DealFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DealFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {CreateFieldRequest} [CreateFieldRequest] 

         * @throws {RequiredError}
         */
        async addDealField(CreateFieldRequest?: CreateFieldRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealField(CreateFieldRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        async deleteDealField(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealField(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        async deleteDealFields(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealFields(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        async getDealField(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealField(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getDealFields(start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealFields(start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest] 

         * @throws {RequiredError}
         */
        async updateDealField(id: number, UpdateFieldRequest?: UpdateFieldRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDealField(id, UpdateFieldRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DealFieldsApi - factory interface
 * @export
 */
export const DealFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DealFieldsApiFp(configuration)
    return {
        /**
         * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new deal field
         * @param {DealFieldsApiAddDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealField(requestParameters: DealFieldsApiAddDealFieldRequest = {}, ): Promise<GetFieldResponse> {
            return localVarFp.addDealField(requestParameters.CreateFieldRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete a deal field
         * @param {DealFieldsApiDeleteDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealField(requestParameters: DealFieldsApiDeleteDealFieldRequest, ): Promise<DeleteResponse> {
            return localVarFp.deleteDealField(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple deal fields as deleted.
         * @summary Delete multiple deal fields in bulk
         * @param {DealFieldsApiDeleteDealFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealFields(requestParameters: DealFieldsApiDeleteDealFieldsRequest, ): Promise<DeleteFieldsResponse> {
            return localVarFp.deleteDealFields(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific deal field.
         * @summary Get one deal field
         * @param {DealFieldsApiGetDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealField(requestParameters: DealFieldsApiGetDealFieldRequest, ): Promise<GetFieldResponse> {
            return localVarFp.getDealField(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all deal fields.
         * @summary Get all deal fields
         * @param {DealFieldsApiGetDealFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFields(requestParameters: DealFieldsApiGetDealFieldsRequest = {}, ): Promise<GetFieldsResponse> {
            return localVarFp.getDealFields(requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update a deal field
         * @param {DealFieldsApiUpdateDealFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDealField(requestParameters: DealFieldsApiUpdateDealFieldRequest, ): Promise<GetFieldResponse> {
            return localVarFp.updateDealField(requestParameters.id, requestParameters.UpdateFieldRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDealField operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiAddDealFieldRequest
 */
export interface DealFieldsApiAddDealFieldRequest {
    /**
     * 
     * @type {CreateFieldRequest}
     * @memberof DealFieldsApiAddDealField
     */
    readonly CreateFieldRequest?: CreateFieldRequest
}

/**
 * Request parameters for deleteDealField operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiDeleteDealFieldRequest
 */
export interface DealFieldsApiDeleteDealFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof DealFieldsApiDeleteDealField
     */
    readonly id: number
}

/**
 * Request parameters for deleteDealFields operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiDeleteDealFieldsRequest
 */
export interface DealFieldsApiDeleteDealFieldsRequest {
    /**
     * The comma-separated field IDs to delete
     * @type {string}
     * @memberof DealFieldsApiDeleteDealFields
     */
    readonly ids: string
}

/**
 * Request parameters for getDealField operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiGetDealFieldRequest
 */
export interface DealFieldsApiGetDealFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof DealFieldsApiGetDealField
     */
    readonly id: number
}

/**
 * Request parameters for getDealFields operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiGetDealFieldsRequest
 */
export interface DealFieldsApiGetDealFieldsRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof DealFieldsApiGetDealFields
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealFieldsApiGetDealFields
     */
    readonly limit?: number
}

/**
 * Request parameters for updateDealField operation in DealFieldsApi.
 * @export
 * @interface DealFieldsApiUpdateDealFieldRequest
 */
export interface DealFieldsApiUpdateDealFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof DealFieldsApiUpdateDealField
     */
    readonly id: number

    /**
     * 
     * @type {UpdateFieldRequest}
     * @memberof DealFieldsApiUpdateDealField
     */
    readonly UpdateFieldRequest?: UpdateFieldRequest
}

/**
 * DealFieldsApi - object-oriented interface
 * @export
 * @class DealFieldsApi
 * @extends {BaseAPI}
 */
export class DealFieldsApi extends BaseAPI {
    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new deal field
     * @param {DealFieldsApiAddDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public addDealField(requestParameters: DealFieldsApiAddDealFieldRequest = {}, ) {
        return DealFieldsApiFp(this.configuration).addDealField(requestParameters.CreateFieldRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a deal field
     * @param {DealFieldsApiDeleteDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public deleteDealField(requestParameters: DealFieldsApiDeleteDealFieldRequest, ) {
        return DealFieldsApiFp(this.configuration).deleteDealField(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple deal fields as deleted.
     * @summary Delete multiple deal fields in bulk
     * @param {DealFieldsApiDeleteDealFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public deleteDealFields(requestParameters: DealFieldsApiDeleteDealFieldsRequest, ) {
        return DealFieldsApiFp(this.configuration).deleteDealFields(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific deal field.
     * @summary Get one deal field
     * @param {DealFieldsApiGetDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public getDealField(requestParameters: DealFieldsApiGetDealFieldRequest, ) {
        return DealFieldsApiFp(this.configuration).getDealField(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all deal fields.
     * @summary Get all deal fields
     * @param {DealFieldsApiGetDealFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public getDealFields(requestParameters: DealFieldsApiGetDealFieldsRequest = {}, ) {
        return DealFieldsApiFp(this.configuration).getDealFields(requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a deal field
     * @param {DealFieldsApiUpdateDealFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealFieldsApi
     */
    public updateDealField(requestParameters: DealFieldsApiUpdateDealFieldRequest, ) {
        return DealFieldsApiFp(this.configuration).updateDealField(requestParameters.id, requestParameters.UpdateFieldRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
