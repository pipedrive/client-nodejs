/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTeamRequest1 } from '../models';
// @ts-ignore
import { AddTeamUserRequest } from '../models';
// @ts-ignore
import { DeleteTeamUserRequest } from '../models';
// @ts-ignore
import { FailResponse } from '../models';
// @ts-ignore
import { GetTeamResponse } from '../models';
// @ts-ignore
import { GetTeamsResponse } from '../models';
// @ts-ignore
import { UpdateTeamRequest } from '../models';
// @ts-ignore
import { UserIds } from '../models';
/**
 * LegacyTeamsApi - axios parameter creator
 * @export
 */
export const LegacyTeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {AddTeamRequest1} [AddTeamRequest1] 
         * @deprecated
         * @throws {RequiredError}
         */
        addTeam: async (AddTeamRequest1?: AddTeamRequest1, ): Promise<RequestArgs> => {
            const localVarPath = `/legacyTeams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddTeamRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {number} id The ID of the team
         * @param {AddTeamUserRequest} [AddTeamUserRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        addTeamUser: async (id: number, AddTeamUserRequest?: AddTeamUserRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addTeamUser', 'id', id)
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddTeamUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {number} id The ID of the team
         * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        deleteTeamUser: async (id: number, DeleteTeamUserRequest?: DeleteTeamUserRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeamUser', 'id', id)
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(DeleteTeamUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {number} id The ID of the team
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeam: async (id: number, skip_users?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeam', 'id', id)
            const localVarPath = `/legacyTeams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)

            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {number} id The ID of the team
         * @deprecated
         * @throws {RequiredError}
         */
        getTeamUsers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeamUsers', 'id', id)
            const localVarPath = `/legacyTeams/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getTeams: async (order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1, ): Promise<RequestArgs> => {
            const localVarPath = `/legacyTeams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)

            if (order_by !== undefined) {
                localVarQueryParameter['order_by'] = order_by;
            }

            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {number} id The ID of the user
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        getUserTeams: async (id: number, order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserTeams', 'id', id)
            const localVarPath = `/legacyTeams/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)

            if (order_by !== undefined) {
                localVarQueryParameter['order_by'] = order_by;
            }

            if (skip_users !== undefined) {
                localVarQueryParameter['skip_users'] = skip_users;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {number} id The ID of the team
         * @param {UpdateTeamRequest} [UpdateTeamRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        updateTeam: async (id: number, UpdateTeamRequest?: UpdateTeamRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTeam', 'id', id)
            const localVarPath = `/legacyTeams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTeamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LegacyTeamsApi - functional programming interface
 * @export
 */
export const LegacyTeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegacyTeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {AddTeamRequest1} [AddTeamRequest1] 
         * @deprecated
         * @throws {RequiredError}
         */
        async addTeam(AddTeamRequest1?: AddTeamRequest1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeam(AddTeamRequest1, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {number} id The ID of the team
         * @param {AddTeamUserRequest} [AddTeamUserRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        async addTeamUser(id: number, AddTeamUserRequest?: AddTeamUserRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeamUser(id, AddTeamUserRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {number} id The ID of the team
         * @param {DeleteTeamUserRequest} [DeleteTeamUserRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteTeamUser(id: number, DeleteTeamUserRequest?: DeleteTeamUserRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamUser(id, DeleteTeamUserRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {number} id The ID of the team
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        async getTeam(id: number, skip_users?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(id, skip_users, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {number} id The ID of the team
         * @deprecated
         * @throws {RequiredError}
         */
        async getTeamUsers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamUsers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        async getTeams(order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(order_by, skip_users, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {number} id The ID of the user
         * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [order_by] The field name to sort returned teams by
         * @param {0 | 1} [skip_users] When enabled, the teams will not include IDs of member users
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserTeams(id: number, order_by?: 'id' | 'name' | 'manager_id' | 'active_flag', skip_users?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTeams(id, order_by, skip_users, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {number} id The ID of the team
         * @param {UpdateTeamRequest} [UpdateTeamRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        async updateTeam(id: number, UpdateTeamRequest?: UpdateTeamRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(id, UpdateTeamRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LegacyTeamsApi - factory interface
 * @export
 */
export const LegacyTeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegacyTeamsApiFp(configuration)
    return {
        /**
         * Adds a new team to the company and returns the created object.
         * @summary Add a new team
         * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addTeam(requestParameters: LegacyTeamsApiAddTeamRequest = {}, ): Promise<GetTeamResponse> {
            return localVarFp.addTeam(requestParameters.AddTeamRequest1, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds users to an existing team.
         * @summary Add users to a team
         * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addTeamUser(requestParameters: LegacyTeamsApiAddTeamUserRequest, ): Promise<UserIds> {
            return localVarFp.addTeamUser(requestParameters.id, requestParameters.AddTeamUserRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes users from an existing team.
         * @summary Delete users from a team
         * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteTeamUser(requestParameters: LegacyTeamsApiDeleteTeamUserRequest, ): Promise<UserIds> {
            return localVarFp.deleteTeamUser(requestParameters.id, requestParameters.DeleteTeamUserRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific team.
         * @summary Get a single team
         * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeam(requestParameters: LegacyTeamsApiGetTeamRequest, ): Promise<GetTeamResponse> {
            return localVarFp.getTeam(requestParameters.id, requestParameters.skip_users, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all user IDs within a team.
         * @summary Get all users in a team
         * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeamUsers(requestParameters: LegacyTeamsApiGetTeamUsersRequest, ): Promise<UserIds> {
            return localVarFp.getTeamUsers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about teams within the company.
         * @summary Get all teams
         * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getTeams(requestParameters: LegacyTeamsApiGetTeamsRequest = {}, ): Promise<GetTeamsResponse> {
            return localVarFp.getTeams(requestParameters.order_by, requestParameters.skip_users, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all teams which have the specified user as a member.
         * @summary Get all teams of a user
         * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserTeams(requestParameters: LegacyTeamsApiGetUserTeamsRequest, ): Promise<GetTeamsResponse> {
            return localVarFp.getUserTeams(requestParameters.id, requestParameters.order_by, requestParameters.skip_users, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing team and returns the updated object.
         * @summary Update a team
         * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        updateTeam(requestParameters: LegacyTeamsApiUpdateTeamRequest, ): Promise<GetTeamResponse> {
            return localVarFp.updateTeam(requestParameters.id, requestParameters.UpdateTeamRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiAddTeamRequest
 */
export interface LegacyTeamsApiAddTeamRequest {
    /**
     * 
     * @type {AddTeamRequest1}
     * @memberof LegacyTeamsApiAddTeam
     */
    readonly AddTeamRequest1?: AddTeamRequest1
}

/**
 * Request parameters for addTeamUser operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiAddTeamUserRequest
 */
export interface LegacyTeamsApiAddTeamUserRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiAddTeamUser
     */
    readonly id: number

    /**
     * 
     * @type {AddTeamUserRequest}
     * @memberof LegacyTeamsApiAddTeamUser
     */
    readonly AddTeamUserRequest?: AddTeamUserRequest
}

/**
 * Request parameters for deleteTeamUser operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiDeleteTeamUserRequest
 */
export interface LegacyTeamsApiDeleteTeamUserRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiDeleteTeamUser
     */
    readonly id: number

    /**
     * 
     * @type {DeleteTeamUserRequest}
     * @memberof LegacyTeamsApiDeleteTeamUser
     */
    readonly DeleteTeamUserRequest?: DeleteTeamUserRequest
}

/**
 * Request parameters for getTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamRequest
 */
export interface LegacyTeamsApiGetTeamRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiGetTeam
     */
    readonly id: number

    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetTeam
     */
    readonly skip_users?: 0 | 1
}

/**
 * Request parameters for getTeamUsers operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamUsersRequest
 */
export interface LegacyTeamsApiGetTeamUsersRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiGetTeamUsers
     */
    readonly id: number
}

/**
 * Request parameters for getTeams operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetTeamsRequest
 */
export interface LegacyTeamsApiGetTeamsRequest {
    /**
     * The field name to sort returned teams by
     * @type {'id' | 'name' | 'manager_id' | 'active_flag'}
     * @memberof LegacyTeamsApiGetTeams
     */
    readonly order_by?: 'id' | 'name' | 'manager_id' | 'active_flag'

    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetTeams
     */
    readonly skip_users?: 0 | 1
}

/**
 * Request parameters for getUserTeams operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiGetUserTeamsRequest
 */
export interface LegacyTeamsApiGetUserTeamsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly id: number

    /**
     * The field name to sort returned teams by
     * @type {'id' | 'name' | 'manager_id' | 'active_flag'}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly order_by?: 'id' | 'name' | 'manager_id' | 'active_flag'

    /**
     * When enabled, the teams will not include IDs of member users
     * @type {0 | 1}
     * @memberof LegacyTeamsApiGetUserTeams
     */
    readonly skip_users?: 0 | 1
}

/**
 * Request parameters for updateTeam operation in LegacyTeamsApi.
 * @export
 * @interface LegacyTeamsApiUpdateTeamRequest
 */
export interface LegacyTeamsApiUpdateTeamRequest {
    /**
     * The ID of the team
     * @type {number}
     * @memberof LegacyTeamsApiUpdateTeam
     */
    readonly id: number

    /**
     * 
     * @type {UpdateTeamRequest}
     * @memberof LegacyTeamsApiUpdateTeam
     */
    readonly UpdateTeamRequest?: UpdateTeamRequest
}

/**
 * LegacyTeamsApi - object-oriented interface
 * @export
 * @class LegacyTeamsApi
 * @extends {BaseAPI}
 */
export class LegacyTeamsApi extends BaseAPI {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {LegacyTeamsApiAddTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public addTeam(requestParameters: LegacyTeamsApiAddTeamRequest = {}, ) {
        return LegacyTeamsApiFp(this.configuration).addTeam(requestParameters.AddTeamRequest1, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {LegacyTeamsApiAddTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public addTeamUser(requestParameters: LegacyTeamsApiAddTeamUserRequest, ) {
        return LegacyTeamsApiFp(this.configuration).addTeamUser(requestParameters.id, requestParameters.AddTeamUserRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {LegacyTeamsApiDeleteTeamUserRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public deleteTeamUser(requestParameters: LegacyTeamsApiDeleteTeamUserRequest, ) {
        return LegacyTeamsApiFp(this.configuration).deleteTeamUser(requestParameters.id, requestParameters.DeleteTeamUserRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {LegacyTeamsApiGetTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public getTeam(requestParameters: LegacyTeamsApiGetTeamRequest, ) {
        return LegacyTeamsApiFp(this.configuration).getTeam(requestParameters.id, requestParameters.skip_users, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {LegacyTeamsApiGetTeamUsersRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public getTeamUsers(requestParameters: LegacyTeamsApiGetTeamUsersRequest, ) {
        return LegacyTeamsApiFp(this.configuration).getTeamUsers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {LegacyTeamsApiGetTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public getTeams(requestParameters: LegacyTeamsApiGetTeamsRequest = {}, ) {
        return LegacyTeamsApiFp(this.configuration).getTeams(requestParameters.order_by, requestParameters.skip_users, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {LegacyTeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public getUserTeams(requestParameters: LegacyTeamsApiGetUserTeamsRequest, ) {
        return LegacyTeamsApiFp(this.configuration).getUserTeams(requestParameters.id, requestParameters.order_by, requestParameters.skip_users, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {LegacyTeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApi
     */
    public updateTeam(requestParameters: LegacyTeamsApiUpdateTeamRequest, ) {
        return LegacyTeamsApiFp(this.configuration).updateTeam(requestParameters.id, requestParameters.UpdateTeamRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
