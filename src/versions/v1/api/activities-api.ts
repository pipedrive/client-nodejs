/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddActivityRequest } from '../models';
// @ts-ignore
import { AddActivityResponse } from '../models';
// @ts-ignore
import { DeleteActivitiesResponse } from '../models';
// @ts-ignore
import { DeleteActivityResponse } from '../models';
// @ts-ignore
import { FailResponse } from '../models';
// @ts-ignore
import { GetActivitiesCollectionResponse } from '../models';
// @ts-ignore
import { GetActivitiesResponse } from '../models';
// @ts-ignore
import { GetActivityResponse } from '../models';
// @ts-ignore
import { UpdateActivityRequest } from '../models';
// @ts-ignore
import { UpdateActivityResponse } from '../models';
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {AddActivityRequest} [AddActivityRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        addActivity: async (AddActivityRequest?: AddActivityRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddActivityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#deleteActivity\" target=\"_blank\" rel=\"noopener noreferrer\">DELETE /api/v2/activities/{id}</a> instead.
         * @summary Delete multiple activities in bulk
         * @param {string} ids The comma-separated IDs of activities that will be deleted
         * @deprecated
         * @throws {RequiredError}
         */
        deleteActivities: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteActivities', 'ids', ids)
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity
         * @deprecated
         * @throws {RequiredError}
         */
        deleteActivity: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
         * @param {number} [filter_id] The ID of the filter to use (will narrow down results if used together with &#x60;user_id&#x60; parameter)
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [start] For pagination, the position that represents the first result for the page
         * @param {string} [start_date] Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {string} [end_date] Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both done and not done activities.
         * @deprecated
         * @throws {RequiredError}
         */
        getActivities: async (user_id?: number, filter_id?: number, type?: string, limit?: number, start?: number, start_date?: string, end_date?: string, done?: 0 | 1, ): Promise<RequestArgs> => {
            const localVarPath = `/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date as any instanceof Date) ?
                    (start_date as any).toISOString().substr(0,10) :
                    start_date;
            }

            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date as any instanceof Date) ?
                    (end_date as any).toISOString().substr(0,10) :
                    end_date;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all activities. Please note that only global admins (those with global permissions) can access this endpoint. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#getActivities\" target=\"_blank\" rel=\"noopener noreferrer\">GET /api/v2/activities</a> instead.
         * @summary Get all activities collection
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, all activities are returned.
         * @param {boolean} [done] Whether the activity is done or not. &#x60;false&#x60; &#x3D; Not done, &#x60;true&#x60; &#x3D; Done. If omitted, returns both done and not done activities.
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @deprecated
         * @throws {RequiredError}
         */
        getActivitiesCollection: async (cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, done?: boolean, type?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/activities/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity
         * @deprecated
         * @throws {RequiredError}
         */
        getActivity: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {UpdateActivityRequest} [UpdateActivityRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        updateActivity: async (id: number, UpdateActivityRequest?: UpdateActivityRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateActivity', 'id', id)
            const localVarPath = `/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateActivityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {AddActivityRequest} [AddActivityRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        async addActivity(AddActivityRequest?: AddActivityRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addActivity(AddActivityRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#deleteActivity\" target=\"_blank\" rel=\"noopener noreferrer\">DELETE /api/v2/activities/{id}</a> instead.
         * @summary Delete multiple activities in bulk
         * @param {string} ids The comma-separated IDs of activities that will be deleted
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteActivities(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteActivitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivities(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {number} id The ID of the activity
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteActivity(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteActivity(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
         * @param {number} [filter_id] The ID of the filter to use (will narrow down results if used together with &#x60;user_id&#x60; parameter)
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [start] For pagination, the position that represents the first result for the page
         * @param {string} [start_date] Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {string} [end_date] Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both done and not done activities.
         * @deprecated
         * @throws {RequiredError}
         */
        async getActivities(user_id?: number, filter_id?: number, type?: string, limit?: number, start?: number, start_date?: string, end_date?: string, done?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivities(user_id, filter_id, type, limit, start, start_date, end_date, done, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all activities. Please note that only global admins (those with global permissions) can access this endpoint. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#getActivities\" target=\"_blank\" rel=\"noopener noreferrer\">GET /api/v2/activities</a> instead.
         * @summary Get all activities collection
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] The ID of the user whose activities will be fetched. If omitted, all activities are returned.
         * @param {boolean} [done] Whether the activity is done or not. &#x60;false&#x60; &#x3D; Not done, &#x60;true&#x60; &#x3D; Done. If omitted, returns both done and not done activities.
         * @param {string} [type] The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
         * @deprecated
         * @throws {RequiredError}
         */
        async getActivitiesCollection(cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, done?: boolean, type?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivitiesCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivitiesCollection(cursor, limit, since, until, user_id, done, type, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {number} id The ID of the activity
         * @deprecated
         * @throws {RequiredError}
         */
        async getActivity(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivity(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {number} id The ID of the activity
         * @param {UpdateActivityRequest} [UpdateActivityRequest] 
         * @deprecated
         * @throws {RequiredError}
         */
        async updateActivity(id: number, UpdateActivityRequest?: UpdateActivityRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateActivity(id, UpdateActivityRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivitiesApiFp(configuration)
    return {
        /**
         * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Add an activity
         * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        addActivity(requestParameters: ActivitiesApiAddActivityRequest = {}, ): Promise<AddActivityResponse> {
            return localVarFp.addActivity(requestParameters.AddActivityRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#deleteActivity\" target=\"_blank\" rel=\"noopener noreferrer\">DELETE /api/v2/activities/{id}</a> instead.
         * @summary Delete multiple activities in bulk
         * @param {ActivitiesApiDeleteActivitiesRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteActivities(requestParameters: ActivitiesApiDeleteActivitiesRequest, ): Promise<DeleteActivitiesResponse> {
            return localVarFp.deleteActivities(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
         * @summary Delete an activity
         * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest, ): Promise<DeleteActivityResponse> {
            return localVarFp.deleteActivity(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all activities assigned to a particular user.
         * @summary Get all activities assigned to a particular user
         * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getActivities(requestParameters: ActivitiesApiGetActivitiesRequest = {}, ): Promise<GetActivitiesResponse> {
            return localVarFp.getActivities(requestParameters.user_id, requestParameters.filter_id, requestParameters.type, requestParameters.limit, requestParameters.start, requestParameters.start_date, requestParameters.end_date, requestParameters.done, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all activities. Please note that only global admins (those with global permissions) can access this endpoint. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#getActivities\" target=\"_blank\" rel=\"noopener noreferrer\">GET /api/v2/activities</a> instead.
         * @summary Get all activities collection
         * @param {ActivitiesApiGetActivitiesCollectionRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getActivitiesCollection(requestParameters: ActivitiesApiGetActivitiesCollectionRequest = {}, ): Promise<GetActivitiesCollectionResponse> {
            return localVarFp.getActivitiesCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.done, requestParameters.type, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific activity.
         * @summary Get details of an activity
         * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        getActivity(requestParameters: ActivitiesApiGetActivityRequest, ): Promise<GetActivityResponse> {
            return localVarFp.getActivity(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
         * @summary Update an activity
         * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.
         * @deprecated
         * @throws {RequiredError}
         */
        updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest, ): Promise<UpdateActivityResponse> {
            return localVarFp.updateActivity(requestParameters.id, requestParameters.UpdateActivityRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiAddActivityRequest
 */
export interface ActivitiesApiAddActivityRequest {
    /**
     * 
     * @type {AddActivityRequest}
     * @memberof ActivitiesApiAddActivity
     */
    readonly AddActivityRequest?: AddActivityRequest
}

/**
 * Request parameters for deleteActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiDeleteActivitiesRequest
 */
export interface ActivitiesApiDeleteActivitiesRequest {
    /**
     * The comma-separated IDs of activities that will be deleted
     * @type {string}
     * @memberof ActivitiesApiDeleteActivities
     */
    readonly ids: string
}

/**
 * Request parameters for deleteActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiDeleteActivityRequest
 */
export interface ActivitiesApiDeleteActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiDeleteActivity
     */
    readonly id: number
}

/**
 * Request parameters for getActivities operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivitiesRequest
 */
export interface ActivitiesApiGetActivitiesRequest {
    /**
     * The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly user_id?: number

    /**
     * The ID of the filter to use (will narrow down results if used together with &#x60;user_id&#x60; parameter)
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly filter_id?: number

    /**
     * The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly type?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly limit?: number

    /**
     * For pagination, the position that represents the first result for the page
     * @type {number}
     * @memberof ActivitiesApiGetActivities
     */
    readonly start?: number

    /**
     * Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly start_date?: string

    /**
     * Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
     * @type {string}
     * @memberof ActivitiesApiGetActivities
     */
    readonly end_date?: string

    /**
     * Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both done and not done activities.
     * @type {0 | 1}
     * @memberof ActivitiesApiGetActivities
     */
    readonly done?: 0 | 1
}

/**
 * Request parameters for getActivitiesCollection operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivitiesCollectionRequest
 */
export interface ActivitiesApiGetActivitiesCollectionRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly limit?: number

    /**
     * The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly since?: string

    /**
     * The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly until?: string

    /**
     * The ID of the user whose activities will be fetched. If omitted, all activities are returned.
     * @type {number}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly user_id?: number

    /**
     * Whether the activity is done or not. &#x60;false&#x60; &#x3D; Not done, &#x60;true&#x60; &#x3D; Done. If omitted, returns both done and not done activities.
     * @type {boolean}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly done?: boolean

    /**
     * The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the &#x60;key_string&#x60; parameter of ActivityTypes.
     * @type {string}
     * @memberof ActivitiesApiGetActivitiesCollection
     */
    readonly type?: string
}

/**
 * Request parameters for getActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiGetActivityRequest
 */
export interface ActivitiesApiGetActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiGetActivity
     */
    readonly id: number
}

/**
 * Request parameters for updateActivity operation in ActivitiesApi.
 * @export
 * @interface ActivitiesApiUpdateActivityRequest
 */
export interface ActivitiesApiUpdateActivityRequest {
    /**
     * The ID of the activity
     * @type {number}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly id: number

    /**
     * 
     * @type {UpdateActivityRequest}
     * @memberof ActivitiesApiUpdateActivity
     */
    readonly UpdateActivityRequest?: UpdateActivityRequest
}

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * Adds a new activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-activity\" target=\"_blank\" rel=\"noopener noreferrer\">adding an activity</a>. <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
     * @summary Add an activity
     * @param {ActivitiesApiAddActivityRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public addActivity(requestParameters: ActivitiesApiAddActivityRequest = {}, ) {
        return ActivitiesApiFp(this.configuration).addActivity(requestParameters.AddActivityRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#deleteActivity\" target=\"_blank\" rel=\"noopener noreferrer\">DELETE /api/v2/activities/{id}</a> instead.
     * @summary Delete multiple activities in bulk
     * @param {ActivitiesApiDeleteActivitiesRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public deleteActivities(requestParameters: ActivitiesApiDeleteActivitiesRequest, ) {
        return ActivitiesApiFp(this.configuration).deleteActivities(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
     * @summary Delete an activity
     * @param {ActivitiesApiDeleteActivityRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public deleteActivity(requestParameters: ActivitiesApiDeleteActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).deleteActivity(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all activities assigned to a particular user.
     * @summary Get all activities assigned to a particular user
     * @param {ActivitiesApiGetActivitiesRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivities(requestParameters: ActivitiesApiGetActivitiesRequest = {}, ) {
        return ActivitiesApiFp(this.configuration).getActivities(requestParameters.user_id, requestParameters.filter_id, requestParameters.type, requestParameters.limit, requestParameters.start, requestParameters.start_date, requestParameters.end_date, requestParameters.done, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all activities. Please note that only global admins (those with global permissions) can access this endpoint. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. <br>This endpoint has been deprecated. Please use <a href=\"https://developers.pipedrive.com/docs/api/v1/Activities#getActivities\" target=\"_blank\" rel=\"noopener noreferrer\">GET /api/v2/activities</a> instead.
     * @summary Get all activities collection
     * @param {ActivitiesApiGetActivitiesCollectionRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivitiesCollection(requestParameters: ActivitiesApiGetActivitiesCollectionRequest = {}, ) {
        return ActivitiesApiFp(this.configuration).getActivitiesCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.done, requestParameters.type, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific activity.
     * @summary Get details of an activity
     * @param {ActivitiesApiGetActivityRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public getActivity(requestParameters: ActivitiesApiGetActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).getActivity(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an activity. Includes `more_activities_scheduled_in_context` property in response\'s `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). <br /> <br /> ***Starting from 30.09.2024, activity attendees will receive updates only if the activity owner has an active calendar sync***
     * @summary Update an activity
     * @param {ActivitiesApiUpdateActivityRequest} requestParameters Request parameters.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public updateActivity(requestParameters: ActivitiesApiUpdateActivityRequest, ) {
        return ActivitiesApiFp(this.configuration).updateActivity(requestParameters.id, requestParameters.UpdateActivityRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
