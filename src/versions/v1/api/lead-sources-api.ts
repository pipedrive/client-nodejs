/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetLeadsSourceResponse } from '../models';
/**
 * LeadSourcesApi - axios parameter creator
 * @export
 */
export const LeadSourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all lead sources. Please note that the list of lead sources is fixed, it cannot be modified. All leads created through the Pipedrive API will have a lead source `API` assigned. 
         * @summary Get all lead sources

         * @throws {RequiredError}
         */
        getLeadSources: async (): Promise<RequestArgs> => {
            const localVarPath = `/leadSources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["leads:read", "leads:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LeadSourcesApi - functional programming interface
 * @export
 */
export const LeadSourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadSourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all lead sources. Please note that the list of lead sources is fixed, it cannot be modified. All leads created through the Pipedrive API will have a lead source `API` assigned. 
         * @summary Get all lead sources

         * @throws {RequiredError}
         */
        async getLeadSources(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetLeadsSourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeadSources();
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadSourcesApi - factory interface
 * @export
 */
export const LeadSourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadSourcesApiFp(configuration)
    return {
        /**
         * Returns all lead sources. Please note that the list of lead sources is fixed, it cannot be modified. All leads created through the Pipedrive API will have a lead source `API` assigned. 
         * @summary Get all lead sources

         * @throws {RequiredError}
         */
        getLeadSources(): Promise<GetLeadsSourceResponse> {
            return localVarFp.getLeadSources().then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadSourcesApi - object-oriented interface
 * @export
 * @class LeadSourcesApi
 * @extends {BaseAPI}
 */
export class LeadSourcesApi extends BaseAPI {
    /**
     * Returns all lead sources. Please note that the list of lead sources is fixed, it cannot be modified. All leads created through the Pipedrive API will have a lead source `API` assigned. 
     * @summary Get all lead sources

     * @throws {RequiredError}
     * @memberof LeadSourcesApi
     */
    public getLeadSources() {
        return LeadSourcesApiFp(this.configuration).getLeadSources().then((request) => request(this.axios, this.basePath));
    }
}
