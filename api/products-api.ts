/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddProductFollowerRequest } from '../models';
// @ts-ignore
import { AddProductRequest } from '../models';
// @ts-ignore
import { DeleteProductFollowerResponse200 } from '../models';
// @ts-ignore
import { DeleteProductResponse200 } from '../models';
// @ts-ignore
import { GetAssociatedDealsResponse200 } from '../models';
// @ts-ignore
import { GetAssociatedFilesResponse2001 } from '../models';
// @ts-ignore
import { GetProductFollowersResponseSuccess } from '../models';
// @ts-ignore
import { GetProductsResponse200 } from '../models';
// @ts-ignore
import { GetproductResponse200 } from '../models';
// @ts-ignore
import { NewFollowerResponse200 } from '../models';
// @ts-ignore
import { SearchProductsResponse200 } from '../models';
// @ts-ignore
import { UpdateProductRequest } from '../models';
// @ts-ignore
import { UpdateProductResponse200 } from '../models';
// @ts-ignore
import { UserIds } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {AddProductRequest} [AddProductRequest] 

         * @throws {RequiredError}
         */
        addProduct: async (AddProductRequest?: AddProductRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a follower to a product.
         * @summary Add a follower to a product
         * @param {number} id The ID of the product
         * @param {AddProductFollowerRequest} [AddProductFollowerRequest] 

         * @throws {RequiredError}
         */
        addProductFollower: async (id: number, AddProductFollowerRequest?: AddProductFollowerRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addProductFollower', 'id', id)
            const localVarPath = `/products/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddProductFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        deleteProduct: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a follower from a product.
         * @summary Delete a follower from a product
         * @param {number} id The ID of the product
         * @param {number} follower_id The ID of the relationship between the follower and the product

         * @throws {RequiredError}
         */
        deleteProductFollower: async (id: number, follower_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductFollower', 'id', id)
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteProductFollower', 'follower_id', follower_id)
            const localVarPath = `/products/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        getProduct: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about deals that have a product attached to it.
         * @summary Get deals where a product is attached to
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

         * @throws {RequiredError}
         */
        getProductDeals: async (id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductDeals', 'id', id)
            const localVarPath = `/products/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists files associated with a product.
         * @summary List files attached to a product
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field name and sorting mode (&#x60;field_name_1 ASC&#x60; or &#x60;field_name_1 DESC&#x60;). Supported fields: &#x60;update_time&#x60;, &#x60;id&#x60;.

         * @throws {RequiredError}
         */
        getProductFiles: async (id: number, start?: number, limit?: number, sort?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductFiles', 'id', id)
            const localVarPath = `/products/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the followers of a product.
         * @summary List followers of a product
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getProductFollowers: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductFollowers', 'id', id)
            const localVarPath = `/products/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists users permitted to access a product.
         * @summary List permitted users
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        getProductUsers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductUsers', 'id', id)
            const localVarPath = `/products/{id}/permittedUsers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {number} [user_id] If supplied, only products owned by the given user will be returned
         * @param {number} [filter_id] The ID of the filter to use
         * @param {Array<number>} [ids] An array of integers with the IDs of the products that should be returned in the response
         * @param {string} [first_char] If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
         * @param {boolean} [get_summary] If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getProducts: async (user_id?: number, filter_id?: number, ids?: Array<number>, first_char?: string, get_summary?: boolean, start?: number, limit?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (first_char !== undefined) {
                localVarQueryParameter['first_char'] = first_char;
            }

            if (get_summary !== undefined) {
                localVarQueryParameter['get_summary'] = get_summary;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        searchProducts: async (term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchProducts', 'term', term)
            const localVarPath = `/products/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {number} id The ID of the product
         * @param {UpdateProductRequest} [UpdateProductRequest] 

         * @throws {RequiredError}
         */
        updateProduct: async (id: number, UpdateProductRequest?: UpdateProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {AddProductRequest} [AddProductRequest] 

         * @throws {RequiredError}
         */
        async addProduct(AddProductRequest?: AddProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetproductResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(AddProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a follower to a product.
         * @summary Add a follower to a product
         * @param {number} id The ID of the product
         * @param {AddProductFollowerRequest} [AddProductFollowerRequest] 

         * @throws {RequiredError}
         */
        async addProductFollower(id: number, AddProductFollowerRequest?: AddProductFollowerRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<NewFollowerResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductFollower(id, AddProductFollowerRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        async deleteProduct(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a follower from a product.
         * @summary Delete a follower from a product
         * @param {number} id The ID of the product
         * @param {number} follower_id The ID of the relationship between the follower and the product

         * @throws {RequiredError}
         */
        async deleteProductFollower(id: number, follower_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProductFollowerResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductFollower(id, follower_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        async getProduct(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetproductResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about deals that have a product attached to it.
         * @summary Get deals where a product is attached to
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

         * @throws {RequiredError}
         */
        async getProductDeals(id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductDeals(id, start, limit, status, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists files associated with a product.
         * @summary List files attached to a product
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field name and sorting mode (&#x60;field_name_1 ASC&#x60; or &#x60;field_name_1 DESC&#x60;). Supported fields: &#x60;update_time&#x60;, &#x60;id&#x60;.

         * @throws {RequiredError}
         */
        async getProductFiles(id: number, start?: number, limit?: number, sort?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFilesResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductFiles(id, start, limit, sort, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the followers of a product.
         * @summary List followers of a product
         * @param {number} id The ID of the product
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getProductFollowers(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductFollowersResponseSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductFollowers(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists users permitted to access a product.
         * @summary List permitted users
         * @param {number} id The ID of the product

         * @throws {RequiredError}
         */
        async getProductUsers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductUsers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {number} [user_id] If supplied, only products owned by the given user will be returned
         * @param {number} [filter_id] The ID of the filter to use
         * @param {Array<number>} [ids] An array of integers with the IDs of the products that should be returned in the response
         * @param {string} [first_char] If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
         * @param {boolean} [get_summary] If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getProducts(user_id?: number, filter_id?: number, ids?: Array<number>, first_char?: string, get_summary?: boolean, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(user_id, filter_id, ids, first_char, get_summary, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {'product.price'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async searchProducts(term: string, fields?: 'code' | 'custom_fields' | 'name', exact_match?: boolean, include_fields?: 'product.price', start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SearchProductsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProducts(term, fields, exact_match, include_fields, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {number} id The ID of the product
         * @param {UpdateProductRequest} [UpdateProductRequest] 

         * @throws {RequiredError}
         */
        async updateProduct(id: number, UpdateProductRequest?: UpdateProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateProductResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, UpdateProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
         * @summary Add a product
         * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProduct(requestParameters: ProductsApiAddProductRequest = {}, ): Promise<GetproductResponse200> {
            return localVarFp.addProduct(requestParameters.AddProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a follower to a product.
         * @summary Add a follower to a product
         * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest, ): Promise<NewFollowerResponse200> {
            return localVarFp.addProductFollower(requestParameters.id, requestParameters.AddProductFollowerRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a product as deleted. After 30 days, the product will be permanently deleted.
         * @summary Delete a product
         * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: ProductsApiDeleteProductRequest, ): Promise<DeleteProductResponse200> {
            return localVarFp.deleteProduct(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a follower from a product.
         * @summary Delete a follower from a product
         * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest, ): Promise<DeleteProductFollowerResponse200> {
            return localVarFp.deleteProductFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific product.
         * @summary Get one product
         * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProduct(requestParameters: ProductsApiGetProductRequest, ): Promise<GetproductResponse200> {
            return localVarFp.getProduct(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about deals that have a product attached to it.
         * @summary Get deals where a product is attached to
         * @param {ProductsApiGetProductDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductDeals(requestParameters: ProductsApiGetProductDealsRequest, ): Promise<GetAssociatedDealsResponse200> {
            return localVarFp.getProductDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists files associated with a product.
         * @summary List files attached to a product
         * @param {ProductsApiGetProductFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductFiles(requestParameters: ProductsApiGetProductFilesRequest, ): Promise<GetAssociatedFilesResponse2001> {
            return localVarFp.getProductFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of a product.
         * @summary List followers of a product
         * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest, ): Promise<GetProductFollowersResponseSuccess> {
            return localVarFp.getProductFollowers(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists users permitted to access a product.
         * @summary List permitted users
         * @param {ProductsApiGetProductUsersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProductUsers(requestParameters: ProductsApiGetProductUsersRequest, ): Promise<UserIds> {
            return localVarFp.getProductUsers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all products.
         * @summary Get all products
         * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProducts(requestParameters: ProductsApiGetProductsRequest = {}, ): Promise<GetProductsResponse200> {
            return localVarFp.getProducts(requestParameters.user_id, requestParameters.filter_id, requestParameters.ids, requestParameters.first_char, requestParameters.get_summary, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search products
         * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchProducts(requestParameters: ProductsApiSearchProductsRequest, ): Promise<SearchProductsResponse200> {
            return localVarFp.searchProducts(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.include_fields, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates product data.
         * @summary Update a product
         * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductsApiUpdateProductRequest, ): Promise<UpdateProductResponse200> {
            return localVarFp.updateProduct(requestParameters.id, requestParameters.UpdateProductRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductRequest
 */
export interface ProductsApiAddProductRequest {
    /**
     * 
     * @type {AddProductRequest}
     * @memberof ProductsApiAddProduct
     */
    readonly AddProductRequest?: AddProductRequest
}

/**
 * Request parameters for addProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiAddProductFollowerRequest
 */
export interface ProductsApiAddProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiAddProductFollower
     */
    readonly id: number

    /**
     * 
     * @type {AddProductFollowerRequest}
     * @memberof ProductsApiAddProductFollower
     */
    readonly AddProductFollowerRequest?: AddProductFollowerRequest
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProduct
     */
    readonly id: number
}

/**
 * Request parameters for deleteProductFollower operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductFollowerRequest
 */
export interface ProductsApiDeleteProductFollowerRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly id: number

    /**
     * The ID of the relationship between the follower and the product
     * @type {number}
     * @memberof ProductsApiDeleteProductFollower
     */
    readonly follower_id: number
}

/**
 * Request parameters for getProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductRequest
 */
export interface ProductsApiGetProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProduct
     */
    readonly id: number
}

/**
 * Request parameters for getProductDeals operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductDealsRequest
 */
export interface ProductsApiGetProductDealsRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProductDeals
     */
    readonly limit?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof ProductsApiGetProductDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'
}

/**
 * Request parameters for getProductFiles operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFilesRequest
 */
export interface ProductsApiGetProductFilesRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProductFiles
     */
    readonly limit?: number

    /**
     * The field name and sorting mode (&#x60;field_name_1 ASC&#x60; or &#x60;field_name_1 DESC&#x60;). Supported fields: &#x60;update_time&#x60;, &#x60;id&#x60;.
     * @type {string}
     * @memberof ProductsApiGetProductFiles
     */
    readonly sort?: string
}

/**
 * Request parameters for getProductFollowers operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductFollowersRequest
 */
export interface ProductsApiGetProductFollowersRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProductFollowers
     */
    readonly limit?: number
}

/**
 * Request parameters for getProductUsers operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductUsersRequest
 */
export interface ProductsApiGetProductUsersRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiGetProductUsers
     */
    readonly id: number
}

/**
 * Request parameters for getProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductsRequest
 */
export interface ProductsApiGetProductsRequest {
    /**
     * If supplied, only products owned by the given user will be returned
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly user_id?: number

    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly filter_id?: number

    /**
     * An array of integers with the IDs of the products that should be returned in the response
     * @type {Array<number>}
     * @memberof ProductsApiGetProducts
     */
    readonly ids?: Array<number>

    /**
     * If supplied, only products whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly first_char?: string

    /**
     * If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
     * @type {boolean}
     * @memberof ProductsApiGetProducts
     */
    readonly get_summary?: boolean

    /**
     * Pagination start
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly limit?: number
}

/**
 * Request parameters for searchProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiSearchProductsRequest
 */
export interface ProductsApiSearchProductsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof ProductsApiSearchProducts
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'code' | 'custom_fields' | 'name'}
     * @memberof ProductsApiSearchProducts
     */
    readonly fields?: 'code' | 'custom_fields' | 'name'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof ProductsApiSearchProducts
     */
    readonly exact_match?: boolean

    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'product.price'}
     * @memberof ProductsApiSearchProducts
     */
    readonly include_fields?: 'product.price'

    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof ProductsApiSearchProducts
     */
    readonly limit?: number
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     * The ID of the product
     * @type {number}
     * @memberof ProductsApiUpdateProduct
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProductRequest}
     * @memberof ProductsApiUpdateProduct
     */
    readonly UpdateProductRequest?: UpdateProductRequest
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {ProductsApiAddProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProduct(requestParameters: ProductsApiAddProductRequest = {}, ) {
        return ProductsApiFp(this.configuration).addProduct(requestParameters.AddProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {ProductsApiAddProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProductFollower(requestParameters: ProductsApiAddProductFollowerRequest, ) {
        return ProductsApiFp(this.configuration).addProductFollower(requestParameters.id, requestParameters.AddProductFollowerRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a product as deleted. After 30 days, the product will be permanently deleted.
     * @summary Delete a product
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(requestParameters: ProductsApiDeleteProductRequest, ) {
        return ProductsApiFp(this.configuration).deleteProduct(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {ProductsApiDeleteProductFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProductFollower(requestParameters: ProductsApiDeleteProductFollowerRequest, ) {
        return ProductsApiFp(this.configuration).deleteProductFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {ProductsApiGetProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProduct(requestParameters: ProductsApiGetProductRequest, ) {
        return ProductsApiFp(this.configuration).getProduct(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {ProductsApiGetProductDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductDeals(requestParameters: ProductsApiGetProductDealsRequest, ) {
        return ProductsApiFp(this.configuration).getProductDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {ProductsApiGetProductFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductFiles(requestParameters: ProductsApiGetProductFilesRequest, ) {
        return ProductsApiFp(this.configuration).getProductFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {ProductsApiGetProductFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductFollowers(requestParameters: ProductsApiGetProductFollowersRequest, ) {
        return ProductsApiFp(this.configuration).getProductFollowers(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {ProductsApiGetProductUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductUsers(requestParameters: ProductsApiGetProductUsersRequest, ) {
        return ProductsApiFp(this.configuration).getProductUsers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProducts(requestParameters: ProductsApiGetProductsRequest = {}, ) {
        return ProductsApiFp(this.configuration).getProducts(requestParameters.user_id, requestParameters.filter_id, requestParameters.ids, requestParameters.first_char, requestParameters.get_summary, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {ProductsApiSearchProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public searchProducts(requestParameters: ProductsApiSearchProductsRequest, ) {
        return ProductsApiFp(this.configuration).searchProducts(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.include_fields, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates product data.
     * @summary Update a product
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(requestParameters: ProductsApiUpdateProductRequest, ) {
        return ProductsApiFp(this.configuration).updateProduct(requestParameters.id, requestParameters.UpdateProductRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
