/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddTaskRequest } from '../model';
// @ts-ignore
import { AddTaskResponse201 } from '../model';
// @ts-ignore
import { DeleteTaskResponse200 } from '../model';
// @ts-ignore
import { GetTaskResponse200 } from '../model';
// @ts-ignore
import { GetTasksResponse200 } from '../model';
// @ts-ignore
import { UpdateProjectRequest2 } from '../model';
// @ts-ignore
import { UpdateTaskResponse200 } from '../model';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {AddTaskRequest} [AddTaskRequest] 

         * @throws {RequiredError}
         */
        addTask: async (AddTaskRequest?: AddTaskRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        deleteTask: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTask', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        getTask: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTask', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
         * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
         * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
         * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
         * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

         * @throws {RequiredError}
         */
        getTasks: async (cursor?: string, limit?: number, assignee_id?: number, project_id?: number, parent_task_id?: number, done?: 0 | 1, ): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (assignee_id !== undefined) {
                localVarQueryParameter['assignee_id'] = assignee_id;
            }

            if (project_id !== undefined) {
                localVarQueryParameter['project_id'] = project_id;
            }

            if (parent_task_id !== undefined) {
                localVarQueryParameter['parent_task_id'] = parent_task_id;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a task.
         * @summary Update a task
         * @param {number} id The ID of the task
         * @param {UpdateProjectRequest2} [UpdateProjectRequest2] 

         * @throws {RequiredError}
         */
        updateTask: async (id: number, UpdateProjectRequest2?: UpdateProjectRequest2, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProjectRequest2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {

    /**
    * Axios interceptor to add the SDK version as a User-Agent header
    * */
    globalAxios.interceptors.request.use(function (config) {
        const version = require("../../package.json").version;
        config.headers['User-Agent'] = `Pipedrive-SDK-Javascript-${version}`;
        return config;
    });

    /**
    * Axios response interceptor to modify response structure
    */
    globalAxios.interceptors.response.use(function (response) {
        return response.hasOwnProperty('success') ? response : response.data;
    }, function (error) {
        if(error?.response?.data) {
            return Promise.reject(error.response.data);
        }
        return Promise.reject(error);
    });
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {AddTaskRequest} [AddTaskRequest] 

         * @throws {RequiredError}
         */
        async addTask(AddTaskRequest?: AddTaskRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddTaskResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTask(AddTaskRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        async deleteTask(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteTaskResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {number} id The ID of the task

         * @throws {RequiredError}
         */
        async getTask(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTaskResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTask(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
         * @param {number} [assignee_id] If supplied, only tasks that are assigned to this user are returned
         * @param {number} [project_id] If supplied, only tasks that are assigned to this project are returned
         * @param {number} [parent_task_id] If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
         * @param {0 | 1} [done] Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.

         * @throws {RequiredError}
         */
        async getTasks(cursor?: string, limit?: number, assignee_id?: number, project_id?: number, parent_task_id?: number, done?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTasksResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(cursor, limit, assignee_id, project_id, parent_task_id, done, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a task.
         * @summary Update a task
         * @param {number} id The ID of the task
         * @param {UpdateProjectRequest2} [UpdateProjectRequest2] 

         * @throws {RequiredError}
         */
        async updateTask(id: number, UpdateProjectRequest2?: UpdateProjectRequest2, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateTaskResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(id, UpdateProjectRequest2, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Adds a new task.
         * @summary Add a task
         * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addTask(requestParameters: TasksApiAddTaskRequest = {}, ): Promise<AddTaskResponse201> {
            return localVarFp.addTask(requestParameters.AddTaskRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a task as deleted. If the task has subtasks then those will also be deleted.
         * @summary Delete a task
         * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteTask(requestParameters: TasksApiDeleteTaskRequest, ): Promise<DeleteTaskResponse200> {
            return localVarFp.deleteTask(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific task.
         * @summary Get details of a task
         * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getTask(requestParameters: TasksApiGetTaskRequest, ): Promise<GetTaskResponse200> {
            return localVarFp.getTask(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all tasks
         * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getTasks(requestParameters: TasksApiGetTasksRequest = {}, ): Promise<GetTasksResponse200> {
            return localVarFp.getTasks(requestParameters.cursor, requestParameters.limit, requestParameters.assignee_id, requestParameters.project_id, requestParameters.parent_task_id, requestParameters.done, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateTask(requestParameters: TasksApiUpdateTaskRequest, ): Promise<UpdateTaskResponse200> {
            return localVarFp.updateTask(requestParameters.id, requestParameters.UpdateProjectRequest2, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTask operation in TasksApi.
 * @export
 * @interface TasksApiAddTaskRequest
 */
export interface TasksApiAddTaskRequest {
    /**
     * 
     * @type {AddTaskRequest}
     * @memberof TasksApiAddTask
     */
    readonly AddTaskRequest?: AddTaskRequest
}

/**
 * Request parameters for deleteTask operation in TasksApi.
 * @export
 * @interface TasksApiDeleteTaskRequest
 */
export interface TasksApiDeleteTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiDeleteTask
     */
    readonly id: number
}

/**
 * Request parameters for getTask operation in TasksApi.
 * @export
 * @interface TasksApiGetTaskRequest
 */
export interface TasksApiGetTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiGetTask
     */
    readonly id: number
}

/**
 * Request parameters for getTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetTasksRequest
 */
export interface TasksApiGetTasksRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof TasksApiGetTasks
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, up to 500 items will be returned.
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly limit?: number

    /**
     * If supplied, only tasks that are assigned to this user are returned
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly assignee_id?: number

    /**
     * If supplied, only tasks that are assigned to this project are returned
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly project_id?: number

    /**
     * If &#x60;null&#x60; is supplied then only parent tasks are returned. If integer is supplied then only subtasks of a specific task are returned. By default all tasks are returned.
     * @type {number}
     * @memberof TasksApiGetTasks
     */
    readonly parent_task_id?: number

    /**
     * Whether the task is done or not. &#x60;0&#x60; &#x3D; Not done, &#x60;1&#x60; &#x3D; Done. If not omitted then returns both done and not done tasks.
     * @type {0 | 1}
     * @memberof TasksApiGetTasks
     */
    readonly done?: 0 | 1
}

/**
 * Request parameters for updateTask operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRequest
 */
export interface TasksApiUpdateTaskRequest {
    /**
     * The ID of the task
     * @type {number}
     * @memberof TasksApiUpdateTask
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProjectRequest2}
     * @memberof TasksApiUpdateTask
     */
    readonly UpdateProjectRequest2?: UpdateProjectRequest2
}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Adds a new task.
     * @summary Add a task
     * @param {TasksApiAddTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public addTask(requestParameters: TasksApiAddTaskRequest = {}, ) {
        return TasksApiFp(this.configuration).addTask(requestParameters.AddTaskRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a task as deleted. If the task has subtasks then those will also be deleted.
     * @summary Delete a task
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteTask(requestParameters: TasksApiDeleteTaskRequest, ) {
        return TasksApiFp(this.configuration).deleteTask(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific task.
     * @summary Get details of a task
     * @param {TasksApiGetTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTask(requestParameters: TasksApiGetTaskRequest, ) {
        return TasksApiFp(this.configuration).getTask(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all tasks. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all tasks
     * @param {TasksApiGetTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTasks(requestParameters: TasksApiGetTasksRequest = {}, ) {
        return TasksApiFp(this.configuration).getTasks(requestParameters.cursor, requestParameters.limit, requestParameters.assignee_id, requestParameters.project_id, requestParameters.parent_task_id, requestParameters.done, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a task.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTask(requestParameters: TasksApiUpdateTaskRequest, ) {
        return TasksApiFp(this.configuration).updateTask(requestParameters.id, requestParameters.UpdateProjectRequest2, ).then((request) => request(this.axios, this.basePath));
    }
}
