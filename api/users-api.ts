/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddUserRequest } from '../models';
// @ts-ignore
import { FailResponse } from '../models';
// @ts-ignore
import { GetCurrentUserResponse200 } from '../models';
// @ts-ignore
import { GetRoleSettingsResponse200 } from '../models';
// @ts-ignore
import { GetUserPermissionsResponse200 } from '../models';
// @ts-ignore
import { GetUserRoleAssignmentsResponse200 } from '../models';
// @ts-ignore
import { UnathorizedResponse } from '../models';
// @ts-ignore
import { UpdateUserRequest } from '../models';
// @ts-ignore
import { UserIds } from '../models';
// @ts-ignore
import { UserResponse200 } from '../models';
// @ts-ignore
import { UsersResponse200 } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {AddUserRequest} [AddUserRequest] 

         * @throws {RequiredError}
         */
        addUser: async (AddUserRequest?: AddUserRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {string} term The search term to look for
         * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

         * @throws {RequiredError}
         */
        findUsersByName: async (term: string, search_by_email?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('findUsersByName', 'term', term)
            const localVarPath = `/users/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (search_by_email !== undefined) {
                localVarQueryParameter['search_by_email'] = search_by_email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        getCurrentUser: async (): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["base"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUser: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserFollowers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserFollowers', 'id', id)
            const localVarPath = `/users/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserPermissions: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserPermissions', 'id', id)
            const localVarPath = `/users/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {number} id The ID of the user
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getUserRoleAssignments: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserRoleAssignments', 'id', id)
            const localVarPath = `/users/{id}/roleAssignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        getUserRoleSettings: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserRoleSettings', 'id', id)
            const localVarPath = `/users/{id}/roleSettings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        getUsers: async (): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["users:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {number} id The ID of the user
         * @param {UpdateUserRequest} [UpdateUserRequest] 

         * @throws {RequiredError}
         */
        updateUser: async (id: number, UpdateUserRequest?: UpdateUserRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {

    /**
    * Axios interceptor to add the SDK version as a User-Agent header
    * */
    globalAxios.interceptors.request.use(function (config) {
        const version = require("../../package.json").version;
        config.headers['User-Agent'] = `Pipedrive-SDK-Javascript-${version}`;
        return config;
    });

    /**
    * Axios response interceptor to modify response structure
    */
    globalAxios.interceptors.response.use(function (response) {
        return response.hasOwnProperty('success') ? response : response.data;
    }, function (error) {
        if(error?.response?.data) {
            return Promise.reject(error.response.data);
        }
        return Promise.reject(error);
    });
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {AddUserRequest} [AddUserRequest] 

         * @throws {RequiredError}
         */
        async addUser(AddUserRequest?: AddUserRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(AddUserRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {string} term The search term to look for
         * @param {0 | 1} [search_by_email] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.

         * @throws {RequiredError}
         */
        async findUsersByName(term: string, search_by_email?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UsersResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUsersByName(term, search_by_email, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        async getCurrentUser(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCurrentUserResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser();
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        async getUser(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        async getUserFollowers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFollowers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        async getUserPermissions(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserPermissionsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPermissions(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {number} id The ID of the user
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getUserRoleAssignments(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserRoleAssignmentsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRoleAssignments(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {number} id The ID of the user

         * @throws {RequiredError}
         */
        async getUserRoleSettings(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleSettingsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRoleSettings(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        async getUsers(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UsersResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers();
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {number} id The ID of the user
         * @param {UpdateUserRequest} [UpdateUserRequest] 

         * @throws {RequiredError}
         */
        async updateUser(id: number, UpdateUserRequest?: UpdateUserRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, UpdateUserRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Adds a new user to the company, returns the ID upon success.
         * @summary Add a new user
         * @param {UsersApiAddUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addUser(requestParameters: UsersApiAddUserRequest = {}, ): Promise<UserResponse200> {
            return localVarFp.addUser(requestParameters.AddUserRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Finds users by their name.
         * @summary Find users by name
         * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        findUsersByName(requestParameters: UsersApiFindUsersByNameRequest, ): Promise<UsersResponse200> {
            return localVarFp.findUsersByName(requestParameters.term, requestParameters.search_by_email, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
         * @summary Get current user data

         * @throws {RequiredError}
         */
        getCurrentUser(): Promise<GetCurrentUserResponse200> {
            return localVarFp.getCurrentUser().then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific user within the company.
         * @summary Get one user
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUser(requestParameters: UsersApiGetUserRequest, ): Promise<UserResponse200> {
            return localVarFp.getUser(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of a specific user.
         * @summary List followers of a user
         * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserFollowers(requestParameters: UsersApiGetUserFollowersRequest, ): Promise<UserIds> {
            return localVarFp.getUserFollowers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists aggregated permissions over all assigned permission sets for a user.
         * @summary List user permissions
         * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserPermissions(requestParameters: UsersApiGetUserPermissionsRequest, ): Promise<GetUserPermissionsResponse200> {
            return localVarFp.getUserPermissions(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists role assignments for a user.
         * @summary List role assignments
         * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserRoleAssignments(requestParameters: UsersApiGetUserRoleAssignmentsRequest, ): Promise<GetUserRoleAssignmentsResponse200> {
            return localVarFp.getUserRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the settings of user\'s assigned role.
         * @summary List user role settings
         * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getUserRoleSettings(requestParameters: UsersApiGetUserRoleSettingsRequest, ): Promise<GetRoleSettingsResponse200> {
            return localVarFp.getUserRoleSettings(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all users within the company.
         * @summary Get all users

         * @throws {RequiredError}
         */
        getUsers(): Promise<UsersResponse200> {
            return localVarFp.getUsers().then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a user. Currently, only `active_flag` can be updated.
         * @summary Update user details
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, ): Promise<UserResponse200> {
            return localVarFp.updateUser(requestParameters.id, requestParameters.UpdateUserRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUser operation in UsersApi.
 * @export
 * @interface UsersApiAddUserRequest
 */
export interface UsersApiAddUserRequest {
    /**
     * 
     * @type {AddUserRequest}
     * @memberof UsersApiAddUser
     */
    readonly AddUserRequest?: AddUserRequest
}

/**
 * Request parameters for findUsersByName operation in UsersApi.
 * @export
 * @interface UsersApiFindUsersByNameRequest
 */
export interface UsersApiFindUsersByNameRequest {
    /**
     * The search term to look for
     * @type {string}
     * @memberof UsersApiFindUsersByName
     */
    readonly term: string

    /**
     * When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;.
     * @type {0 | 1}
     * @memberof UsersApiFindUsersByName
     */
    readonly search_by_email?: 0 | 1
}

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUser
     */
    readonly id: number
}

/**
 * Request parameters for getUserFollowers operation in UsersApi.
 * @export
 * @interface UsersApiGetUserFollowersRequest
 */
export interface UsersApiGetUserFollowersRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserFollowers
     */
    readonly id: number
}

/**
 * Request parameters for getUserPermissions operation in UsersApi.
 * @export
 * @interface UsersApiGetUserPermissionsRequest
 */
export interface UsersApiGetUserPermissionsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserPermissions
     */
    readonly id: number
}

/**
 * Request parameters for getUserRoleAssignments operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRoleAssignmentsRequest
 */
export interface UsersApiGetUserRoleAssignmentsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof UsersApiGetUserRoleAssignments
     */
    readonly limit?: number
}

/**
 * Request parameters for getUserRoleSettings operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRoleSettingsRequest
 */
export interface UsersApiGetUserRoleSettingsRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiGetUserRoleSettings
     */
    readonly id: number
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * The ID of the user
     * @type {number}
     * @memberof UsersApiUpdateUser
     */
    readonly id: number

    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof UsersApiUpdateUser
     */
    readonly UpdateUserRequest?: UpdateUserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {UsersApiAddUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(requestParameters: UsersApiAddUserRequest = {}, ) {
        return UsersApiFp(this.configuration).addUser(requestParameters.AddUserRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {UsersApiFindUsersByNameRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public findUsersByName(requestParameters: UsersApiFindUsersByNameRequest, ) {
        return UsersApiFp(this.configuration).findUsersByName(requestParameters.term, requestParameters.search_by_email, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUser() {
        return UsersApiFp(this.configuration).getCurrentUser().then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, ) {
        return UsersApiFp(this.configuration).getUser(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {UsersApiGetUserFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserFollowers(requestParameters: UsersApiGetUserFollowersRequest, ) {
        return UsersApiFp(this.configuration).getUserFollowers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {UsersApiGetUserPermissionsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserPermissions(requestParameters: UsersApiGetUserPermissionsRequest, ) {
        return UsersApiFp(this.configuration).getUserPermissions(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {UsersApiGetUserRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserRoleAssignments(requestParameters: UsersApiGetUserRoleAssignmentsRequest, ) {
        return UsersApiFp(this.configuration).getUserRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {UsersApiGetUserRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserRoleSettings(requestParameters: UsersApiGetUserRoleSettingsRequest, ) {
        return UsersApiFp(this.configuration).getUserRoleSettings(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all users within the company.
     * @summary Get all users

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers() {
        return UsersApiFp(this.configuration).getUsers().then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, ) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.UpdateUserRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
