/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddFileAndLinkItResponse200 } from '../models';
// @ts-ignore
import { AddFileResponse200 } from '../models';
// @ts-ignore
import { DeleteFileResponse200 } from '../models';
// @ts-ignore
import { GetFileResponse200 } from '../models';
// @ts-ignore
import { GetFilesResponse200 } from '../models';
// @ts-ignore
import { LinkFileToItemResponse200 } from '../models';
// @ts-ignore
import { UpdateFileResponse200 } from '../models';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {File} file A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
         * @param {number} [deal_id] The ID of the deal to associate file(s) with
         * @param {number} [person_id] The ID of the person to associate file(s) with
         * @param {number} [org_id] The ID of the organization to associate file(s) with
         * @param {number} [product_id] The ID of the product to associate file(s) with
         * @param {number} [activity_id] The ID of the activity to associate file(s) with
         * @param {string} [lead_id] The ID of the lead to associate file(s) with

         * @throws {RequiredError}
         */
        addFile: async (file: File, deal_id?: number, person_id?: number, org_id?: number, product_id?: number, activity_id?: number, lead_id?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('addFile', 'file', file)
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (deal_id !== undefined) { 
                localVarFormParams.append('deal_id', deal_id as any);
            }
    
            if (person_id !== undefined) { 
                localVarFormParams.append('person_id', person_id as any);
            }
    
            if (org_id !== undefined) { 
                localVarFormParams.append('org_id', org_id as any);
            }
    
            if (product_id !== undefined) { 
                localVarFormParams.append('product_id', product_id as any);
            }
    
            if (activity_id !== undefined) { 
                localVarFormParams.append('activity_id', activity_id as any);
            }
    
            if (lead_id !== undefined) { 
                localVarFormParams.append('lead_id', lead_id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {string} file_type The file type
         * @param {string} title The title of the file
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        addFileAndLinkIt: async (file_type: string, title: string, item_type: string, item_id: number, remote_location: string, ): Promise<RequestArgs> => {
            // verify required parameter 'file_type' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'file_type', file_type)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'title', title)
            // verify required parameter 'item_type' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'item_type', item_type)
            // verify required parameter 'item_id' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'item_id', item_id)
            // verify required parameter 'remote_location' is not null or undefined
            assertParamExists('addFileAndLinkIt', 'remote_location', remote_location)
            const localVarPath = `/files/remote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration)


            if (file_type !== undefined) { 
                localVarFormParams.set('file_type', file_type as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.set('title', title as any);
            }
    
            if (item_type !== undefined) { 
                localVarFormParams.set('item_type', item_type as any);
            }
    
            if (item_id !== undefined) { 
                localVarFormParams.set('item_id', item_id as any);
            }
    
            if (remote_location !== undefined) { 
                localVarFormParams.set('remote_location', remote_location as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        deleteFile: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFile', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        downloadFile: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadFile', 'id', id)
            const localVarPath = `/files/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        getFile: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFile', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        getFiles: async (start?: number, limit?: number, sort?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_id The remote item ID
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        linkFileToItem: async (item_type: string, item_id: number, remote_id: string, remote_location: string, ): Promise<RequestArgs> => {
            // verify required parameter 'item_type' is not null or undefined
            assertParamExists('linkFileToItem', 'item_type', item_type)
            // verify required parameter 'item_id' is not null or undefined
            assertParamExists('linkFileToItem', 'item_id', item_id)
            // verify required parameter 'remote_id' is not null or undefined
            assertParamExists('linkFileToItem', 'remote_id', remote_id)
            // verify required parameter 'remote_location' is not null or undefined
            assertParamExists('linkFileToItem', 'remote_location', remote_location)
            const localVarPath = `/files/remoteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration)


            if (item_type !== undefined) { 
                localVarFormParams.set('item_type', item_type as any);
            }
    
            if (item_id !== undefined) { 
                localVarFormParams.set('item_id', item_id as any);
            }
    
            if (remote_id !== undefined) { 
                localVarFormParams.set('remote_id', remote_id as any);
            }
    
            if (remote_location !== undefined) { 
                localVarFormParams.set('remote_location', remote_location as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {number} id The ID of the file
         * @param {string} [name] The visible name of the file
         * @param {string} [description] The description of the file

         * @throws {RequiredError}
         */
        updateFile: async (id: number, name?: string, description?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFile', 'id', id)
            const localVarPath = `/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "activities:full", "contacts:full"], configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {File} file A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
         * @param {number} [deal_id] The ID of the deal to associate file(s) with
         * @param {number} [person_id] The ID of the person to associate file(s) with
         * @param {number} [org_id] The ID of the organization to associate file(s) with
         * @param {number} [product_id] The ID of the product to associate file(s) with
         * @param {number} [activity_id] The ID of the activity to associate file(s) with
         * @param {string} [lead_id] The ID of the lead to associate file(s) with

         * @throws {RequiredError}
         */
        async addFile(file: File, deal_id?: number, person_id?: number, org_id?: number, product_id?: number, activity_id?: number, lead_id?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFileResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFile(file, deal_id, person_id, org_id, product_id, activity_id, lead_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {string} file_type The file type
         * @param {string} title The title of the file
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        async addFileAndLinkIt(file_type: string, title: string, item_type: string, item_id: number, remote_location: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddFileAndLinkItResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFileAndLinkIt(file_type, title, item_type, item_id, remote_location, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        async deleteFile(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFileResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        async downloadFile(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {number} id The ID of the file

         * @throws {RequiredError}
         */
        async getFile(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFileResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        async getFiles(start?: number, limit?: number, sort?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFilesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(start, limit, sort, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {string} item_type The item type
         * @param {number} item_id The ID of the item to associate the file with
         * @param {string} remote_id The remote item ID
         * @param {string} remote_location The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.

         * @throws {RequiredError}
         */
        async linkFileToItem(item_type: string, item_id: number, remote_id: string, remote_location: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<LinkFileToItemResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkFileToItem(item_type, item_id, remote_id, remote_location, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {number} id The ID of the file
         * @param {string} [name] The visible name of the file
         * @param {string} [description] The description of the file

         * @throws {RequiredError}
         */
        async updateFile(id: number, name?: string, description?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateFileResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFile(id, name, description, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
         * @summary Add file
         * @param {FilesApiAddFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addFile(requestParameters: FilesApiAddFileRequest, ): Promise<AddFileResponse200> {
            return localVarFp.addFile(requestParameters.file, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.product_id, requestParameters.activity_id, requestParameters.lead_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Create a remote file and link it to an item
         * @param {FilesApiAddFileAndLinkItRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addFileAndLinkIt(requestParameters: FilesApiAddFileAndLinkItRequest, ): Promise<AddFileAndLinkItResponse200> {
            return localVarFp.addFileAndLinkIt(requestParameters.file_type, requestParameters.title, requestParameters.item_type, requestParameters.item_id, requestParameters.remote_location, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a file as deleted. After 30 days, the file will be permanently deleted.
         * @summary Delete a file
         * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteFile(requestParameters: FilesApiDeleteFileRequest, ): Promise<DeleteFileResponse200> {
            return localVarFp.deleteFile(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Initializes a file download.
         * @summary Download one file
         * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        downloadFile(requestParameters: FilesApiDownloadFileRequest, ): Promise<string> {
            return localVarFp.downloadFile(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific file.
         * @summary Get one file
         * @param {FilesApiGetFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFile(requestParameters: FilesApiGetFileRequest, ): Promise<GetFileResponse200> {
            return localVarFp.getFile(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all files.
         * @summary Get all files
         * @param {FilesApiGetFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getFiles(requestParameters: FilesApiGetFilesRequest = {}, ): Promise<GetFilesResponse200> {
            return localVarFp.getFiles(requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(axios, basePath));
        },
        /**
         * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
         * @summary Link a remote file to an item
         * @param {FilesApiLinkFileToItemRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        linkFileToItem(requestParameters: FilesApiLinkFileToItemRequest, ): Promise<LinkFileToItemResponse200> {
            return localVarFp.linkFileToItem(requestParameters.item_type, requestParameters.item_id, requestParameters.remote_id, requestParameters.remote_location, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a file.
         * @summary Update file details
         * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateFile(requestParameters: FilesApiUpdateFileRequest, ): Promise<UpdateFileResponse200> {
            return localVarFp.updateFile(requestParameters.id, requestParameters.name, requestParameters.description, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFile operation in FilesApi.
 * @export
 * @interface FilesApiAddFileRequest
 */
export interface FilesApiAddFileRequest {
    /**
     * A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
     * @type {File}
     * @memberof FilesApiAddFile
     */
    readonly file: File

    /**
     * The ID of the deal to associate file(s) with
     * @type {number}
     * @memberof FilesApiAddFile
     */
    readonly deal_id?: number

    /**
     * The ID of the person to associate file(s) with
     * @type {number}
     * @memberof FilesApiAddFile
     */
    readonly person_id?: number

    /**
     * The ID of the organization to associate file(s) with
     * @type {number}
     * @memberof FilesApiAddFile
     */
    readonly org_id?: number

    /**
     * The ID of the product to associate file(s) with
     * @type {number}
     * @memberof FilesApiAddFile
     */
    readonly product_id?: number

    /**
     * The ID of the activity to associate file(s) with
     * @type {number}
     * @memberof FilesApiAddFile
     */
    readonly activity_id?: number

    /**
     * The ID of the lead to associate file(s) with
     * @type {string}
     * @memberof FilesApiAddFile
     */
    readonly lead_id?: string
}

/**
 * Request parameters for addFileAndLinkIt operation in FilesApi.
 * @export
 * @interface FilesApiAddFileAndLinkItRequest
 */
export interface FilesApiAddFileAndLinkItRequest {
    /**
     * The file type
     * @type {string}
     * @memberof FilesApiAddFileAndLinkIt
     */
    readonly file_type: string

    /**
     * The title of the file
     * @type {string}
     * @memberof FilesApiAddFileAndLinkIt
     */
    readonly title: string

    /**
     * The item type
     * @type {string}
     * @memberof FilesApiAddFileAndLinkIt
     */
    readonly item_type: string

    /**
     * The ID of the item to associate the file with
     * @type {number}
     * @memberof FilesApiAddFileAndLinkIt
     */
    readonly item_id: number

    /**
     * The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
     * @type {string}
     * @memberof FilesApiAddFileAndLinkIt
     */
    readonly remote_location: string
}

/**
 * Request parameters for deleteFile operation in FilesApi.
 * @export
 * @interface FilesApiDeleteFileRequest
 */
export interface FilesApiDeleteFileRequest {
    /**
     * The ID of the file
     * @type {number}
     * @memberof FilesApiDeleteFile
     */
    readonly id: number
}

/**
 * Request parameters for downloadFile operation in FilesApi.
 * @export
 * @interface FilesApiDownloadFileRequest
 */
export interface FilesApiDownloadFileRequest {
    /**
     * The ID of the file
     * @type {number}
     * @memberof FilesApiDownloadFile
     */
    readonly id: number
}

/**
 * Request parameters for getFile operation in FilesApi.
 * @export
 * @interface FilesApiGetFileRequest
 */
export interface FilesApiGetFileRequest {
    /**
     * The ID of the file
     * @type {number}
     * @memberof FilesApiGetFile
     */
    readonly id: number
}

/**
 * Request parameters for getFiles operation in FilesApi.
 * @export
 * @interface FilesApiGetFilesRequest
 */
export interface FilesApiGetFilesRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof FilesApiGetFiles
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof FilesApiGetFiles
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @type {string}
     * @memberof FilesApiGetFiles
     */
    readonly sort?: string
}

/**
 * Request parameters for linkFileToItem operation in FilesApi.
 * @export
 * @interface FilesApiLinkFileToItemRequest
 */
export interface FilesApiLinkFileToItemRequest {
    /**
     * The item type
     * @type {string}
     * @memberof FilesApiLinkFileToItem
     */
    readonly item_type: string

    /**
     * The ID of the item to associate the file with
     * @type {number}
     * @memberof FilesApiLinkFileToItem
     */
    readonly item_id: number

    /**
     * The remote item ID
     * @type {string}
     * @memberof FilesApiLinkFileToItem
     */
    readonly remote_id: string

    /**
     * The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
     * @type {string}
     * @memberof FilesApiLinkFileToItem
     */
    readonly remote_location: string
}

/**
 * Request parameters for updateFile operation in FilesApi.
 * @export
 * @interface FilesApiUpdateFileRequest
 */
export interface FilesApiUpdateFileRequest {
    /**
     * The ID of the file
     * @type {number}
     * @memberof FilesApiUpdateFile
     */
    readonly id: number

    /**
     * The visible name of the file
     * @type {string}
     * @memberof FilesApiUpdateFile
     */
    readonly name?: string

    /**
     * The description of the file
     * @type {string}
     * @memberof FilesApiUpdateFile
     */
    readonly description?: string
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * @summary Add file
     * @param {FilesApiAddFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public addFile(requestParameters: FilesApiAddFileRequest, ) {
        return FilesApiFp(this.configuration).addFile(requestParameters.file, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.product_id, requestParameters.activity_id, requestParameters.lead_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Create a remote file and link it to an item
     * @param {FilesApiAddFileAndLinkItRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public addFileAndLinkIt(requestParameters: FilesApiAddFileAndLinkItRequest, ) {
        return FilesApiFp(this.configuration).addFileAndLinkIt(requestParameters.file_type, requestParameters.title, requestParameters.item_type, requestParameters.item_id, requestParameters.remote_location, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a file as deleted. After 30 days, the file will be permanently deleted.
     * @summary Delete a file
     * @param {FilesApiDeleteFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFile(requestParameters: FilesApiDeleteFileRequest, ) {
        return FilesApiFp(this.configuration).deleteFile(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initializes a file download.
     * @summary Download one file
     * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public downloadFile(requestParameters: FilesApiDownloadFileRequest, ) {
        return FilesApiFp(this.configuration).downloadFile(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific file.
     * @summary Get one file
     * @param {FilesApiGetFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFile(requestParameters: FilesApiGetFileRequest, ) {
        return FilesApiFp(this.configuration).getFile(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all files.
     * @summary Get all files
     * @param {FilesApiGetFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFiles(requestParameters: FilesApiGetFilesRequest = {}, ) {
        return FilesApiFp(this.configuration).getFiles(requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Link a remote file to an item
     * @param {FilesApiLinkFileToItemRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public linkFileToItem(requestParameters: FilesApiLinkFileToItemRequest, ) {
        return FilesApiFp(this.configuration).linkFileToItem(requestParameters.item_type, requestParameters.item_id, requestParameters.remote_id, requestParameters.remote_location, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a file.
     * @summary Update file details
     * @param {FilesApiUpdateFileRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public updateFile(requestParameters: FilesApiUpdateFileRequest, ) {
        return FilesApiFp(this.configuration).updateFile(requestParameters.id, requestParameters.name, requestParameters.description, ).then((request) => request(this.axios, this.basePath));
    }
}
