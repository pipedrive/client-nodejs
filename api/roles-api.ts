/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddOrUpdateRoleSettingRequest } from '../models';
// @ts-ignore
import { AddOrUpdateRoleSettingResponse200 } from '../models';
// @ts-ignore
import { AddRoleAssignmentRequest } from '../models';
// @ts-ignore
import { AddRoleAssignmentResponse200 } from '../models';
// @ts-ignore
import { AddRoleRequest } from '../models';
// @ts-ignore
import { AddRoleResponse200 } from '../models';
// @ts-ignore
import { BaseRoleRequest } from '../models';
// @ts-ignore
import { DeleteRoleAssignmentRequest } from '../models';
// @ts-ignore
import { DeleteRoleAssignmentResponse200 } from '../models';
// @ts-ignore
import { DeleteRoleResponse200 } from '../models';
// @ts-ignore
import { GetRolePipelines200 } from '../models';
// @ts-ignore
import { GetRoleResponse200 } from '../models';
// @ts-ignore
import { GetRoleSettingsResponse200 } from '../models';
// @ts-ignore
import { GetRolesResponse200 } from '../models';
// @ts-ignore
import { GetUserRoleAssignmentsResponse200 } from '../models';
// @ts-ignore
import { PutRolePipelinesBody } from '../models';
// @ts-ignore
import { UpdateRoleResponse200 } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {number} id The ID of the role
         * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest] 

         * @throws {RequiredError}
         */
        addOrUpdateRoleSetting: async (id: number, AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addOrUpdateRoleSetting', 'id', id)
            const localVarPath = `/roles/{id}/settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrUpdateRoleSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {AddRoleRequest} [AddRoleRequest] 

         * @throws {RequiredError}
         */
        addRole: async (AddRoleRequest?: AddRoleRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {number} id The ID of the role
         * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest] 

         * @throws {RequiredError}
         */
        addRoleAssignment: async (id: number, AddRoleAssignmentRequest?: AddRoleAssignmentRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addRoleAssignment', 'id', id)
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddRoleAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        deleteRole: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {number} id The ID of the role
         * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest] 

         * @throws {RequiredError}
         */
        deleteRoleAssignment: async (id: number, DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoleAssignment', 'id', id)
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(DeleteRoleAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRole: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {number} id The ID of the role
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoleAssignments: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleAssignments', 'id', id)
            const localVarPath = `/roles/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

         * @throws {RequiredError}
         */
        getRolePipelines: async (id: number, visible?: boolean, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRolePipelines', 'id', id)
            const localVarPath = `/roles/{id}/pipelines`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        getRoleSettings: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleSettings', 'id', id)
            const localVarPath = `/roles/{id}/settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getRoles: async (start?: number, limit?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {number} id The ID of the role
         * @param {BaseRoleRequest} [BaseRoleRequest] 

         * @throws {RequiredError}
         */
        updateRole: async (id: number, BaseRoleRequest?: BaseRoleRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(BaseRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {PutRolePipelinesBody} [PutRolePipelinesBody] 

         * @throws {RequiredError}
         */
        updateRolePipelines: async (id: number, PutRolePipelinesBody?: PutRolePipelinesBody, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRolePipelines', 'id', id)
            const localVarPath = `/roles/{id}/pipelines`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(PutRolePipelinesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {

    /**
    * Axios interceptor to add the SDK version as a User-Agent header
    * */
    globalAxios.interceptors.request.use(function (config) {
        const version = require("../../package.json").version;
        config.headers['User-Agent'] = `Pipedrive-SDK-Javascript-${version}`;
        return config;
    });

    /**
    * Axios response interceptor to modify response structure
    */
    globalAxios.interceptors.response.use(function (response) {
        return response.hasOwnProperty('success') ? response : response.data;
    }, function (error) {
        if(error?.response?.data) {
            return Promise.reject(error.response.data);
        }
        return Promise.reject(error);
    });
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {number} id The ID of the role
         * @param {AddOrUpdateRoleSettingRequest} [AddOrUpdateRoleSettingRequest] 

         * @throws {RequiredError}
         */
        async addOrUpdateRoleSetting(id: number, AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddOrUpdateRoleSettingResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateRoleSetting(id, AddOrUpdateRoleSettingRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {AddRoleRequest} [AddRoleRequest] 

         * @throws {RequiredError}
         */
        async addRole(AddRoleRequest?: AddRoleRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddRoleResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRole(AddRoleRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {number} id The ID of the role
         * @param {AddRoleAssignmentRequest} [AddRoleAssignmentRequest] 

         * @throws {RequiredError}
         */
        async addRoleAssignment(id: number, AddRoleAssignmentRequest?: AddRoleAssignmentRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddRoleAssignmentResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRoleAssignment(id, AddRoleAssignmentRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        async deleteRole(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteRoleResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {number} id The ID of the role
         * @param {DeleteRoleAssignmentRequest} [DeleteRoleAssignmentRequest] 

         * @throws {RequiredError}
         */
        async deleteRoleAssignment(id: number, DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteRoleAssignmentResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleAssignment(id, DeleteRoleAssignmentRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        async getRole(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {number} id The ID of the role
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getRoleAssignments(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetUserRoleAssignmentsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleAssignments(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {boolean} [visible] Whether to return the visible or hidden pipelines for the role

         * @throws {RequiredError}
         */
        async getRolePipelines(id: number, visible?: boolean, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolePipelines200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolePipelines(id, visible, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {number} id The ID of the role

         * @throws {RequiredError}
         */
        async getRoleSettings(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRoleSettingsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleSettings(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getRoles(start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {number} id The ID of the role
         * @param {BaseRoleRequest} [BaseRoleRequest] 

         * @throws {RequiredError}
         */
        async updateRole(id: number, BaseRoleRequest?: BaseRoleRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateRoleResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(id, BaseRoleRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {number} id The ID of the role
         * @param {PutRolePipelinesBody} [PutRolePipelinesBody] 

         * @throws {RequiredError}
         */
        async updateRolePipelines(id: number, PutRolePipelinesBody?: PutRolePipelinesBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetRolePipelines200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRolePipelines(id, PutRolePipelinesBody, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * Adds or updates the visibility setting for a role.
         * @summary Add or update role setting
         * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrUpdateRoleSetting(requestParameters: RolesApiAddOrUpdateRoleSettingRequest, ): Promise<AddOrUpdateRoleSettingResponse200> {
            return localVarFp.addOrUpdateRoleSetting(requestParameters.id, requestParameters.AddOrUpdateRoleSettingRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new role.
         * @summary Add a role
         * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addRole(requestParameters: RolesApiAddRoleRequest = {}, ): Promise<AddRoleResponse200> {
            return localVarFp.addRole(requestParameters.AddRoleRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Assigns a user to a role.
         * @summary Add role assignment
         * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addRoleAssignment(requestParameters: RolesApiAddRoleAssignmentRequest, ): Promise<AddRoleAssignmentResponse200> {
            return localVarFp.addRoleAssignment(requestParameters.id, requestParameters.AddRoleAssignmentRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a role as deleted.
         * @summary Delete a role
         * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteRole(requestParameters: RolesApiDeleteRoleRequest, ): Promise<DeleteRoleResponse200> {
            return localVarFp.deleteRole(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Removes the assigned user from a role and adds to the default role.
         * @summary Delete a role assignment
         * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteRoleAssignment(requestParameters: RolesApiDeleteRoleAssignmentRequest, ): Promise<DeleteRoleAssignmentResponse200> {
            return localVarFp.deleteRoleAssignment(requestParameters.id, requestParameters.DeleteRoleAssignmentRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific role.
         * @summary Get one role
         * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRole(requestParameters: RolesApiGetRoleRequest, ): Promise<GetRoleResponse200> {
            return localVarFp.getRole(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all users assigned to a role.
         * @summary List role assignments
         * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoleAssignments(requestParameters: RolesApiGetRoleAssignmentsRequest, ): Promise<GetUserRoleAssignmentsResponse200> {
            return localVarFp.getRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary List pipeline visibility for a role
         * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRolePipelines(requestParameters: RolesApiGetRolePipelinesRequest, ): Promise<GetRolePipelines200> {
            return localVarFp.getRolePipelines(requestParameters.id, requestParameters.visible, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the visibility settings of a specific role.
         * @summary List role settings
         * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoleSettings(requestParameters: RolesApiGetRoleSettingsRequest, ): Promise<GetRoleSettingsResponse200> {
            return localVarFp.getRoleSettings(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all the roles within the company.
         * @summary Get all roles
         * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getRoles(requestParameters: RolesApiGetRolesRequest = {}, ): Promise<GetRolesResponse200> {
            return localVarFp.getRoles(requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the parent role and/or the name of a specific role.
         * @summary Update role details
         * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateRole(requestParameters: RolesApiUpdateRoleRequest, ): Promise<UpdateRoleResponse200> {
            return localVarFp.updateRole(requestParameters.id, requestParameters.BaseRoleRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
         * @summary Update pipeline visibility for a role
         * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateRolePipelines(requestParameters: RolesApiUpdateRolePipelinesRequest, ): Promise<GetRolePipelines200> {
            return localVarFp.updateRolePipelines(requestParameters.id, requestParameters.PutRolePipelinesBody, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrUpdateRoleSetting operation in RolesApi.
 * @export
 * @interface RolesApiAddOrUpdateRoleSettingRequest
 */
export interface RolesApiAddOrUpdateRoleSettingRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiAddOrUpdateRoleSetting
     */
    readonly id: number

    /**
     * 
     * @type {AddOrUpdateRoleSettingRequest}
     * @memberof RolesApiAddOrUpdateRoleSetting
     */
    readonly AddOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest
}

/**
 * Request parameters for addRole operation in RolesApi.
 * @export
 * @interface RolesApiAddRoleRequest
 */
export interface RolesApiAddRoleRequest {
    /**
     * 
     * @type {AddRoleRequest}
     * @memberof RolesApiAddRole
     */
    readonly AddRoleRequest?: AddRoleRequest
}

/**
 * Request parameters for addRoleAssignment operation in RolesApi.
 * @export
 * @interface RolesApiAddRoleAssignmentRequest
 */
export interface RolesApiAddRoleAssignmentRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiAddRoleAssignment
     */
    readonly id: number

    /**
     * 
     * @type {AddRoleAssignmentRequest}
     * @memberof RolesApiAddRoleAssignment
     */
    readonly AddRoleAssignmentRequest?: AddRoleAssignmentRequest
}

/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export interface RolesApiDeleteRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiDeleteRole
     */
    readonly id: number
}

/**
 * Request parameters for deleteRoleAssignment operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleAssignmentRequest
 */
export interface RolesApiDeleteRoleAssignmentRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiDeleteRoleAssignment
     */
    readonly id: number

    /**
     * 
     * @type {DeleteRoleAssignmentRequest}
     * @memberof RolesApiDeleteRoleAssignment
     */
    readonly DeleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest
}

/**
 * Request parameters for getRole operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleRequest
 */
export interface RolesApiGetRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRole
     */
    readonly id: number
}

/**
 * Request parameters for getRoleAssignments operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleAssignmentsRequest
 */
export interface RolesApiGetRoleAssignmentsRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof RolesApiGetRoleAssignments
     */
    readonly limit?: number
}

/**
 * Request parameters for getRolePipelines operation in RolesApi.
 * @export
 * @interface RolesApiGetRolePipelinesRequest
 */
export interface RolesApiGetRolePipelinesRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRolePipelines
     */
    readonly id: number

    /**
     * Whether to return the visible or hidden pipelines for the role
     * @type {boolean}
     * @memberof RolesApiGetRolePipelines
     */
    readonly visible?: boolean
}

/**
 * Request parameters for getRoleSettings operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleSettingsRequest
 */
export interface RolesApiGetRoleSettingsRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiGetRoleSettings
     */
    readonly id: number
}

/**
 * Request parameters for getRoles operation in RolesApi.
 * @export
 * @interface RolesApiGetRolesRequest
 */
export interface RolesApiGetRolesRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof RolesApiGetRoles
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof RolesApiGetRoles
     */
    readonly limit?: number
}

/**
 * Request parameters for updateRole operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRoleRequest
 */
export interface RolesApiUpdateRoleRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiUpdateRole
     */
    readonly id: number

    /**
     * 
     * @type {BaseRoleRequest}
     * @memberof RolesApiUpdateRole
     */
    readonly BaseRoleRequest?: BaseRoleRequest
}

/**
 * Request parameters for updateRolePipelines operation in RolesApi.
 * @export
 * @interface RolesApiUpdateRolePipelinesRequest
 */
export interface RolesApiUpdateRolePipelinesRequest {
    /**
     * The ID of the role
     * @type {number}
     * @memberof RolesApiUpdateRolePipelines
     */
    readonly id: number

    /**
     * 
     * @type {PutRolePipelinesBody}
     * @memberof RolesApiUpdateRolePipelines
     */
    readonly PutRolePipelinesBody?: PutRolePipelinesBody
}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {RolesApiAddOrUpdateRoleSettingRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public addOrUpdateRoleSetting(requestParameters: RolesApiAddOrUpdateRoleSettingRequest, ) {
        return RolesApiFp(this.configuration).addOrUpdateRoleSetting(requestParameters.id, requestParameters.AddOrUpdateRoleSettingRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new role.
     * @summary Add a role
     * @param {RolesApiAddRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public addRole(requestParameters: RolesApiAddRoleRequest = {}, ) {
        return RolesApiFp(this.configuration).addRole(requestParameters.AddRoleRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {RolesApiAddRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public addRoleAssignment(requestParameters: RolesApiAddRoleAssignmentRequest, ) {
        return RolesApiFp(this.configuration).addRoleAssignment(requestParameters.id, requestParameters.AddRoleAssignmentRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRole(requestParameters: RolesApiDeleteRoleRequest, ) {
        return RolesApiFp(this.configuration).deleteRole(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {RolesApiDeleteRoleAssignmentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRoleAssignment(requestParameters: RolesApiDeleteRoleAssignmentRequest, ) {
        return RolesApiFp(this.configuration).deleteRoleAssignment(requestParameters.id, requestParameters.DeleteRoleAssignmentRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRole(requestParameters: RolesApiGetRoleRequest, ) {
        return RolesApiFp(this.configuration).getRole(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {RolesApiGetRoleAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoleAssignments(requestParameters: RolesApiGetRoleAssignmentsRequest, ) {
        return RolesApiFp(this.configuration).getRoleAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of either visible or hidden pipeline IDs for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary List pipeline visibility for a role
     * @param {RolesApiGetRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRolePipelines(requestParameters: RolesApiGetRolePipelinesRequest, ) {
        return RolesApiFp(this.configuration).getRolePipelines(requestParameters.id, requestParameters.visible, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {RolesApiGetRoleSettingsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoleSettings(requestParameters: RolesApiGetRoleSettingsRequest, ) {
        return RolesApiFp(this.configuration).getRoleSettings(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {RolesApiGetRolesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoles(requestParameters: RolesApiGetRolesRequest = {}, ) {
        return RolesApiFp(this.configuration).getRoles(requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRole(requestParameters: RolesApiUpdateRoleRequest, ) {
        return RolesApiFp(this.configuration).updateRole(requestParameters.id, requestParameters.BaseRoleRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the specified pipelines to be visible and/or hidden for a specific role. For more information on pipeline visibility, please refer to the <a href=\"https://support.pipedrive.com/en/article/visibility-groups\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility groups article</a>.
     * @summary Update pipeline visibility for a role
     * @param {RolesApiUpdateRolePipelinesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public updateRolePipelines(requestParameters: RolesApiUpdateRolePipelinesRequest, ) {
        return RolesApiFp(this.configuration).updateRolePipelines(requestParameters.id, requestParameters.PutRolePipelinesBody, ).then((request) => request(this.axios, this.basePath));
    }
}
