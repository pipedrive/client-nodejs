/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetPermissionSetsResponse200 } from '../models';
// @ts-ignore
import { SinglePermissionSetResponse200 } from '../models';
// @ts-ignore
import { UserAssignmentsToPermissionSetResponse200 } from '../models';
/**
 * PermissionSetsApi - axios parameter creator
 * @export
 */
export const PermissionSetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {string} id The ID of the permission set

         * @throws {RequiredError}
         */
        getPermissionSet: async (id: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPermissionSet', 'id', id)
            const localVarPath = `/permissionSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {string} id The ID of the permission set
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getPermissionSetAssignments: async (id: string, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPermissionSetAssignments', 'id', id)
            const localVarPath = `/permissionSets/{id}/assignments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'} [app] The app to filter the permission sets by

         * @throws {RequiredError}
         */
        getPermissionSets: async (app?: 'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings', ): Promise<RequestArgs> => {
            const localVarPath = `/permissionSets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (app !== undefined) {
                localVarQueryParameter['app'] = app;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * PermissionSetsApi - functional programming interface
 * @export
 */
export const PermissionSetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionSetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {string} id The ID of the permission set

         * @throws {RequiredError}
         */
        async getPermissionSet(id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SinglePermissionSetResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionSet(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {string} id The ID of the permission set
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getPermissionSetAssignments(id: string, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserAssignmentsToPermissionSetResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionSetAssignments(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'} [app] The app to filter the permission sets by

         * @throws {RequiredError}
         */
        async getPermissionSets(app?: 'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPermissionSetsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissionSets(app, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionSetsApi - factory interface
 * @export
 */
export const PermissionSetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionSetsApiFp(configuration)
    return {
        /**
         * Returns data about a specific permission set.
         * @summary Get one permission set
         * @param {PermissionSetsApiGetPermissionSetRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSet(requestParameters: PermissionSetsApiGetPermissionSetRequest, ): Promise<SinglePermissionSetResponse200> {
            return localVarFp.getPermissionSet(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of assignments for a permission set.
         * @summary List permission set assignments
         * @param {PermissionSetsApiGetPermissionSetAssignmentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSetAssignments(requestParameters: PermissionSetsApiGetPermissionSetAssignmentsRequest, ): Promise<UserAssignmentsToPermissionSetResponse200> {
            return localVarFp.getPermissionSetAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all permission sets.
         * @summary Get all permission sets
         * @param {PermissionSetsApiGetPermissionSetsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getPermissionSets(requestParameters: PermissionSetsApiGetPermissionSetsRequest = {}, ): Promise<GetPermissionSetsResponse200> {
            return localVarFp.getPermissionSets(requestParameters.app, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPermissionSet operation in PermissionSetsApi.
 * @export
 * @interface PermissionSetsApiGetPermissionSetRequest
 */
export interface PermissionSetsApiGetPermissionSetRequest {
    /**
     * The ID of the permission set
     * @type {string}
     * @memberof PermissionSetsApiGetPermissionSet
     */
    readonly id: string
}

/**
 * Request parameters for getPermissionSetAssignments operation in PermissionSetsApi.
 * @export
 * @interface PermissionSetsApiGetPermissionSetAssignmentsRequest
 */
export interface PermissionSetsApiGetPermissionSetAssignmentsRequest {
    /**
     * The ID of the permission set
     * @type {string}
     * @memberof PermissionSetsApiGetPermissionSetAssignments
     */
    readonly id: string

    /**
     * Pagination start
     * @type {number}
     * @memberof PermissionSetsApiGetPermissionSetAssignments
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof PermissionSetsApiGetPermissionSetAssignments
     */
    readonly limit?: number
}

/**
 * Request parameters for getPermissionSets operation in PermissionSetsApi.
 * @export
 * @interface PermissionSetsApiGetPermissionSetsRequest
 */
export interface PermissionSetsApiGetPermissionSetsRequest {
    /**
     * The app to filter the permission sets by
     * @type {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'}
     * @memberof PermissionSetsApiGetPermissionSets
     */
    readonly app?: 'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'
}

/**
 * PermissionSetsApi - object-oriented interface
 * @export
 * @class PermissionSetsApi
 * @extends {BaseAPI}
 */
export class PermissionSetsApi extends BaseAPI {
    /**
     * Returns data about a specific permission set.
     * @summary Get one permission set
     * @param {PermissionSetsApiGetPermissionSetRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    public getPermissionSet(requestParameters: PermissionSetsApiGetPermissionSetRequest, ) {
        return PermissionSetsApiFp(this.configuration).getPermissionSet(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the list of assignments for a permission set.
     * @summary List permission set assignments
     * @param {PermissionSetsApiGetPermissionSetAssignmentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    public getPermissionSetAssignments(requestParameters: PermissionSetsApiGetPermissionSetAssignmentsRequest, ) {
        return PermissionSetsApiFp(this.configuration).getPermissionSetAssignments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all permission sets.
     * @summary Get all permission sets
     * @param {PermissionSetsApiGetPermissionSetsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof PermissionSetsApi
     */
    public getPermissionSets(requestParameters: PermissionSetsApiGetPermissionSetsRequest = {}, ) {
        return PermissionSetsApiFp(this.configuration).getPermissionSets(requestParameters.app, ).then((request) => request(this.axios, this.basePath));
    }
}
