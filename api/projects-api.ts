/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddProjectRequest } from '../models';
// @ts-ignore
import { AddProjectResponse201 } from '../models';
// @ts-ignore
import { DeleteProjectResponse200 } from '../models';
// @ts-ignore
import { GetActivitiesCollectionResponse200 } from '../models';
// @ts-ignore
import { GetProjectBoardsResponse200 } from '../models';
// @ts-ignore
import { GetProjectGroupsResponse200 } from '../models';
// @ts-ignore
import { GetProjectPhasesResponse200 } from '../models';
// @ts-ignore
import { GetProjectPlanResponse200 } from '../models';
// @ts-ignore
import { GetProjectResponse200 } from '../models';
// @ts-ignore
import { GetProjectsResponse200 } from '../models';
// @ts-ignore
import { GetTasksResponse200 } from '../models';
// @ts-ignore
import { ProjectPutPlanItemBodyObject } from '../models';
// @ts-ignore
import { UpdateProjectRequest } from '../models';
// @ts-ignore
import { UpdateProjectResponse200 } from '../models';
// @ts-ignore
import { UpdatedActivityPlanItem200 } from '../models';
// @ts-ignore
import { UpdatedTaskPlanItem200 } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {AddProjectRequest} [AddProjectRequest] 

         * @throws {RequiredError}
         */
        addProject: async (AddProjectRequest?: AddProjectRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        archiveProject: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archiveProject', 'id', id)
            const localVarPath = `/projects/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        deleteProject: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProject', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProject: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProject', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectActivities: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectActivities', 'id', id)
            const localVarPath = `/projects/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectGroups: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectGroups', 'id', id)
            const localVarPath = `/projects/{id}/groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectPlan: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectPlan', 'id', id)
            const localVarPath = `/projects/{id}/plan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        getProjectTasks: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectTasks', 'id', id)
            const localVarPath = `/projects/{id}/tasks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [status] If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
         * @param {number} [phase_id] If supplied, only projects in specified phase are returned
         * @param {boolean} [include_archived] If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.

         * @throws {RequiredError}
         */
        getProjects: async (cursor?: string, limit?: number, filter_id?: number, status?: string, phase_id?: number, include_archived?: boolean, ): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (phase_id !== undefined) {
                localVarQueryParameter['phase_id'] = phase_id;
            }

            if (include_archived !== undefined) {
                localVarQueryParameter['include_archived'] = include_archived;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        getProjectsBoards: async (): Promise<RequestArgs> => {
            const localVarPath = `/projects/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {number} board_id ID of the board for which phases are requested

         * @throws {RequiredError}
         */
        getProjectsPhases: async (board_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'board_id' is not null or undefined
            assertParamExists('getProjectsPhases', 'board_id', board_id)
            const localVarPath = `/projects/phases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:read", "projects:full"], configuration)

            if (board_id !== undefined) {
                localVarQueryParameter['board_id'] = board_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {number} id The ID of the project
         * @param {number} activityId The ID of the activity
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject] 

         * @throws {RequiredError}
         */
        putProjectPlanActivity: async (id: number, activityId: number, ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectPlanActivity', 'id', id)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('putProjectPlanActivity', 'activityId', activityId)
            const localVarPath = `/projects/{id}/plan/activities/{activityId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(ProjectPutPlanItemBodyObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {number} id The ID of the project
         * @param {number} taskId The ID of the task
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject] 

         * @throws {RequiredError}
         */
        putProjectPlanTask: async (id: number, taskId: number, ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectPlanTask', 'id', id)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('putProjectPlanTask', 'taskId', taskId)
            const localVarPath = `/projects/{id}/plan/tasks/{taskId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(ProjectPutPlanItemBodyObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a project.
         * @summary Update a project
         * @param {number} id The ID of the project
         * @param {UpdateProjectRequest} [UpdateProjectRequest] 

         * @throws {RequiredError}
         */
        updateProject: async (id: number, UpdateProjectRequest?: UpdateProjectRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProject', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["projects:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {AddProjectRequest} [AddProjectRequest] 

         * @throws {RequiredError}
         */
        async addProject(AddProjectRequest?: AddProjectRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddProjectResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProject(AddProjectRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async archiveProject(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateProjectResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveProject(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async deleteProject(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteProjectResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async getProject(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async getProjectActivities(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetActivitiesCollectionResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectActivities(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async getProjectGroups(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectGroupsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectGroups(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async getProjectPlan(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectPlanResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectPlan(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {number} id The ID of the project

         * @throws {RequiredError}
         */
        async getProjectTasks(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetTasksResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectTasks(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [status] If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
         * @param {number} [phase_id] If supplied, only projects in specified phase are returned
         * @param {boolean} [include_archived] If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.

         * @throws {RequiredError}
         */
        async getProjects(cursor?: string, limit?: number, filter_id?: number, status?: string, phase_id?: number, include_archived?: boolean, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(cursor, limit, filter_id, status, phase_id, include_archived, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        async getProjectsBoards(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectBoardsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsBoards();
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {number} board_id ID of the board for which phases are requested

         * @throws {RequiredError}
         */
        async getProjectsPhases(board_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProjectPhasesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsPhases(board_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {number} id The ID of the project
         * @param {number} activityId The ID of the activity
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject] 

         * @throws {RequiredError}
         */
        async putProjectPlanActivity(id: number, activityId: number, ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdatedActivityPlanItem200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectPlanActivity(id, activityId, ProjectPutPlanItemBodyObject, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {number} id The ID of the project
         * @param {number} taskId The ID of the task
         * @param {ProjectPutPlanItemBodyObject} [ProjectPutPlanItemBodyObject] 

         * @throws {RequiredError}
         */
        async putProjectPlanTask(id: number, taskId: number, ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdatedTaskPlanItem200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectPlanTask(id, taskId, ProjectPutPlanItemBodyObject, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a project.
         * @summary Update a project
         * @param {number} id The ID of the project
         * @param {UpdateProjectRequest} [UpdateProjectRequest] 

         * @throws {RequiredError}
         */
        async updateProject(id: number, UpdateProjectRequest?: UpdateProjectRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateProjectResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(id, UpdateProjectRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
         * @summary Add a project
         * @param {ProjectsApiAddProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addProject(requestParameters: ProjectsApiAddProjectRequest = {}, ): Promise<AddProjectResponse201> {
            return localVarFp.addProject(requestParameters.AddProjectRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Archives a project.
         * @summary Archive a project
         * @param {ProjectsApiArchiveProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        archiveProject(requestParameters: ProjectsApiArchiveProjectRequest, ): Promise<UpdateProjectResponse200> {
            return localVarFp.archiveProject(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a project as deleted.
         * @summary Delete a project
         * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteProject(requestParameters: ProjectsApiDeleteProjectRequest, ): Promise<DeleteProjectResponse200> {
            return localVarFp.deleteProject(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
         * @summary Get details of a project
         * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProject(requestParameters: ProjectsApiGetProjectRequest, ): Promise<GetProjectResponse200> {
            return localVarFp.getProject(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns activities linked to a specific project.
         * @summary Returns project activities
         * @param {ProjectsApiGetProjectActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectActivities(requestParameters: ProjectsApiGetProjectActivitiesRequest, ): Promise<GetActivitiesCollectionResponse200> {
            return localVarFp.getProjectActivities(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all active groups under a specific project.
         * @summary Returns project groups
         * @param {ProjectsApiGetProjectGroupsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectGroups(requestParameters: ProjectsApiGetProjectGroupsRequest, ): Promise<GetProjectGroupsResponse200> {
            return localVarFp.getProjectGroups(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
         * @summary Returns project plan
         * @param {ProjectsApiGetProjectPlanRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectPlan(requestParameters: ProjectsApiGetProjectPlanRequest, ): Promise<GetProjectPlanResponse200> {
            return localVarFp.getProjectPlan(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns tasks linked to a specific project.
         * @summary Returns project tasks
         * @param {ProjectsApiGetProjectTasksRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectTasks(requestParameters: ProjectsApiGetProjectTasksRequest, ): Promise<GetTasksResponse200> {
            return localVarFp.getProjectTasks(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
         * @summary Get all projects
         * @param {ProjectsApiGetProjectsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjects(requestParameters: ProjectsApiGetProjectsRequest = {}, ): Promise<GetProjectsResponse200> {
            return localVarFp.getProjects(requestParameters.cursor, requestParameters.limit, requestParameters.filter_id, requestParameters.status, requestParameters.phase_id, requestParameters.include_archived, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all projects boards that are not deleted.
         * @summary Get all project boards

         * @throws {RequiredError}
         */
        getProjectsBoards(): Promise<GetProjectBoardsResponse200> {
            return localVarFp.getProjectsBoards().then((request) => request(axios, basePath));
        },
        /**
         * Returns all active project phases under a specific board.
         * @summary Get project phases
         * @param {ProjectsApiGetProjectsPhasesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getProjectsPhases(requestParameters: ProjectsApiGetProjectsPhasesRequest, ): Promise<GetProjectPhasesResponse200> {
            return localVarFp.getProjectsPhases(requestParameters.board_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates an activity phase or group in a project.
         * @summary Update activity in project plan
         * @param {ProjectsApiPutProjectPlanActivityRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        putProjectPlanActivity(requestParameters: ProjectsApiPutProjectPlanActivityRequest, ): Promise<UpdatedActivityPlanItem200> {
            return localVarFp.putProjectPlanActivity(requestParameters.id, requestParameters.activityId, requestParameters.ProjectPutPlanItemBodyObject, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a task phase or group in a project.
         * @summary Update task in project plan
         * @param {ProjectsApiPutProjectPlanTaskRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        putProjectPlanTask(requestParameters: ProjectsApiPutProjectPlanTaskRequest, ): Promise<UpdatedTaskPlanItem200> {
            return localVarFp.putProjectPlanTask(requestParameters.id, requestParameters.taskId, requestParameters.ProjectPutPlanItemBodyObject, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a project.
         * @summary Update a project
         * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateProject(requestParameters: ProjectsApiUpdateProjectRequest, ): Promise<UpdateProjectResponse200> {
            return localVarFp.updateProject(requestParameters.id, requestParameters.UpdateProjectRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiAddProjectRequest
 */
export interface ProjectsApiAddProjectRequest {
    /**
     * 
     * @type {AddProjectRequest}
     * @memberof ProjectsApiAddProject
     */
    readonly AddProjectRequest?: AddProjectRequest
}

/**
 * Request parameters for archiveProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiArchiveProjectRequest
 */
export interface ProjectsApiArchiveProjectRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiArchiveProject
     */
    readonly id: number
}

/**
 * Request parameters for deleteProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectRequest
 */
export interface ProjectsApiDeleteProjectRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiDeleteProject
     */
    readonly id: number
}

/**
 * Request parameters for getProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRequest
 */
export interface ProjectsApiGetProjectRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiGetProject
     */
    readonly id: number
}

/**
 * Request parameters for getProjectActivities operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectActivitiesRequest
 */
export interface ProjectsApiGetProjectActivitiesRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiGetProjectActivities
     */
    readonly id: number
}

/**
 * Request parameters for getProjectGroups operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectGroupsRequest
 */
export interface ProjectsApiGetProjectGroupsRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiGetProjectGroups
     */
    readonly id: number
}

/**
 * Request parameters for getProjectPlan operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectPlanRequest
 */
export interface ProjectsApiGetProjectPlanRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiGetProjectPlan
     */
    readonly id: number
}

/**
 * Request parameters for getProjectTasks operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectTasksRequest
 */
export interface ProjectsApiGetProjectTasksRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiGetProjectTasks
     */
    readonly id: number
}

/**
 * Request parameters for getProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectsRequest
 */
export interface ProjectsApiGetProjectsRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
     * @type {number}
     * @memberof ProjectsApiGetProjects
     */
    readonly limit?: number

    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof ProjectsApiGetProjects
     */
    readonly filter_id?: number

    /**
     * If supplied, includes only projects with the specified statuses. Possible values are &#x60;open&#x60;, &#x60;completed&#x60;, &#x60;canceled&#x60; and &#x60;deleted&#x60;. By default &#x60;deleted&#x60; projects are not returned.
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly status?: string

    /**
     * If supplied, only projects in specified phase are returned
     * @type {number}
     * @memberof ProjectsApiGetProjects
     */
    readonly phase_id?: number

    /**
     * If supplied with &#x60;true&#x60; then archived projects are also included in the response. By default only not archived projects are returned.
     * @type {boolean}
     * @memberof ProjectsApiGetProjects
     */
    readonly include_archived?: boolean
}

/**
 * Request parameters for getProjectsPhases operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectsPhasesRequest
 */
export interface ProjectsApiGetProjectsPhasesRequest {
    /**
     * ID of the board for which phases are requested
     * @type {number}
     * @memberof ProjectsApiGetProjectsPhases
     */
    readonly board_id: number
}

/**
 * Request parameters for putProjectPlanActivity operation in ProjectsApi.
 * @export
 * @interface ProjectsApiPutProjectPlanActivityRequest
 */
export interface ProjectsApiPutProjectPlanActivityRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiPutProjectPlanActivity
     */
    readonly id: number

    /**
     * The ID of the activity
     * @type {number}
     * @memberof ProjectsApiPutProjectPlanActivity
     */
    readonly activityId: number

    /**
     * 
     * @type {ProjectPutPlanItemBodyObject}
     * @memberof ProjectsApiPutProjectPlanActivity
     */
    readonly ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject
}

/**
 * Request parameters for putProjectPlanTask operation in ProjectsApi.
 * @export
 * @interface ProjectsApiPutProjectPlanTaskRequest
 */
export interface ProjectsApiPutProjectPlanTaskRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiPutProjectPlanTask
     */
    readonly id: number

    /**
     * The ID of the task
     * @type {number}
     * @memberof ProjectsApiPutProjectPlanTask
     */
    readonly taskId: number

    /**
     * 
     * @type {ProjectPutPlanItemBodyObject}
     * @memberof ProjectsApiPutProjectPlanTask
     */
    readonly ProjectPutPlanItemBodyObject?: ProjectPutPlanItemBodyObject
}

/**
 * Request parameters for updateProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateProjectRequest
 */
export interface ProjectsApiUpdateProjectRequest {
    /**
     * The ID of the project
     * @type {number}
     * @memberof ProjectsApiUpdateProject
     */
    readonly id: number

    /**
     * 
     * @type {UpdateProjectRequest}
     * @memberof ProjectsApiUpdateProject
     */
    readonly UpdateProjectRequest?: UpdateProjectRequest
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Adds a new project. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys.
     * @summary Add a project
     * @param {ProjectsApiAddProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public addProject(requestParameters: ProjectsApiAddProjectRequest = {}, ) {
        return ProjectsApiFp(this.configuration).addProject(requestParameters.AddProjectRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archives a project.
     * @summary Archive a project
     * @param {ProjectsApiArchiveProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public archiveProject(requestParameters: ProjectsApiArchiveProjectRequest, ) {
        return ProjectsApiFp(this.configuration).archiveProject(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a project as deleted.
     * @summary Delete a project
     * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(requestParameters: ProjectsApiDeleteProjectRequest, ) {
        return ProjectsApiFp(this.configuration).deleteProject(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific project. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of project fields.
     * @summary Get details of a project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(requestParameters: ProjectsApiGetProjectRequest, ) {
        return ProjectsApiFp(this.configuration).getProject(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns activities linked to a specific project.
     * @summary Returns project activities
     * @param {ProjectsApiGetProjectActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectActivities(requestParameters: ProjectsApiGetProjectActivitiesRequest, ) {
        return ProjectsApiFp(this.configuration).getProjectActivities(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all active groups under a specific project.
     * @summary Returns project groups
     * @param {ProjectsApiGetProjectGroupsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectGroups(requestParameters: ProjectsApiGetProjectGroupsRequest, ) {
        return ProjectsApiFp(this.configuration).getProjectGroups(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about items in a project plan. Items consists of tasks and activities and are linked to specific project phase and group.
     * @summary Returns project plan
     * @param {ProjectsApiGetProjectPlanRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectPlan(requestParameters: ProjectsApiGetProjectPlanRequest, ) {
        return ProjectsApiFp(this.configuration).getProjectPlan(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns tasks linked to a specific project.
     * @summary Returns project tasks
     * @param {ProjectsApiGetProjectTasksRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectTasks(requestParameters: ProjectsApiGetProjectTasksRequest, ) {
        return ProjectsApiFp(this.configuration).getProjectTasks(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all projects. This is a cursor-paginated endpoint. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>.
     * @summary Get all projects
     * @param {ProjectsApiGetProjectsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjects(requestParameters: ProjectsApiGetProjectsRequest = {}, ) {
        return ProjectsApiFp(this.configuration).getProjects(requestParameters.cursor, requestParameters.limit, requestParameters.filter_id, requestParameters.status, requestParameters.phase_id, requestParameters.include_archived, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all projects boards that are not deleted.
     * @summary Get all project boards

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectsBoards() {
        return ProjectsApiFp(this.configuration).getProjectsBoards().then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all active project phases under a specific board.
     * @summary Get project phases
     * @param {ProjectsApiGetProjectsPhasesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectsPhases(requestParameters: ProjectsApiGetProjectsPhasesRequest, ) {
        return ProjectsApiFp(this.configuration).getProjectsPhases(requestParameters.board_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an activity phase or group in a project.
     * @summary Update activity in project plan
     * @param {ProjectsApiPutProjectPlanActivityRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectPlanActivity(requestParameters: ProjectsApiPutProjectPlanActivityRequest, ) {
        return ProjectsApiFp(this.configuration).putProjectPlanActivity(requestParameters.id, requestParameters.activityId, requestParameters.ProjectPutPlanItemBodyObject, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a task phase or group in a project.
     * @summary Update task in project plan
     * @param {ProjectsApiPutProjectPlanTaskRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectPlanTask(requestParameters: ProjectsApiPutProjectPlanTaskRequest, ) {
        return ProjectsApiFp(this.configuration).putProjectPlanTask(requestParameters.id, requestParameters.taskId, requestParameters.ProjectPutPlanItemBodyObject, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a project.
     * @summary Update a project
     * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateProject(requestParameters: ProjectsApiUpdateProjectRequest, ) {
        return ProjectsApiFp(this.configuration).updateProject(requestParameters.id, requestParameters.UpdateProjectRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
