/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddStageRequest } from '../model';
// @ts-ignore
import { DeleteStageResponse200 } from '../model';
// @ts-ignore
import { DeleteStagesResponse200 } from '../model';
// @ts-ignore
import { GetStageDealsResponse200 } from '../model';
// @ts-ignore
import { GetStageResponse200 } from '../model';
// @ts-ignore
import { GetStagesResponse200 } from '../model';
// @ts-ignore
import { StageResponse200 } from '../model';
// @ts-ignore
import { UpdateStageRequest } from '../model';
/**
 * StagesApi - axios parameter creator
 * @export
 */
export const StagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest] 

         * @throws {RequiredError}
         */
        addStage: async (AddStageRequest?: AddStageRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        deleteStage: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {string} ids The comma-separated stage IDs to delete

         * @throws {RequiredError}
         */
        deleteStages: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteStages', 'ids', ids)
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage
         * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

         * @throws {RequiredError}
         */
        getStage: async (id: number, everyone?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)

            if (everyone !== undefined) {
                localVarQueryParameter['everyone'] = everyone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists deals in a specific stage.
         * @summary Get deals in a stage
         * @param {number} id The ID of the stage
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStageDeals: async (id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStageDeals', 'id', id)
            const localVarPath = `/stages/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (everyone !== undefined) {
                localVarQueryParameter['everyone'] = everyone;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getStages: async (pipeline_id?: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/stages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "admin"], configuration)

            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest] 

         * @throws {RequiredError}
         */
        updateStage: async (id: number, UpdateStageRequest?: UpdateStageRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStage', 'id', id)
            const localVarPath = `/stages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StagesApi - functional programming interface
 * @export
 */
export const StagesApiFp = function(configuration?: Configuration) {

    /**
    * Axios interceptor to add the SDK version as a User-Agent header
    * */
    globalAxios.interceptors.request.use(function (config) {
        const version = require("../../package.json").version;
        config.headers['User-Agent'] = `Pipedrive-SDK-Javascript-${version}`;
        return config;
    });

    /**
    * Axios response interceptor to modify response structure
    */
    globalAxios.interceptors.response.use(function (response) {
        return response.hasOwnProperty('success') ? response : response.data;
    }, function (error) {
        if(error?.response?.data) {
            return Promise.reject(error.response.data);
        }
        return Promise.reject(error);
    });
    const localVarAxiosParamCreator = StagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {AddStageRequest} [AddStageRequest] 

         * @throws {RequiredError}
         */
        async addStage(AddStageRequest?: AddStageRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<StageResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStage(AddStageRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {number} id The ID of the stage

         * @throws {RequiredError}
         */
        async deleteStage(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStageResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStage(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {string} ids The comma-separated stage IDs to delete

         * @throws {RequiredError}
         */
        async deleteStages(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteStagesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStages(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {number} id The ID of the stage
         * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user

         * @throws {RequiredError}
         */
        async getStage(id: number, everyone?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStageResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStage(id, everyone, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists deals in a specific stage.
         * @summary Get deals in a stage
         * @param {number} id The ID of the stage
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {number} [user_id] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
         * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getStageDeals(id: number, filter_id?: number, user_id?: number, everyone?: 0 | 1, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStageDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStageDeals(id, filter_id, user_id, everyone, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {number} [pipeline_id] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getStages(pipeline_id?: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetStagesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStages(pipeline_id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {number} id The ID of the stage
         * @param {UpdateStageRequest} [UpdateStageRequest] 

         * @throws {RequiredError}
         */
        async updateStage(id: number, UpdateStageRequest?: UpdateStageRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<StageResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStage(id, UpdateStageRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StagesApi - factory interface
 * @export
 */
export const StagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StagesApiFp(configuration)
    return {
        /**
         * Adds a new stage, returns the ID upon success.
         * @summary Add a new stage
         * @param {StagesApiAddStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addStage(requestParameters: StagesApiAddStageRequest = {}, ): Promise<StageResponse200> {
            return localVarFp.addStage(requestParameters.AddStageRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a stage as deleted.
         * @summary Delete a stage
         * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteStage(requestParameters: StagesApiDeleteStageRequest, ): Promise<DeleteStageResponse200> {
            return localVarFp.deleteStage(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple stages as deleted.
         * @summary Delete multiple stages in bulk
         * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteStages(requestParameters: StagesApiDeleteStagesRequest, ): Promise<DeleteStagesResponse200> {
            return localVarFp.deleteStages(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific stage.
         * @summary Get one stage
         * @param {StagesApiGetStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStage(requestParameters: StagesApiGetStageRequest, ): Promise<GetStageResponse200> {
            return localVarFp.getStage(requestParameters.id, requestParameters.everyone, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists deals in a specific stage.
         * @summary Get deals in a stage
         * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStageDeals(requestParameters: StagesApiGetStageDealsRequest, ): Promise<GetStageDealsResponse200> {
            return localVarFp.getStageDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all stages.
         * @summary Get all stages
         * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getStages(requestParameters: StagesApiGetStagesRequest = {}, ): Promise<GetStagesResponse200> {
            return localVarFp.getStages(requestParameters.pipeline_id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a stage.
         * @summary Update stage details
         * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateStage(requestParameters: StagesApiUpdateStageRequest, ): Promise<StageResponse200> {
            return localVarFp.updateStage(requestParameters.id, requestParameters.UpdateStageRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addStage operation in StagesApi.
 * @export
 * @interface StagesApiAddStageRequest
 */
export interface StagesApiAddStageRequest {
    /**
     * 
     * @type {AddStageRequest}
     * @memberof StagesApiAddStage
     */
    readonly AddStageRequest?: AddStageRequest
}

/**
 * Request parameters for deleteStage operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStageRequest
 */
export interface StagesApiDeleteStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiDeleteStage
     */
    readonly id: number
}

/**
 * Request parameters for deleteStages operation in StagesApi.
 * @export
 * @interface StagesApiDeleteStagesRequest
 */
export interface StagesApiDeleteStagesRequest {
    /**
     * The comma-separated stage IDs to delete
     * @type {string}
     * @memberof StagesApiDeleteStages
     */
    readonly ids: string
}

/**
 * Request parameters for getStage operation in StagesApi.
 * @export
 * @interface StagesApiGetStageRequest
 */
export interface StagesApiGetStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStage
     */
    readonly id: number

    /**
     * If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user
     * @type {0 | 1}
     * @memberof StagesApiGetStage
     */
    readonly everyone?: 0 | 1
}

/**
 * Request parameters for getStageDeals operation in StagesApi.
 * @export
 * @interface StagesApiGetStageDealsRequest
 */
export interface StagesApiGetStageDealsRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly id: number

    /**
     * If supplied, only deals matching the given filter will be returned
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly filter_id?: number

    /**
     * If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly user_id?: number

    /**
     * If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
     * @type {0 | 1}
     * @memberof StagesApiGetStageDeals
     */
    readonly everyone?: 0 | 1

    /**
     * Pagination start
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof StagesApiGetStageDeals
     */
    readonly limit?: number
}

/**
 * Request parameters for getStages operation in StagesApi.
 * @export
 * @interface StagesApiGetStagesRequest
 */
export interface StagesApiGetStagesRequest {
    /**
     * The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly pipeline_id?: number

    /**
     * Pagination start
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof StagesApiGetStages
     */
    readonly limit?: number
}

/**
 * Request parameters for updateStage operation in StagesApi.
 * @export
 * @interface StagesApiUpdateStageRequest
 */
export interface StagesApiUpdateStageRequest {
    /**
     * The ID of the stage
     * @type {number}
     * @memberof StagesApiUpdateStage
     */
    readonly id: number

    /**
     * 
     * @type {UpdateStageRequest}
     * @memberof StagesApiUpdateStage
     */
    readonly UpdateStageRequest?: UpdateStageRequest
}

/**
 * StagesApi - object-oriented interface
 * @export
 * @class StagesApi
 * @extends {BaseAPI}
 */
export class StagesApi extends BaseAPI {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {StagesApiAddStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public addStage(requestParameters: StagesApiAddStageRequest = {}, ) {
        return StagesApiFp(this.configuration).addStage(requestParameters.AddStageRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {StagesApiDeleteStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public deleteStage(requestParameters: StagesApiDeleteStageRequest, ) {
        return StagesApiFp(this.configuration).deleteStage(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {StagesApiDeleteStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public deleteStages(requestParameters: StagesApiDeleteStagesRequest, ) {
        return StagesApiFp(this.configuration).deleteStages(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {StagesApiGetStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public getStage(requestParameters: StagesApiGetStageRequest, ) {
        return StagesApiFp(this.configuration).getStage(requestParameters.id, requestParameters.everyone, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists deals in a specific stage.
     * @summary Get deals in a stage
     * @param {StagesApiGetStageDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public getStageDeals(requestParameters: StagesApiGetStageDealsRequest, ) {
        return StagesApiFp(this.configuration).getStageDeals(requestParameters.id, requestParameters.filter_id, requestParameters.user_id, requestParameters.everyone, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {StagesApiGetStagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public getStages(requestParameters: StagesApiGetStagesRequest = {}, ) {
        return StagesApiFp(this.configuration).getStages(requestParameters.pipeline_id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {StagesApiUpdateStageRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof StagesApi
     */
    public updateStage(requestParameters: StagesApiUpdateStageRequest, ) {
        return StagesApiFp(this.configuration).updateStage(requestParameters.id, requestParameters.UpdateStageRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
