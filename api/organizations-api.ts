/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddOrganizationFollowerRequest } from '../models';
// @ts-ignore
import { AddOrganizationFollowerResponse } from '../models';
// @ts-ignore
import { AddOrganizationRequest } from '../models';
// @ts-ignore
import { AddOrganizationResponse } from '../models';
// @ts-ignore
import { DeleteOrganizationFollowerResponse } from '../models';
// @ts-ignore
import { DeleteOrganizationResponse } from '../models';
// @ts-ignore
import { DeleteOrganizationsResponse } from '../models';
// @ts-ignore
import { FailResponse } from '../models';
// @ts-ignore
import { GetAssociatedActivitiesResponse } from '../models';
// @ts-ignore
import { GetAssociatedDealsResponse } from '../models';
// @ts-ignore
import { GetAssociatedFilesResponse } from '../models';
// @ts-ignore
import { GetAssociatedFollowersResponse1 } from '../models';
// @ts-ignore
import { GetAssociatedMailMessagesResponse } from '../models';
// @ts-ignore
import { GetAssociatedOrganizationUpdatesResponse } from '../models';
// @ts-ignore
import { GetChangelogResponse } from '../models';
// @ts-ignore
import { GetOrganizationResponse } from '../models';
// @ts-ignore
import { GetOrganizationSearchResponse } from '../models';
// @ts-ignore
import { GetOrganizationsCollection200Response } from '../models';
// @ts-ignore
import { GetOrganizationsResponse } from '../models';
// @ts-ignore
import { GetPermittedUsersResponse1 } from '../models';
// @ts-ignore
import { GetPersonsResponse } from '../models';
// @ts-ignore
import { MergeOrganizationsRequest } from '../models';
// @ts-ignore
import { MergeOrganizationsResponse } from '../models';
// @ts-ignore
import { UpdateOrganizationRequest } from '../models';
// @ts-ignore
import { UpdateOrganizationResponse } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest] 

         * @throws {RequiredError}
         */
        addOrganization: async (AddOrganizationRequest?: AddOrganizationRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddOrganizationFollowerRequest} [AddOrganizationFollowerRequest] 

         * @throws {RequiredError}
         */
        addOrganizationFollower: async (id: number, AddOrganizationFollowerRequest?: AddOrganizationFollowerRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addOrganizationFollower', 'id', id)
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddOrganizationFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        deleteOrganization: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the follower

         * @throws {RequiredError}
         */
        deleteOrganizationFollower: async (id: number, follower_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganizationFollower', 'id', id)
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteOrganizationFollower', 'follower_id', follower_id)
            const localVarPath = `/organizations/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        deleteOrganizations: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteOrganizations', 'ids', ids)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganization: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        getOrganizationActivities: async (id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationActivities', 'id', id)
            const localVarPath = `/organizations/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }

            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {number} id The ID of the organization
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationChangelog: async (id: number, cursor?: string, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationChangelog', 'id', id)
            const localVarPath = `/organizations/{id}/changelog`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [only_primary_association] If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.

         * @throws {RequiredError}
         */
        getOrganizationDeals: async (id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', sort?: string, only_primary_association?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationDeals', 'id', id)
            const localVarPath = `/organizations/{id}/deals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (only_primary_association !== undefined) {
                localVarQueryParameter['only_primary_association'] = only_primary_association;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        getOrganizationFiles: async (id: number, start?: number, limit?: number, sort?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationFiles', 'id', id)
            const localVarPath = `/organizations/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationFollowers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationFollowers', 'id', id)
            const localVarPath = `/organizations/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationMailMessages: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationMailMessages', 'id', id)
            const localVarPath = `/organizations/{id}/mailMessages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationPersons: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationPersons', 'id', id)
            const localVarPath = `/organizations/{id}/persons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).

         * @throws {RequiredError}
         */
        getOrganizationUpdates: async (id: number, start?: number, limit?: number, all_changes?: string, items?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationUpdates', 'id', id)
            const localVarPath = `/organizations/{id}/flow`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (all_changes !== undefined) {
                localVarQueryParameter['all_changes'] = all_changes;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        getOrganizationUsers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationUsers', 'id', id)
            const localVarPath = `/organizations/{id}/permittedUsers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {number} [user_id] If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

         * @throws {RequiredError}
         */
        getOrganizations: async (user_id?: number, filter_id?: number, first_char?: string, start?: number, limit?: number, sort?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (first_char !== undefined) {
                localVarQueryParameter['first_char'] = first_char;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [owner_id] If supplied, only organizations owned by the given user will be returned
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)

         * @throws {RequiredError}
         */
        getOrganizationsCollection: async (cursor?: string, limit?: number, since?: string, until?: string, owner_id?: number, first_char?: string, ): Promise<RequestArgs> => {
            const localVarPath = `/organizations/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (owner_id !== undefined) {
                localVarQueryParameter['owner_id'] = owner_id;
            }

            if (first_char !== undefined) {
                localVarQueryParameter['first_char'] = first_char;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {number} id The ID of the organization
         * @param {MergeOrganizationsRequest} [MergeOrganizationsRequest] 

         * @throws {RequiredError}
         */
        mergeOrganizations: async (id: number, MergeOrganizationsRequest?: MergeOrganizationsRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mergeOrganizations', 'id', id)
            const localVarPath = `/organizations/{id}/merge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(MergeOrganizationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        searchOrganization: async (term: string, fields?: 'address' | 'custom_fields' | 'notes' | 'name', exact_match?: boolean, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchOrganization', 'term', term)
            const localVarPath = `/organizations/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest] 

         * @throws {RequiredError}
         */
        updateOrganization: async (id: number, UpdateOrganizationRequest?: UpdateOrganizationRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {AddOrganizationRequest} [AddOrganizationRequest] 

         * @throws {RequiredError}
         */
        async addOrganization(AddOrganizationRequest?: AddOrganizationRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddOrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrganization(AddOrganizationRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {number} id The ID of the organization
         * @param {AddOrganizationFollowerRequest} [AddOrganizationFollowerRequest] 

         * @throws {RequiredError}
         */
        async addOrganizationFollower(id: number, AddOrganizationFollowerRequest?: AddOrganizationFollowerRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddOrganizationFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrganizationFollower(id, AddOrganizationFollowerRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        async deleteOrganization(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteOrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {number} id The ID of the organization
         * @param {number} follower_id The ID of the follower

         * @throws {RequiredError}
         */
        async deleteOrganizationFollower(id: number, follower_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteOrganizationFollowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationFollower(id, follower_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        async deleteOrganizations(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizations(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        async getOrganization(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        async getOrganizationActivities(id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedActivitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationActivities(id, start, limit, done, exclude, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {number} id The ID of the organization
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getOrganizationChangelog(id: number, cursor?: string, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetChangelogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationChangelog(id, cursor, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [only_primary_association] If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.

         * @throws {RequiredError}
         */
        async getOrganizationDeals(id: number, start?: number, limit?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', sort?: string, only_primary_association?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedDealsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationDeals(id, start, limit, status, sort, only_primary_association, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        async getOrganizationFiles(id: number, start?: number, limit?: number, sort?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationFiles(id, start, limit, sort, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        async getOrganizationFollowers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFollowersResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationFollowers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getOrganizationMailMessages(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedMailMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMailMessages(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getOrganizationPersons(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPersonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationPersons(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {number} id The ID of the organization
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).

         * @throws {RequiredError}
         */
        async getOrganizationUpdates(id: number, start?: number, limit?: number, all_changes?: string, items?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedOrganizationUpdatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUpdates(id, start, limit, all_changes, items, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {number} id The ID of the organization

         * @throws {RequiredError}
         */
        async getOrganizationUsers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetPermittedUsersResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUsers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {number} [user_id] If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).

         * @throws {RequiredError}
         */
        async getOrganizations(user_id?: number, filter_id?: number, first_char?: string, start?: number, limit?: number, sort?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(user_id, filter_id, first_char, start, limit, sort, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [owner_id] If supplied, only organizations owned by the given user will be returned
         * @param {string} [first_char] If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)

         * @throws {RequiredError}
         */
        async getOrganizationsCollection(cursor?: string, limit?: number, since?: string, until?: string, owner_id?: number, first_char?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationsCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationsCollection(cursor, limit, since, until, owner_id, first_char, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {number} id The ID of the organization
         * @param {MergeOrganizationsRequest} [MergeOrganizationsRequest] 

         * @throws {RequiredError}
         */
        async mergeOrganizations(id: number, MergeOrganizationsRequest?: MergeOrganizationsRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MergeOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeOrganizations(id, MergeOrganizationsRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async searchOrganization(term: string, fields?: 'address' | 'custom_fields' | 'notes' | 'name', exact_match?: boolean, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetOrganizationSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchOrganization(term, fields, exact_match, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {number} id The ID of the organization
         * @param {UpdateOrganizationRequest} [UpdateOrganizationRequest] 

         * @throws {RequiredError}
         */
        async updateOrganization(id: number, UpdateOrganizationRequest?: UpdateOrganizationRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdateOrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(id, UpdateOrganizationRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
         * @summary Add an organization
         * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganization(requestParameters: OrganizationsApiAddOrganizationRequest = {}, ): Promise<AddOrganizationResponse> {
            return localVarFp.addOrganization(requestParameters.AddOrganizationRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a follower to an organization.
         * @summary Add a follower to an organization
         * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganizationFollower(requestParameters: OrganizationsApiAddOrganizationFollowerRequest, ): Promise<AddOrganizationFollowerResponse> {
            return localVarFp.addOrganizationFollower(requestParameters.id, requestParameters.AddOrganizationFollowerRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
         * @summary Delete an organization
         * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganization(requestParameters: OrganizationsApiDeleteOrganizationRequest, ): Promise<DeleteOrganizationResponse> {
            return localVarFp.deleteOrganization(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
         * @summary Delete a follower from an organization
         * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationFollower(requestParameters: OrganizationsApiDeleteOrganizationFollowerRequest, ): Promise<DeleteOrganizationFollowerResponse> {
            return localVarFp.deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
         * @summary Delete multiple organizations in bulk
         * @param {OrganizationsApiDeleteOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizations(requestParameters: OrganizationsApiDeleteOrganizationsRequest, ): Promise<DeleteOrganizationsResponse> {
            return localVarFp.deleteOrganizations(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
         * @summary Get details of an organization
         * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, ): Promise<GetOrganizationResponse> {
            return localVarFp.getOrganization(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists activities associated with an organization.
         * @summary List activities associated with an organization
         * @param {OrganizationsApiGetOrganizationActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationActivities(requestParameters: OrganizationsApiGetOrganizationActivitiesRequest, ): Promise<GetAssociatedActivitiesResponse> {
            return localVarFp.getOrganizationActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists updates about field values of an organization.
         * @summary List updates about organization field values
         * @param {OrganizationsApiGetOrganizationChangelogRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationChangelog(requestParameters: OrganizationsApiGetOrganizationChangelogRequest, ): Promise<GetChangelogResponse> {
            return localVarFp.getOrganizationChangelog(requestParameters.id, requestParameters.cursor, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists deals associated with an organization.
         * @summary List deals associated with an organization
         * @param {OrganizationsApiGetOrganizationDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationDeals(requestParameters: OrganizationsApiGetOrganizationDealsRequest, ): Promise<GetAssociatedDealsResponse> {
            return localVarFp.getOrganizationDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, requestParameters.sort, requestParameters.only_primary_association, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists files associated with an organization.
         * @summary List files attached to an organization
         * @param {OrganizationsApiGetOrganizationFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFiles(requestParameters: OrganizationsApiGetOrganizationFilesRequest, ): Promise<GetAssociatedFilesResponse> {
            return localVarFp.getOrganizationFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of an organization.
         * @summary List followers of an organization
         * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFollowers(requestParameters: OrganizationsApiGetOrganizationFollowersRequest, ): Promise<GetAssociatedFollowersResponse1> {
            return localVarFp.getOrganizationFollowers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists mail messages associated with an organization.
         * @summary List mail messages associated with an organization
         * @param {OrganizationsApiGetOrganizationMailMessagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationMailMessages(requestParameters: OrganizationsApiGetOrganizationMailMessagesRequest, ): Promise<GetAssociatedMailMessagesResponse> {
            return localVarFp.getOrganizationMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List persons of an organization
         * @param {OrganizationsApiGetOrganizationPersonsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationPersons(requestParameters: OrganizationsApiGetOrganizationPersonsRequest, ): Promise<GetPersonsResponse> {
            return localVarFp.getOrganizationPersons(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists updates about an organization.
         * @summary List updates about an organization
         * @param {OrganizationsApiGetOrganizationUpdatesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationUpdates(requestParameters: OrganizationsApiGetOrganizationUpdatesRequest, ): Promise<GetAssociatedOrganizationUpdatesResponse> {
            return localVarFp.getOrganizationUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items, ).then((request) => request(axios, basePath));
        },
        /**
         * List users permitted to access an organization.
         * @summary List permitted users
         * @param {OrganizationsApiGetOrganizationUsersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationUsers(requestParameters: OrganizationsApiGetOrganizationUsersRequest, ): Promise<GetPermittedUsersResponse1> {
            return localVarFp.getOrganizationUsers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all organizations.
         * @summary Get all organizations
         * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizations(requestParameters: OrganizationsApiGetOrganizationsRequest = {}, ): Promise<GetOrganizationsResponse> {
            return localVarFp.getOrganizations(requestParameters.user_id, requestParameters.filter_id, requestParameters.first_char, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all organizations (BETA)
         * @param {OrganizationsApiGetOrganizationsCollectionRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationsCollection(requestParameters: OrganizationsApiGetOrganizationsCollectionRequest = {}, ): Promise<GetOrganizationsCollection200Response> {
            return localVarFp.getOrganizationsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.owner_id, requestParameters.first_char, ).then((request) => request(axios, basePath));
        },
        /**
         * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
         * @summary Merge two organizations
         * @param {OrganizationsApiMergeOrganizationsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        mergeOrganizations(requestParameters: OrganizationsApiMergeOrganizationsRequest, ): Promise<MergeOrganizationsResponse> {
            return localVarFp.mergeOrganizations(requestParameters.id, requestParameters.MergeOrganizationsRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
         * @summary Search organizations
         * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchOrganization(requestParameters: OrganizationsApiSearchOrganizationRequest, ): Promise<GetOrganizationSearchResponse> {
            return localVarFp.searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of an organization.
         * @summary Update an organization
         * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateOrganization(requestParameters: OrganizationsApiUpdateOrganizationRequest, ): Promise<UpdateOrganizationResponse> {
            return localVarFp.updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAddOrganizationRequest
 */
export interface OrganizationsApiAddOrganizationRequest {
    /**
     * 
     * @type {AddOrganizationRequest}
     * @memberof OrganizationsApiAddOrganization
     */
    readonly AddOrganizationRequest?: AddOrganizationRequest
}

/**
 * Request parameters for addOrganizationFollower operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAddOrganizationFollowerRequest
 */
export interface OrganizationsApiAddOrganizationFollowerRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiAddOrganizationFollower
     */
    readonly id: number

    /**
     * 
     * @type {AddOrganizationFollowerRequest}
     * @memberof OrganizationsApiAddOrganizationFollower
     */
    readonly AddOrganizationFollowerRequest?: AddOrganizationFollowerRequest
}

/**
 * Request parameters for deleteOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationRequest
 */
export interface OrganizationsApiDeleteOrganizationRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiDeleteOrganization
     */
    readonly id: number
}

/**
 * Request parameters for deleteOrganizationFollower operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationFollowerRequest
 */
export interface OrganizationsApiDeleteOrganizationFollowerRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiDeleteOrganizationFollower
     */
    readonly id: number

    /**
     * The ID of the follower
     * @type {number}
     * @memberof OrganizationsApiDeleteOrganizationFollower
     */
    readonly follower_id: number
}

/**
 * Request parameters for deleteOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationsRequest
 */
export interface OrganizationsApiDeleteOrganizationsRequest {
    /**
     * The comma-separated IDs that will be deleted
     * @type {string}
     * @memberof OrganizationsApiDeleteOrganizations
     */
    readonly ids: string
}

/**
 * Request parameters for getOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationRequest
 */
export interface OrganizationsApiGetOrganizationRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganization
     */
    readonly id: number
}

/**
 * Request parameters for getOrganizationActivities operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationActivitiesRequest
 */
export interface OrganizationsApiGetOrganizationActivitiesRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationActivities
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationActivities
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationActivities
     */
    readonly limit?: number

    /**
     * Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
     * @type {0 | 1}
     * @memberof OrganizationsApiGetOrganizationActivities
     */
    readonly done?: 0 | 1

    /**
     * A comma-separated string of activity IDs to exclude from result
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationActivities
     */
    readonly exclude?: string
}

/**
 * Request parameters for getOrganizationChangelog operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationChangelogRequest
 */
export interface OrganizationsApiGetOrganizationChangelogRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationChangelog
     */
    readonly id: number

    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationChangelog
     */
    readonly cursor?: string

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationChangelog
     */
    readonly limit?: number
}

/**
 * Request parameters for getOrganizationDeals operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationDealsRequest
 */
export interface OrganizationsApiGetOrganizationDealsRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly limit?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly sort?: string

    /**
     * If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.
     * @type {0 | 1}
     * @memberof OrganizationsApiGetOrganizationDeals
     */
    readonly only_primary_association?: 0 | 1
}

/**
 * Request parameters for getOrganizationFiles operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationFilesRequest
 */
export interface OrganizationsApiGetOrganizationFilesRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationFiles
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationFiles
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationFiles
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationFiles
     */
    readonly sort?: string
}

/**
 * Request parameters for getOrganizationFollowers operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationFollowersRequest
 */
export interface OrganizationsApiGetOrganizationFollowersRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationFollowers
     */
    readonly id: number
}

/**
 * Request parameters for getOrganizationMailMessages operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationMailMessagesRequest
 */
export interface OrganizationsApiGetOrganizationMailMessagesRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMailMessages
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMailMessages
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationMailMessages
     */
    readonly limit?: number
}

/**
 * Request parameters for getOrganizationPersons operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationPersonsRequest
 */
export interface OrganizationsApiGetOrganizationPersonsRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationPersons
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationPersons
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationPersons
     */
    readonly limit?: number
}

/**
 * Request parameters for getOrganizationUpdates operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationUpdatesRequest
 */
export interface OrganizationsApiGetOrganizationUpdatesRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationUpdates
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationUpdates
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationUpdates
     */
    readonly limit?: number

    /**
     * Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationUpdates
     */
    readonly all_changes?: string

    /**
     * A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document).
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationUpdates
     */
    readonly items?: string
}

/**
 * Request parameters for getOrganizationUsers operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationUsersRequest
 */
export interface OrganizationsApiGetOrganizationUsersRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationUsers
     */
    readonly id: number
}

/**
 * Request parameters for getOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationsRequest
 */
export interface OrganizationsApiGetOrganizationsRequest {
    /**
     * If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @type {number}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly user_id?: number

    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly filter_id?: number

    /**
     * If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly first_char?: string

    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof OrganizationsApiGetOrganizations
     */
    readonly sort?: string
}

/**
 * Request parameters for getOrganizationsCollection operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationsCollectionRequest
 */
export interface OrganizationsApiGetOrganizationsCollectionRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly limit?: number

    /**
     * The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly since?: string

    /**
     * The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly until?: string

    /**
     * If supplied, only organizations owned by the given user will be returned
     * @type {number}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly owner_id?: number

    /**
     * If supplied, only organizations whose name starts with the specified letter will be returned (case-insensitive)
     * @type {string}
     * @memberof OrganizationsApiGetOrganizationsCollection
     */
    readonly first_char?: string
}

/**
 * Request parameters for mergeOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiMergeOrganizationsRequest
 */
export interface OrganizationsApiMergeOrganizationsRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiMergeOrganizations
     */
    readonly id: number

    /**
     * 
     * @type {MergeOrganizationsRequest}
     * @memberof OrganizationsApiMergeOrganizations
     */
    readonly MergeOrganizationsRequest?: MergeOrganizationsRequest
}

/**
 * Request parameters for searchOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiSearchOrganizationRequest
 */
export interface OrganizationsApiSearchOrganizationRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof OrganizationsApiSearchOrganization
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'address' | 'custom_fields' | 'notes' | 'name'}
     * @memberof OrganizationsApiSearchOrganization
     */
    readonly fields?: 'address' | 'custom_fields' | 'notes' | 'name'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof OrganizationsApiSearchOrganization
     */
    readonly exact_match?: boolean

    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof OrganizationsApiSearchOrganization
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationsApiSearchOrganization
     */
    readonly limit?: number
}

/**
 * Request parameters for updateOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiUpdateOrganizationRequest
 */
export interface OrganizationsApiUpdateOrganizationRequest {
    /**
     * The ID of the organization
     * @type {number}
     * @memberof OrganizationsApiUpdateOrganization
     */
    readonly id: number

    /**
     * 
     * @type {UpdateOrganizationRequest}
     * @memberof OrganizationsApiUpdateOrganization
     */
    readonly UpdateOrganizationRequest?: UpdateOrganizationRequest
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * @summary Add an organization
     * @param {OrganizationsApiAddOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public addOrganization(requestParameters: OrganizationsApiAddOrganizationRequest = {}, ) {
        return OrganizationsApiFp(this.configuration).addOrganization(requestParameters.AddOrganizationRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a follower to an organization.
     * @summary Add a follower to an organization
     * @param {OrganizationsApiAddOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public addOrganizationFollower(requestParameters: OrganizationsApiAddOrganizationFollowerRequest, ) {
        return OrganizationsApiFp(this.configuration).addOrganizationFollower(requestParameters.id, requestParameters.AddOrganizationFollowerRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
     * @summary Delete an organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrganization(requestParameters: OrganizationsApiDeleteOrganizationRequest, ) {
        return OrganizationsApiFp(this.configuration).deleteOrganization(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * @summary Delete a follower from an organization
     * @param {OrganizationsApiDeleteOrganizationFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrganizationFollower(requestParameters: OrganizationsApiDeleteOrganizationFollowerRequest, ) {
        return OrganizationsApiFp(this.configuration).deleteOrganizationFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
     * @summary Delete multiple organizations in bulk
     * @param {OrganizationsApiDeleteOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrganizations(requestParameters: OrganizationsApiDeleteOrganizationsRequest, ) {
        return OrganizationsApiFp(this.configuration).deleteOrganizations(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * @summary Get details of an organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganization(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists activities associated with an organization.
     * @summary List activities associated with an organization
     * @param {OrganizationsApiGetOrganizationActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationActivities(requestParameters: OrganizationsApiGetOrganizationActivitiesRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists updates about field values of an organization.
     * @summary List updates about organization field values
     * @param {OrganizationsApiGetOrganizationChangelogRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationChangelog(requestParameters: OrganizationsApiGetOrganizationChangelogRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationChangelog(requestParameters.id, requestParameters.cursor, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists deals associated with an organization.
     * @summary List deals associated with an organization
     * @param {OrganizationsApiGetOrganizationDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationDeals(requestParameters: OrganizationsApiGetOrganizationDealsRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationDeals(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.status, requestParameters.sort, requestParameters.only_primary_association, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists files associated with an organization.
     * @summary List files attached to an organization
     * @param {OrganizationsApiGetOrganizationFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationFiles(requestParameters: OrganizationsApiGetOrganizationFilesRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the followers of an organization.
     * @summary List followers of an organization
     * @param {OrganizationsApiGetOrganizationFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationFollowers(requestParameters: OrganizationsApiGetOrganizationFollowersRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationFollowers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists mail messages associated with an organization.
     * @summary List mail messages associated with an organization
     * @param {OrganizationsApiGetOrganizationMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationMailMessages(requestParameters: OrganizationsApiGetOrganizationMailMessagesRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List persons of an organization
     * @param {OrganizationsApiGetOrganizationPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationPersons(requestParameters: OrganizationsApiGetOrganizationPersonsRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationPersons(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists updates about an organization.
     * @summary List updates about an organization
     * @param {OrganizationsApiGetOrganizationUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationUpdates(requestParameters: OrganizationsApiGetOrganizationUpdatesRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List users permitted to access an organization.
     * @summary List permitted users
     * @param {OrganizationsApiGetOrganizationUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationUsers(requestParameters: OrganizationsApiGetOrganizationUsersRequest, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationUsers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all organizations.
     * @summary Get all organizations
     * @param {OrganizationsApiGetOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizations(requestParameters: OrganizationsApiGetOrganizationsRequest = {}, ) {
        return OrganizationsApiFp(this.configuration).getOrganizations(requestParameters.user_id, requestParameters.filter_id, requestParameters.first_char, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all organizations. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all organizations (BETA)
     * @param {OrganizationsApiGetOrganizationsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationsCollection(requestParameters: OrganizationsApiGetOrganizationsCollectionRequest = {}, ) {
        return OrganizationsApiFp(this.configuration).getOrganizationsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.owner_id, requestParameters.first_char, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * @summary Merge two organizations
     * @param {OrganizationsApiMergeOrganizationsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public mergeOrganizations(requestParameters: OrganizationsApiMergeOrganizationsRequest, ) {
        return OrganizationsApiFp(this.configuration).mergeOrganizations(requestParameters.id, requestParameters.MergeOrganizationsRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search organizations
     * @param {OrganizationsApiSearchOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public searchOrganization(requestParameters: OrganizationsApiSearchOrganizationRequest, ) {
        return OrganizationsApiFp(this.configuration).searchOrganization(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of an organization.
     * @summary Update an organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public updateOrganization(requestParameters: OrganizationsApiUpdateOrganizationRequest, ) {
        return OrganizationsApiFp(this.configuration).updateOrganization(requestParameters.id, requestParameters.UpdateOrganizationRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
