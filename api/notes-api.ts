/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddNoteRequest } from '../models';
// @ts-ignore
import { CommentPostPutObject } from '../models';
// @ts-ignore
import { DeleteCommentResponse } from '../models';
// @ts-ignore
import { DeleteNoteResponse } from '../models';
// @ts-ignore
import { GetCommentsResponse } from '../models';
// @ts-ignore
import { GetNotesResponse } from '../models';
// @ts-ignore
import { NoteRequest } from '../models';
// @ts-ignore
import { UpsertCommentResponse } from '../models';
// @ts-ignore
import { UpsertNoteResponse } from '../models';
/**
 * NotesApi - axios parameter creator
 * @export
 */
export const NotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {AddNoteRequest} [AddNoteRequest] 

         * @throws {RequiredError}
         */
        addNote: async (AddNoteRequest?: AddNoteRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {number} id The ID of the note
         * @param {CommentPostPutObject} [CommentPostPutObject] 

         * @throws {RequiredError}
         */
        addNoteComment: async (id: number, CommentPostPutObject?: CommentPostPutObject, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addNoteComment', 'id', id)
            const localVarPath = `/notes/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(CommentPostPutObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        deleteComment: async (id: number, commentId: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteComment', 'id', id)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('deleteComment', 'commentId', commentId)
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        deleteNote: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNote', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        getComment: async (id: number, commentId: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getComment', 'id', id)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('getComment', 'commentId', commentId)
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        getNote: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNote', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {number} id The ID of the note
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getNoteComments: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNoteComments', 'id', id)
            const localVarPath = `/notes/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
         * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
         * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
         * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
         * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
         * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
         * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
         * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
         * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
         * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

         * @throws {RequiredError}
         */
        getNotes: async (user_id?: number, lead_id?: string, deal_id?: number, person_id?: number, org_id?: number, start?: number, limit?: number, sort?: string, start_date?: string, end_date?: string, pinned_to_lead_flag?: 0 | 1, pinned_to_deal_flag?: 0 | 1, pinned_to_organization_flag?: 0 | 1, pinned_to_person_flag?: 0 | 1, ): Promise<RequestArgs> => {
            const localVarPath = `/notes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"], configuration)

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (lead_id !== undefined) {
                localVarQueryParameter['lead_id'] = lead_id;
            }

            if (deal_id !== undefined) {
                localVarQueryParameter['deal_id'] = deal_id;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date as any instanceof Date) ?
                    (start_date as any).toISOString().substr(0,10) :
                    start_date;
            }

            if (end_date !== undefined) {
                localVarQueryParameter['end_date'] = (end_date as any instanceof Date) ?
                    (end_date as any).toISOString().substr(0,10) :
                    end_date;
            }

            if (pinned_to_lead_flag !== undefined) {
                localVarQueryParameter['pinned_to_lead_flag'] = pinned_to_lead_flag;
            }

            if (pinned_to_deal_flag !== undefined) {
                localVarQueryParameter['pinned_to_deal_flag'] = pinned_to_deal_flag;
            }

            if (pinned_to_organization_flag !== undefined) {
                localVarQueryParameter['pinned_to_organization_flag'] = pinned_to_organization_flag;
            }

            if (pinned_to_person_flag !== undefined) {
                localVarQueryParameter['pinned_to_person_flag'] = pinned_to_person_flag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment
         * @param {CommentPostPutObject} [CommentPostPutObject] 

         * @throws {RequiredError}
         */
        updateCommentForNote: async (id: number, commentId: string, CommentPostPutObject?: CommentPostPutObject, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCommentForNote', 'id', id)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('updateCommentForNote', 'commentId', commentId)
            const localVarPath = `/notes/{id}/comments/{commentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(CommentPostPutObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a note.
         * @summary Update a note
         * @param {number} id The ID of the note
         * @param {NoteRequest} [NoteRequest] 

         * @throws {RequiredError}
         */
        updateNote: async (id: number, NoteRequest?: NoteRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateNote', 'id', id)
            const localVarPath = `/notes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "contacts:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(NoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * NotesApi - functional programming interface
 * @export
 */
export const NotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {AddNoteRequest} [AddNoteRequest] 

         * @throws {RequiredError}
         */
        async addNote(AddNoteRequest?: AddNoteRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNote(AddNoteRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {number} id The ID of the note
         * @param {CommentPostPutObject} [CommentPostPutObject] 

         * @throws {RequiredError}
         */
        async addNoteComment(id: number, CommentPostPutObject?: CommentPostPutObject, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNoteComment(id, CommentPostPutObject, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        async deleteComment(id: number, commentId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(id, commentId, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        async deleteNote(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNote(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment

         * @throws {RequiredError}
         */
        async getComment(id: number, commentId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(id, commentId, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {number} id The ID of the note

         * @throws {RequiredError}
         */
        async getNote(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNote(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {number} id The ID of the note
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getNoteComments(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNoteComments(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {number} [user_id] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
         * @param {string} [lead_id] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
         * @param {number} [deal_id] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
         * @param {number} [person_id] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
         * @param {number} [org_id] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
         * @param {string} [start_date] The date in format of YYYY-MM-DD from which notes to fetch
         * @param {string} [end_date] The date in format of YYYY-MM-DD until which notes to fetch to
         * @param {0 | 1} [pinned_to_lead_flag] If set, the results are filtered by note to lead pinning state
         * @param {0 | 1} [pinned_to_deal_flag] If set, the results are filtered by note to deal pinning state
         * @param {0 | 1} [pinned_to_organization_flag] If set, the results are filtered by note to organization pinning state
         * @param {0 | 1} [pinned_to_person_flag] If set, the results are filtered by note to person pinning state

         * @throws {RequiredError}
         */
        async getNotes(user_id?: number, lead_id?: string, deal_id?: number, person_id?: number, org_id?: number, start?: number, limit?: number, sort?: string, start_date?: string, end_date?: string, pinned_to_lead_flag?: 0 | 1, pinned_to_deal_flag?: 0 | 1, pinned_to_organization_flag?: 0 | 1, pinned_to_person_flag?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetNotesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotes(user_id, lead_id, deal_id, person_id, org_id, start, limit, sort, start_date, end_date, pinned_to_lead_flag, pinned_to_deal_flag, pinned_to_organization_flag, pinned_to_person_flag, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {number} id The ID of the note
         * @param {string} commentId The ID of the comment
         * @param {CommentPostPutObject} [CommentPostPutObject] 

         * @throws {RequiredError}
         */
        async updateCommentForNote(id: number, commentId: string, CommentPostPutObject?: CommentPostPutObject, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCommentForNote(id, commentId, CommentPostPutObject, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a note.
         * @summary Update a note
         * @param {number} id The ID of the note
         * @param {NoteRequest} [NoteRequest] 

         * @throws {RequiredError}
         */
        async updateNote(id: number, NoteRequest?: NoteRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpsertNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNote(id, NoteRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotesApi - factory interface
 * @export
 */
export const NotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotesApiFp(configuration)
    return {
        /**
         * Adds a new note.
         * @summary Add a note
         * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addNote(requestParameters: NotesApiAddNoteRequest = {}, ): Promise<UpsertNoteResponse> {
            return localVarFp.addNote(requestParameters.AddNoteRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new comment to a note.
         * @summary Add a comment to a note
         * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addNoteComment(requestParameters: NotesApiAddNoteCommentRequest, ): Promise<UpsertCommentResponse> {
            return localVarFp.addNoteComment(requestParameters.id, requestParameters.CommentPostPutObject, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a comment.
         * @summary Delete a comment related to a note
         * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteComment(requestParameters: NotesApiDeleteCommentRequest, ): Promise<DeleteCommentResponse> {
            return localVarFp.deleteComment(requestParameters.id, requestParameters.commentId, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific note.
         * @summary Delete a note
         * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteNote(requestParameters: NotesApiDeleteNoteRequest, ): Promise<DeleteNoteResponse> {
            return localVarFp.deleteNote(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a comment.
         * @summary Get one comment
         * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getComment(requestParameters: NotesApiGetCommentRequest, ): Promise<UpsertCommentResponse> {
            return localVarFp.getComment(requestParameters.id, requestParameters.commentId, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns details about a specific note.
         * @summary Get one note
         * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNote(requestParameters: NotesApiGetNoteRequest, ): Promise<UpsertNoteResponse> {
            return localVarFp.getNote(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all comments associated with a note.
         * @summary Get all comments for a note
         * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNoteComments(requestParameters: NotesApiGetNoteCommentsRequest, ): Promise<GetCommentsResponse> {
            return localVarFp.getNoteComments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all notes.
         * @summary Get all notes
         * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getNotes(requestParameters: NotesApiGetNotesRequest = {}, ): Promise<GetNotesResponse> {
            return localVarFp.getNotes(requestParameters.user_id, requestParameters.lead_id, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.start_date, requestParameters.end_date, requestParameters.pinned_to_lead_flag, requestParameters.pinned_to_deal_flag, requestParameters.pinned_to_organization_flag, requestParameters.pinned_to_person_flag, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a comment related to a note.
         * @summary Update a comment related to a note
         * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateCommentForNote(requestParameters: NotesApiUpdateCommentForNoteRequest, ): Promise<UpsertCommentResponse> {
            return localVarFp.updateCommentForNote(requestParameters.id, requestParameters.commentId, requestParameters.CommentPostPutObject, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates a note.
         * @summary Update a note
         * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateNote(requestParameters: NotesApiUpdateNoteRequest, ): Promise<UpsertNoteResponse> {
            return localVarFp.updateNote(requestParameters.id, requestParameters.NoteRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNote operation in NotesApi.
 * @export
 * @interface NotesApiAddNoteRequest
 */
export interface NotesApiAddNoteRequest {
    /**
     * 
     * @type {AddNoteRequest}
     * @memberof NotesApiAddNote
     */
    readonly AddNoteRequest?: AddNoteRequest
}

/**
 * Request parameters for addNoteComment operation in NotesApi.
 * @export
 * @interface NotesApiAddNoteCommentRequest
 */
export interface NotesApiAddNoteCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiAddNoteComment
     */
    readonly id: number

    /**
     * 
     * @type {CommentPostPutObject}
     * @memberof NotesApiAddNoteComment
     */
    readonly CommentPostPutObject?: CommentPostPutObject
}

/**
 * Request parameters for deleteComment operation in NotesApi.
 * @export
 * @interface NotesApiDeleteCommentRequest
 */
export interface NotesApiDeleteCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiDeleteComment
     */
    readonly id: number

    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiDeleteComment
     */
    readonly commentId: string
}

/**
 * Request parameters for deleteNote operation in NotesApi.
 * @export
 * @interface NotesApiDeleteNoteRequest
 */
export interface NotesApiDeleteNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiDeleteNote
     */
    readonly id: number
}

/**
 * Request parameters for getComment operation in NotesApi.
 * @export
 * @interface NotesApiGetCommentRequest
 */
export interface NotesApiGetCommentRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetComment
     */
    readonly id: number

    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiGetComment
     */
    readonly commentId: string
}

/**
 * Request parameters for getNote operation in NotesApi.
 * @export
 * @interface NotesApiGetNoteRequest
 */
export interface NotesApiGetNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetNote
     */
    readonly id: number
}

/**
 * Request parameters for getNoteComments operation in NotesApi.
 * @export
 * @interface NotesApiGetNoteCommentsRequest
 */
export interface NotesApiGetNoteCommentsRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof NotesApiGetNoteComments
     */
    readonly limit?: number
}

/**
 * Request parameters for getNotes operation in NotesApi.
 * @export
 * @interface NotesApiGetNotesRequest
 */
export interface NotesApiGetNotesRequest {
    /**
     * The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly user_id?: number

    /**
     * The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly lead_id?: string

    /**
     * The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly deal_id?: number

    /**
     * The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly person_id?: number

    /**
     * The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly org_id?: number

    /**
     * Pagination start
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof NotesApiGetNotes
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly sort?: string

    /**
     * The date in format of YYYY-MM-DD from which notes to fetch
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly start_date?: string

    /**
     * The date in format of YYYY-MM-DD until which notes to fetch to
     * @type {string}
     * @memberof NotesApiGetNotes
     */
    readonly end_date?: string

    /**
     * If set, the results are filtered by note to lead pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_lead_flag?: 0 | 1

    /**
     * If set, the results are filtered by note to deal pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_deal_flag?: 0 | 1

    /**
     * If set, the results are filtered by note to organization pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_organization_flag?: 0 | 1

    /**
     * If set, the results are filtered by note to person pinning state
     * @type {0 | 1}
     * @memberof NotesApiGetNotes
     */
    readonly pinned_to_person_flag?: 0 | 1
}

/**
 * Request parameters for updateCommentForNote operation in NotesApi.
 * @export
 * @interface NotesApiUpdateCommentForNoteRequest
 */
export interface NotesApiUpdateCommentForNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly id: number

    /**
     * The ID of the comment
     * @type {string}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly commentId: string

    /**
     * 
     * @type {CommentPostPutObject}
     * @memberof NotesApiUpdateCommentForNote
     */
    readonly CommentPostPutObject?: CommentPostPutObject
}

/**
 * Request parameters for updateNote operation in NotesApi.
 * @export
 * @interface NotesApiUpdateNoteRequest
 */
export interface NotesApiUpdateNoteRequest {
    /**
     * The ID of the note
     * @type {number}
     * @memberof NotesApiUpdateNote
     */
    readonly id: number

    /**
     * 
     * @type {NoteRequest}
     * @memberof NotesApiUpdateNote
     */
    readonly NoteRequest?: NoteRequest
}

/**
 * NotesApi - object-oriented interface
 * @export
 * @class NotesApi
 * @extends {BaseAPI}
 */
export class NotesApi extends BaseAPI {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {NotesApiAddNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public addNote(requestParameters: NotesApiAddNoteRequest = {}, ) {
        return NotesApiFp(this.configuration).addNote(requestParameters.AddNoteRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {NotesApiAddNoteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public addNoteComment(requestParameters: NotesApiAddNoteCommentRequest, ) {
        return NotesApiFp(this.configuration).addNoteComment(requestParameters.id, requestParameters.CommentPostPutObject, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {NotesApiDeleteCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public deleteComment(requestParameters: NotesApiDeleteCommentRequest, ) {
        return NotesApiFp(this.configuration).deleteComment(requestParameters.id, requestParameters.commentId, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {NotesApiDeleteNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public deleteNote(requestParameters: NotesApiDeleteNoteRequest, ) {
        return NotesApiFp(this.configuration).deleteNote(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {NotesApiGetCommentRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public getComment(requestParameters: NotesApiGetCommentRequest, ) {
        return NotesApiFp(this.configuration).getComment(requestParameters.id, requestParameters.commentId, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {NotesApiGetNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public getNote(requestParameters: NotesApiGetNoteRequest, ) {
        return NotesApiFp(this.configuration).getNote(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {NotesApiGetNoteCommentsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public getNoteComments(requestParameters: NotesApiGetNoteCommentsRequest, ) {
        return NotesApiFp(this.configuration).getNoteComments(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {NotesApiGetNotesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public getNotes(requestParameters: NotesApiGetNotesRequest = {}, ) {
        return NotesApiFp(this.configuration).getNotes(requestParameters.user_id, requestParameters.lead_id, requestParameters.deal_id, requestParameters.person_id, requestParameters.org_id, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.start_date, requestParameters.end_date, requestParameters.pinned_to_lead_flag, requestParameters.pinned_to_deal_flag, requestParameters.pinned_to_organization_flag, requestParameters.pinned_to_person_flag, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {NotesApiUpdateCommentForNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public updateCommentForNote(requestParameters: NotesApiUpdateCommentForNoteRequest, ) {
        return NotesApiFp(this.configuration).updateCommentForNote(requestParameters.id, requestParameters.commentId, requestParameters.CommentPostPutObject, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a note.
     * @summary Update a note
     * @param {NotesApiUpdateNoteRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof NotesApi
     */
    public updateNote(requestParameters: NotesApiUpdateNoteRequest, ) {
        return NotesApiFp(this.configuration).updateNote(requestParameters.id, requestParameters.NoteRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
