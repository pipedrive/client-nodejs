/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddWebhookRequest } from '../model';
// @ts-ignore
import { BaseResponse200 } from '../model';
// @ts-ignore
import { DeleteWebhook403Response } from '../model';
// @ts-ignore
import { GetWebhooksResponse200 } from '../model';
// @ts-ignore
import { UnathorizedResponse } from '../model';
// @ts-ignore
import { WebhookResponse200 } from '../model';
// @ts-ignore
import { WebhooksBadRequestResponse } from '../model';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {AddWebhookRequest} [AddWebhookRequest] 

         * @throws {RequiredError}
         */
        addWebhook: async (AddWebhookRequest?: AddWebhookRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {number} id The ID of the Webhook to delete

         * @throws {RequiredError}
         */
        deleteWebhook: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWebhook', 'id', id)
            const localVarPath = `/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        getWebhooks: async (): Promise<RequestArgs> => {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {

    /**
    * Axios interceptor to add the SDK version as a User-Agent header
    * */
    globalAxios.interceptors.request.use(function (config) {
        const version = require("../../package.json").version;
        config.headers['User-Agent'] = `Pipedrive-SDK-Javascript-${version}`;
        return config;
    });

    /**
    * Axios response interceptor to modify response structure
    */
    globalAxios.interceptors.response.use(function (response) {
        return response.hasOwnProperty('success') ? response : response.data;
    }, function (error) {
        if(error?.response?.data) {
            return Promise.reject(error.response.data);
        }
        return Promise.reject(error);
    });
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {AddWebhookRequest} [AddWebhookRequest] 

         * @throws {RequiredError}
         */
        async addWebhook(AddWebhookRequest?: AddWebhookRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<WebhookResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWebhook(AddWebhookRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {number} id The ID of the Webhook to delete

         * @throws {RequiredError}
         */
        async deleteWebhook(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<BaseResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        async getWebhooks(): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetWebhooksResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooks();
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
         * @summary Create a new Webhook
         * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addWebhook(requestParameters: WebhooksApiAddWebhookRequest = {}, ): Promise<WebhookResponse200> {
            return localVarFp.addWebhook(requestParameters.AddWebhookRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified Webhook.
         * @summary Delete existing Webhook
         * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteWebhook(requestParameters: WebhooksApiDeleteWebhookRequest, ): Promise<BaseResponse200> {
            return localVarFp.deleteWebhook(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all the Webhooks of a company.
         * @summary Get all Webhooks

         * @throws {RequiredError}
         */
        getWebhooks(): Promise<GetWebhooksResponse200> {
            return localVarFp.getWebhooks().then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiAddWebhookRequest
 */
export interface WebhooksApiAddWebhookRequest {
    /**
     * 
     * @type {AddWebhookRequest}
     * @memberof WebhooksApiAddWebhook
     */
    readonly AddWebhookRequest?: AddWebhookRequest
}

/**
 * Request parameters for deleteWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiDeleteWebhookRequest
 */
export interface WebhooksApiDeleteWebhookRequest {
    /**
     * The ID of the Webhook to delete
     * @type {number}
     * @memberof WebhooksApiDeleteWebhook
     */
    readonly id: number
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * @summary Create a new Webhook
     * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public addWebhook(requestParameters: WebhooksApiAddWebhookRequest = {}, ) {
        return WebhooksApiFp(this.configuration).addWebhook(requestParameters.AddWebhookRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified Webhook.
     * @summary Delete existing Webhook
     * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public deleteWebhook(requestParameters: WebhooksApiDeleteWebhookRequest, ) {
        return WebhooksApiFp(this.configuration).deleteWebhook(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all the Webhooks of a company.
     * @summary Get all Webhooks

     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhooks() {
        return WebhooksApiFp(this.configuration).getWebhooks().then((request) => request(this.axios, this.basePath));
    }
}
