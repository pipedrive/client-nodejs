/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDealFollowerRequest } from '../models';
// @ts-ignore
import { AddDealFollowerResponse200 } from '../models';
// @ts-ignore
import { AddDealParticipantRequest } from '../models';
// @ts-ignore
import { AddDealParticipantResponse200 } from '../models';
// @ts-ignore
import { AddDealProductRequest } from '../models';
// @ts-ignore
import { AddDealRequest } from '../models';
// @ts-ignore
import { DealResponse200 } from '../models';
// @ts-ignore
import { DeleteDealFollowerResponse200 } from '../models';
// @ts-ignore
import { DeleteDealParticipantResponse200 } from '../models';
// @ts-ignore
import { DeleteDealProductResponse200 } from '../models';
// @ts-ignore
import { DeleteDealResponse200 } from '../models';
// @ts-ignore
import { DeleteDealsResponse200 } from '../models';
// @ts-ignore
import { DuplicateDealResponse200 } from '../models';
// @ts-ignore
import { FailResponse } from '../models';
// @ts-ignore
import { GetAddProductAttachementResponse200 } from '../models';
// @ts-ignore
import { GetAssociatedFilesResponse200 } from '../models';
// @ts-ignore
import { GetAssociatedFollowersResponse200 } from '../models';
// @ts-ignore
import { GetAssociatedMailMessagesResponse200 } from '../models';
// @ts-ignore
import { GetDealActivitiesResponse200 } from '../models';
// @ts-ignore
import { GetDealParticipantsResponse200 } from '../models';
// @ts-ignore
import { GetDealResponse200 } from '../models';
// @ts-ignore
import { GetDealUpdatesResponse200 } from '../models';
// @ts-ignore
import { GetDealsCollectionResponse200 } from '../models';
// @ts-ignore
import { GetDealsResponse200 } from '../models';
// @ts-ignore
import { GetDealsSummaryResponse200 } from '../models';
// @ts-ignore
import { GetDealsTimelineResponse200 } from '../models';
// @ts-ignore
import { GetProductAttachementResponse200 } from '../models';
// @ts-ignore
import { ListPermittedUsersResponse200 } from '../models';
// @ts-ignore
import { ListPersonsResponse200 } from '../models';
// @ts-ignore
import { ListProductsResponse200 } from '../models';
// @ts-ignore
import { MergeDealsRequest } from '../models';
// @ts-ignore
import { MergeDealsResponse200 } from '../models';
// @ts-ignore
import { SearchDealsResponse200 } from '../models';
// @ts-ignore
import { UpdateDealProductRequest } from '../models';
// @ts-ignore
import { UpdateDealRequest } from '../models';
/**
 * DealsApi - axios parameter creator
 * @export
 */
export const DealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
         * @summary Add a deal
         * @param {AddDealRequest} [AddDealRequest] 

         * @throws {RequiredError}
         */
        addDeal: async (AddDealRequest?: AddDealRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a follower to a deal.
         * @summary Add a follower to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        addDealFollower: async (id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addDealFollower', 'id', id)
            const localVarPath = `/deals/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealFollowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a participant to a deal.
         * @summary Add a participant to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealParticipantRequest} [AddDealParticipantRequest] 

         * @throws {RequiredError}
         */
        addDealParticipant: async (id: number, AddDealParticipantRequest?: AddDealParticipantRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addDealParticipant', 'id', id)
            const localVarPath = `/deals/{id}/participants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealParticipantRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealProductRequest} [AddDealProductRequest] 

         * @throws {RequiredError}
         */
        addDealProduct: async (id: number, AddDealProductRequest?: AddDealProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addDealProduct', 'id', id)
            const localVarPath = `/deals/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "products:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(AddDealProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        deleteDeal: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a follower from a deal.
         * @summary Delete a follower from a deal
         * @param {number} id The ID of the deal
         * @param {number} follower_id The ID of the follower

         * @throws {RequiredError}
         */
        deleteDealFollower: async (id: number, follower_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealFollower', 'id', id)
            // verify required parameter 'follower_id' is not null or undefined
            assertParamExists('deleteDealFollower', 'follower_id', follower_id)
            const localVarPath = `/deals/{id}/followers/{follower_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"follower_id"}}`, encodeURIComponent(String(follower_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a participant from a deal.
         * @summary Delete a participant from a deal
         * @param {number} id The ID of the deal
         * @param {number} deal_participant_id The ID of the participant of the deal

         * @throws {RequiredError}
         */
        deleteDealParticipant: async (id: number, deal_participant_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealParticipant', 'id', id)
            // verify required parameter 'deal_participant_id' is not null or undefined
            assertParamExists('deleteDealParticipant', 'deal_participant_id', deal_participant_id)
            const localVarPath = `/deals/{id}/participants/{deal_participant_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"deal_participant_id"}}`, encodeURIComponent(String(deal_participant_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The product attachment ID

         * @throws {RequiredError}
         */
        deleteDealProduct: async (id: number, product_attachment_id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDealProduct', 'id', id)
            // verify required parameter 'product_attachment_id' is not null or undefined
            assertParamExists('deleteDealProduct', 'product_attachment_id', product_attachment_id)
            const localVarPath = `/deals/{id}/products/{product_attachment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(product_attachment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full", "products:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
         * @summary Delete multiple deals in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        deleteDeals: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteDeals', 'ids', ids)
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Duplicates a deal.
         * @summary Duplicate deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        duplicateDeal: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('duplicateDeal', 'id', id)
            const localVarPath = `/deals/{id}/duplicate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
         * @summary Get details of a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        getDeal: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists activities associated with a deal.
         * @summary List activities associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        getDealActivities: async (id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealActivities', 'id', id)
            const localVarPath = `/deals/{id}/activities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["activities:read", "activities:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (done !== undefined) {
                localVarQueryParameter['done'] = done;
            }

            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists files associated with a deal.
         * @summary List files attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        getDealFiles: async (id: number, start?: number, limit?: number, sort?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealFiles', 'id', id)
            const localVarPath = `/deals/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the followers of a deal.
         * @summary List followers of a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        getDealFollowers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealFollowers', 'id', id)
            const localVarPath = `/deals/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists mail messages associated with a deal.
         * @summary List mail messages associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealMailMessages: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealMailMessages', 'id', id)
            const localVarPath = `/deals/{id}/mailMessages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["mail:read", "mail:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List participants of a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealParticipants: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealParticipants', 'id', id)
            const localVarPath = `/deals/{id}/participants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List all persons associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getDealPersons: async (id: number, start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealPersons', 'id', id)
            const localVarPath = `/deals/{id}/persons`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [include_product_data] Whether to fetch product data along with each attached product (1) or not (0, default)

         * @throws {RequiredError}
         */
        getDealProducts: async (id: number, start?: number, limit?: number, include_product_data?: 0 | 1, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealProducts', 'id', id)
            const localVarPath = `/deals/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["products:read", "products:full"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (include_product_data !== undefined) {
                localVarQueryParameter['include_product_data'] = include_product_data;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists updates about a deal.
         * @summary List updates about a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

         * @throws {RequiredError}
         */
        getDealUpdates: async (id: number, start?: number, limit?: number, all_changes?: string, items?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealUpdates', 'id', id)
            const localVarPath = `/deals/{id}/flow`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["recents:read"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (all_changes !== undefined) {
                localVarQueryParameter['all_changes'] = all_changes;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the users permitted to access a deal.
         * @summary List permitted users
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        getDealUsers: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDealUsers', 'id', id)
            const localVarPath = `/deals/{id}/permittedUsers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
         * @summary Get all deals
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [owned_by_you] When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.

         * @throws {RequiredError}
         */
        getDeals: async (user_id?: number, filter_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', start?: number, limit?: number, sort?: string, owned_by_you?: 0 | 1, ): Promise<RequestArgs> => {
            const localVarPath = `/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (owned_by_you !== undefined) {
                localVarQueryParameter['owned_by_you'] = owned_by_you;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all deals (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

         * @throws {RequiredError}
         */
        getDealsCollection: async (cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', ): Promise<RequestArgs> => {
            const localVarPath = `/deals/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a summary of all the deals.
         * @summary Get deals summary
         * @param {'open' | 'won' | 'lost'} [status] Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
         * @param {number} [filter_id] &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
         * @param {number} [user_id] Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
         * @param {number} [stage_id] Only deals within the given stage will be returned

         * @throws {RequiredError}
         */
        getDealsSummary: async (status?: 'open' | 'won' | 'lost', filter_id?: number, user_id?: number, stage_id?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/deals/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (stage_id !== undefined) {
                localVarQueryParameter['stage_id'] = stage_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
         * @summary Get deals timeline
         * @param {string} start_date The date when the first interval starts. Format: YYYY-MM-DD.
         * @param {'day' | 'week' | 'month' | 'quarter'} interval The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
         * @param {number} amount The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
         * @param {string} field_key The date field key which deals will be retrieved from
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned
         * @param {number} [pipeline_id] If supplied, only deals matching the given pipeline will be returned
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {0 | 1} [exclude_deals] Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.

         * @throws {RequiredError}
         */
        getDealsTimeline: async (start_date: string, interval: 'day' | 'week' | 'month' | 'quarter', amount: number, field_key: string, user_id?: number, pipeline_id?: number, filter_id?: number, exclude_deals?: 0 | 1, totals_convert_currency?: string, ): Promise<RequestArgs> => {
            // verify required parameter 'start_date' is not null or undefined
            assertParamExists('getDealsTimeline', 'start_date', start_date)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('getDealsTimeline', 'interval', interval)
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('getDealsTimeline', 'amount', amount)
            // verify required parameter 'field_key' is not null or undefined
            assertParamExists('getDealsTimeline', 'field_key', field_key)
            const localVarPath = `/deals/timeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full"], configuration)

            if (start_date !== undefined) {
                localVarQueryParameter['start_date'] = (start_date as any instanceof Date) ?
                    (start_date as any).toISOString().substr(0,10) :
                    start_date;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (field_key !== undefined) {
                localVarQueryParameter['field_key'] = field_key;
            }

            if (user_id !== undefined) {
                localVarQueryParameter['user_id'] = user_id;
            }

            if (pipeline_id !== undefined) {
                localVarQueryParameter['pipeline_id'] = pipeline_id;
            }

            if (filter_id !== undefined) {
                localVarQueryParameter['filter_id'] = filter_id;
            }

            if (exclude_deals !== undefined) {
                localVarQueryParameter['exclude_deals'] = exclude_deals;
            }

            if (totals_convert_currency !== undefined) {
                localVarQueryParameter['totals_convert_currency'] = totals_convert_currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
         * @summary Merge two deals
         * @param {number} id The ID of the deal
         * @param {MergeDealsRequest} [MergeDealsRequest] 

         * @throws {RequiredError}
         */
        mergeDeals: async (id: number, MergeDealsRequest?: MergeDealsRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mergeDeals', 'id', id)
            const localVarPath = `/deals/{id}/merge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(MergeDealsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
         * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
         * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
         * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        searchDeals: async (term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', start?: number, limit?: number, ): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('searchDeals', 'term', term)
            const localVarPath = `/deals/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:read", "deals:full", "search:read"], configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (exact_match !== undefined) {
                localVarQueryParameter['exact_match'] = exact_match;
            }

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (organization_id !== undefined) {
                localVarQueryParameter['organization_id'] = organization_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (include_fields !== undefined) {
                localVarQueryParameter['include_fields'] = include_fields;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
         * @summary Update a deal
         * @param {number} id The ID of the deal
         * @param {UpdateDealRequest} [UpdateDealRequest] 

         * @throws {RequiredError}
         */
        updateDeal: async (id: number, UpdateDealRequest?: UpdateDealRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDeal', 'id', id)
            const localVarPath = `/deals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateDealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
         * @param {UpdateDealProductRequest} [UpdateDealProductRequest] 

         * @throws {RequiredError}
         */
        updateDealProduct: async (id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDealProduct', 'id', id)
            // verify required parameter 'product_attachment_id' is not null or undefined
            assertParamExists('updateDealProduct', 'product_attachment_id', product_attachment_id)
            const localVarPath = `/deals/{id}/products/{product_attachment_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(product_attachment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["deals:full"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateDealProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * DealsApi - functional programming interface
 * @export
 */
export const DealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DealsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
         * @summary Add a deal
         * @param {AddDealRequest} [AddDealRequest] 

         * @throws {RequiredError}
         */
        async addDeal(AddDealRequest?: AddDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DealResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDeal(AddDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a follower to a deal.
         * @summary Add a follower to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealFollowerRequest} [AddDealFollowerRequest] 

         * @throws {RequiredError}
         */
        async addDealFollower(id: number, AddDealFollowerRequest?: AddDealFollowerRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddDealFollowerResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealFollower(id, AddDealFollowerRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a participant to a deal.
         * @summary Add a participant to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealParticipantRequest} [AddDealParticipantRequest] 

         * @throws {RequiredError}
         */
        async addDealParticipant(id: number, AddDealParticipantRequest?: AddDealParticipantRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AddDealParticipantResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealParticipant(id, AddDealParticipantRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {number} id The ID of the deal
         * @param {AddDealProductRequest} [AddDealProductRequest] 

         * @throws {RequiredError}
         */
        async addDealProduct(id: number, AddDealProductRequest?: AddDealProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAddProductAttachementResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDealProduct(id, AddDealProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async deleteDeal(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeal(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a follower from a deal.
         * @summary Delete a follower from a deal
         * @param {number} id The ID of the deal
         * @param {number} follower_id The ID of the follower

         * @throws {RequiredError}
         */
        async deleteDealFollower(id: number, follower_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealFollowerResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealFollower(id, follower_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a participant from a deal.
         * @summary Delete a participant from a deal
         * @param {number} id The ID of the deal
         * @param {number} deal_participant_id The ID of the participant of the deal

         * @throws {RequiredError}
         */
        async deleteDealParticipant(id: number, deal_participant_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealParticipantResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealParticipant(id, deal_participant_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The product attachment ID

         * @throws {RequiredError}
         */
        async deleteDealProduct(id: number, product_attachment_id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealProductResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDealProduct(id, product_attachment_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
         * @summary Delete multiple deals in bulk
         * @param {string} ids The comma-separated IDs that will be deleted

         * @throws {RequiredError}
         */
        async deleteDeals(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeals(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Duplicates a deal.
         * @summary Duplicate deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async duplicateDeal(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DuplicateDealResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.duplicateDeal(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
         * @summary Get details of a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async getDeal(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeal(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists activities associated with a deal.
         * @summary List activities associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
         * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result

         * @throws {RequiredError}
         */
        async getDealActivities(id: number, start?: number, limit?: number, done?: 0 | 1, exclude?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealActivitiesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealActivities(id, start, limit, done, exclude, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists files associated with a deal.
         * @summary List files attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.

         * @throws {RequiredError}
         */
        async getDealFiles(id: number, start?: number, limit?: number, sort?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFilesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealFiles(id, start, limit, sort, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the followers of a deal.
         * @summary List followers of a deal
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async getDealFollowers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedFollowersResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealFollowers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists mail messages associated with a deal.
         * @summary List mail messages associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getDealMailMessages(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetAssociatedMailMessagesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealMailMessages(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List participants of a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getDealParticipants(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealParticipantsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealParticipants(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List all persons associated with a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getDealPersons(id: number, start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ListPersonsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealPersons(id, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {0 | 1} [include_product_data] Whether to fetch product data along with each attached product (1) or not (0, default)

         * @throws {RequiredError}
         */
        async getDealProducts(id: number, start?: number, limit?: number, include_product_data?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ListProductsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealProducts(id, start, limit, include_product_data, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists updates about a deal.
         * @summary List updates about a deal
         * @param {number} id The ID of the deal
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [all_changes] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
         * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).

         * @throws {RequiredError}
         */
        async getDealUpdates(id: number, start?: number, limit?: number, all_changes?: string, items?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealUpdatesResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealUpdates(id, start, limit, all_changes, items, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the users permitted to access a deal.
         * @summary List permitted users
         * @param {number} id The ID of the deal

         * @throws {RequiredError}
         */
        async getDealUsers(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ListPermittedUsersResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealUsers(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
         * @summary Get all deals
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
         * @param {number} [filter_id] The ID of the filter to use
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page
         * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
         * @param {0 | 1} [owned_by_you] When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.

         * @throws {RequiredError}
         */
        async getDeals(user_id?: number, filter_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted', start?: number, limit?: number, sort?: string, owned_by_you?: 0 | 1, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeals(user_id, filter_id, stage_id, status, start, limit, sort, owned_by_you, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all deals (BETA)
         * @param {string} [cursor] For pagination, the marker (an opaque string value) representing the first item on the next page
         * @param {number} [limit] For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
         * @param {string} [since] The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {string} [until] The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned
         * @param {number} [stage_id] If supplied, only deals within the given stage will be returned
         * @param {'open' | 'won' | 'lost' | 'deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.

         * @throws {RequiredError}
         */
        async getDealsCollection(cursor?: string, limit?: number, since?: string, until?: string, user_id?: number, stage_id?: number, status?: 'open' | 'won' | 'lost' | 'deleted', ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsCollectionResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsCollection(cursor, limit, since, until, user_id, stage_id, status, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a summary of all the deals.
         * @summary Get deals summary
         * @param {'open' | 'won' | 'lost'} [status] Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
         * @param {number} [filter_id] &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
         * @param {number} [user_id] Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
         * @param {number} [stage_id] Only deals within the given stage will be returned

         * @throws {RequiredError}
         */
        async getDealsSummary(status?: 'open' | 'won' | 'lost', filter_id?: number, user_id?: number, stage_id?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsSummaryResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsSummary(status, filter_id, user_id, stage_id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
         * @summary Get deals timeline
         * @param {string} start_date The date when the first interval starts. Format: YYYY-MM-DD.
         * @param {'day' | 'week' | 'month' | 'quarter'} interval The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
         * @param {number} amount The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
         * @param {string} field_key The date field key which deals will be retrieved from
         * @param {number} [user_id] If supplied, only deals matching the given user will be returned
         * @param {number} [pipeline_id] If supplied, only deals matching the given pipeline will be returned
         * @param {number} [filter_id] If supplied, only deals matching the given filter will be returned
         * @param {0 | 1} [exclude_deals] Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
         * @param {string} [totals_convert_currency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.

         * @throws {RequiredError}
         */
        async getDealsTimeline(start_date: string, interval: 'day' | 'week' | 'month' | 'quarter', amount: number, field_key: string, user_id?: number, pipeline_id?: number, filter_id?: number, exclude_deals?: 0 | 1, totals_convert_currency?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetDealsTimelineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealsTimeline(start_date, interval, amount, field_key, user_id, pipeline_id, filter_id, exclude_deals, totals_convert_currency, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
         * @summary Merge two deals
         * @param {number} id The ID of the deal
         * @param {MergeDealsRequest} [MergeDealsRequest] 

         * @throws {RequiredError}
         */
        async mergeDeals(id: number, MergeDealsRequest?: MergeDealsRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MergeDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mergeDeals(id, MergeDealsRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
         * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
         * @param {boolean} [exact_match] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
         * @param {number} [person_id] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
         * @param {number} [organization_id] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
         * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
         * @param {'deal.cc_email'} [include_fields] Supports including optional fields in the results which are not provided by default
         * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async searchDeals(term: string, fields?: 'custom_fields' | 'notes' | 'title', exact_match?: boolean, person_id?: number, organization_id?: number, status?: 'open' | 'won' | 'lost', include_fields?: 'deal.cc_email', start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SearchDealsResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchDeals(term, fields, exact_match, person_id, organization_id, status, include_fields, start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
         * @summary Update a deal
         * @param {number} id The ID of the deal
         * @param {UpdateDealRequest} [UpdateDealRequest] 

         * @throws {RequiredError}
         */
        async updateDeal(id: number, UpdateDealRequest?: UpdateDealRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DealResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeal(id, UpdateDealRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {number} id The ID of the deal
         * @param {number} product_attachment_id The ID of the deal-product (the ID of the product attached to the deal)
         * @param {UpdateDealProductRequest} [UpdateDealProductRequest] 

         * @throws {RequiredError}
         */
        async updateDealProduct(id: number, product_attachment_id: number, UpdateDealProductRequest?: UpdateDealProductRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetProductAttachementResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDealProduct(id, product_attachment_id, UpdateDealProductRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DealsApi - factory interface
 * @export
 */
export const DealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DealsApiFp(configuration)
    return {
        /**
         * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
         * @summary Add a deal
         * @param {DealsApiAddDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDeal(requestParameters: DealsApiAddDealRequest = {}, ): Promise<DealResponse200> {
            return localVarFp.addDeal(requestParameters.AddDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a follower to a deal.
         * @summary Add a follower to a deal
         * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealFollower(requestParameters: DealsApiAddDealFollowerRequest, ): Promise<AddDealFollowerResponse200> {
            return localVarFp.addDealFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a participant to a deal.
         * @summary Add a participant to a deal
         * @param {DealsApiAddDealParticipantRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealParticipant(requestParameters: DealsApiAddDealParticipantRequest, ): Promise<AddDealParticipantResponse200> {
            return localVarFp.addDealParticipant(requestParameters.id, requestParameters.AddDealParticipantRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Adds a product to a deal, creating a new item called a deal-product.
         * @summary Add a product to a deal
         * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addDealProduct(requestParameters: DealsApiAddDealProductRequest, ): Promise<GetAddProductAttachementResponse200> {
            return localVarFp.addDealProduct(requestParameters.id, requestParameters.AddDealProductRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
         * @summary Delete a deal
         * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDeal(requestParameters: DealsApiDeleteDealRequest, ): Promise<DeleteDealResponse200> {
            return localVarFp.deleteDeal(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a follower from a deal.
         * @summary Delete a follower from a deal
         * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest, ): Promise<DeleteDealFollowerResponse200> {
            return localVarFp.deleteDealFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a participant from a deal.
         * @summary Delete a participant from a deal
         * @param {DealsApiDeleteDealParticipantRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealParticipant(requestParameters: DealsApiDeleteDealParticipantRequest, ): Promise<DeleteDealParticipantResponse200> {
            return localVarFp.deleteDealParticipant(requestParameters.id, requestParameters.deal_participant_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a product attachment from a deal, using the `product_attachment_id`.
         * @summary Delete an attached product from a deal
         * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest, ): Promise<DeleteDealProductResponse200> {
            return localVarFp.deleteDealProduct(requestParameters.id, requestParameters.product_attachment_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
         * @summary Delete multiple deals in bulk
         * @param {DealsApiDeleteDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteDeals(requestParameters: DealsApiDeleteDealsRequest, ): Promise<DeleteDealsResponse200> {
            return localVarFp.deleteDeals(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Duplicates a deal.
         * @summary Duplicate deal
         * @param {DealsApiDuplicateDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        duplicateDeal(requestParameters: DealsApiDuplicateDealRequest, ): Promise<DuplicateDealResponse200> {
            return localVarFp.duplicateDeal(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
         * @summary Get details of a deal
         * @param {DealsApiGetDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDeal(requestParameters: DealsApiGetDealRequest, ): Promise<GetDealResponse200> {
            return localVarFp.getDeal(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists activities associated with a deal.
         * @summary List activities associated with a deal
         * @param {DealsApiGetDealActivitiesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealActivities(requestParameters: DealsApiGetDealActivitiesRequest, ): Promise<GetDealActivitiesResponse200> {
            return localVarFp.getDealActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists files associated with a deal.
         * @summary List files attached to a deal
         * @param {DealsApiGetDealFilesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFiles(requestParameters: DealsApiGetDealFilesRequest, ): Promise<GetAssociatedFilesResponse200> {
            return localVarFp.getDealFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the followers of a deal.
         * @summary List followers of a deal
         * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest, ): Promise<GetAssociatedFollowersResponse200> {
            return localVarFp.getDealFollowers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists mail messages associated with a deal.
         * @summary List mail messages associated with a deal
         * @param {DealsApiGetDealMailMessagesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealMailMessages(requestParameters: DealsApiGetDealMailMessagesRequest, ): Promise<GetAssociatedMailMessagesResponse200> {
            return localVarFp.getDealMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List participants of a deal
         * @param {DealsApiGetDealParticipantsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealParticipants(requestParameters: DealsApiGetDealParticipantsRequest, ): Promise<GetDealParticipantsResponse200> {
            return localVarFp.getDealParticipants(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
         * @summary List all persons associated with a deal
         * @param {DealsApiGetDealPersonsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealPersons(requestParameters: DealsApiGetDealPersonsRequest, ): Promise<ListPersonsResponse200> {
            return localVarFp.getDealPersons(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists products attached to a deal.
         * @summary List products attached to a deal
         * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealProducts(requestParameters: DealsApiGetDealProductsRequest, ): Promise<ListProductsResponse200> {
            return localVarFp.getDealProducts(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.include_product_data, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists updates about a deal.
         * @summary List updates about a deal
         * @param {DealsApiGetDealUpdatesRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealUpdates(requestParameters: DealsApiGetDealUpdatesRequest, ): Promise<GetDealUpdatesResponse200> {
            return localVarFp.getDealUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items, ).then((request) => request(axios, basePath));
        },
        /**
         * Lists the users permitted to access a deal.
         * @summary List permitted users
         * @param {DealsApiGetDealUsersRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealUsers(requestParameters: DealsApiGetDealUsersRequest, ): Promise<ListPermittedUsersResponse200> {
            return localVarFp.getDealUsers(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
         * @summary Get all deals
         * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDeals(requestParameters: DealsApiGetDealsRequest = {}, ): Promise<GetDealsResponse200> {
            return localVarFp.getDeals(requestParameters.user_id, requestParameters.filter_id, requestParameters.stage_id, requestParameters.status, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.owned_by_you, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
         * @summary Get all deals (BETA)
         * @param {DealsApiGetDealsCollectionRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealsCollection(requestParameters: DealsApiGetDealsCollectionRequest = {}, ): Promise<GetDealsCollectionResponse200> {
            return localVarFp.getDealsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.stage_id, requestParameters.status, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns a summary of all the deals.
         * @summary Get deals summary
         * @param {DealsApiGetDealsSummaryRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealsSummary(requestParameters: DealsApiGetDealsSummaryRequest = {}, ): Promise<GetDealsSummaryResponse200> {
            return localVarFp.getDealsSummary(requestParameters.status, requestParameters.filter_id, requestParameters.user_id, requestParameters.stage_id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
         * @summary Get deals timeline
         * @param {DealsApiGetDealsTimelineRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getDealsTimeline(requestParameters: DealsApiGetDealsTimelineRequest, ): Promise<GetDealsTimelineResponse200> {
            return localVarFp.getDealsTimeline(requestParameters.start_date, requestParameters.interval, requestParameters.amount, requestParameters.field_key, requestParameters.user_id, requestParameters.pipeline_id, requestParameters.filter_id, requestParameters.exclude_deals, requestParameters.totals_convert_currency, ).then((request) => request(axios, basePath));
        },
        /**
         * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
         * @summary Merge two deals
         * @param {DealsApiMergeDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        mergeDeals(requestParameters: DealsApiMergeDealsRequest, ): Promise<MergeDealsResponse200> {
            return localVarFp.mergeDeals(requestParameters.id, requestParameters.MergeDealsRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
         * @summary Search deals
         * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        searchDeals(requestParameters: DealsApiSearchDealsRequest, ): Promise<SearchDealsResponse200> {
            return localVarFp.searchDeals(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.status, requestParameters.include_fields, requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
         * @summary Update a deal
         * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDeal(requestParameters: DealsApiUpdateDealRequest, ): Promise<DealResponse200> {
            return localVarFp.updateDeal(requestParameters.id, requestParameters.UpdateDealRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of the product that has been attached to a deal.
         * @summary Update the product attached to a deal
         * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest, ): Promise<GetProductAttachementResponse200> {
            return localVarFp.updateDealProduct(requestParameters.id, requestParameters.product_attachment_id, requestParameters.UpdateDealProductRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDeal operation in DealsApi.
 * @export
 * @interface DealsApiAddDealRequest
 */
export interface DealsApiAddDealRequest {
    /**
     * 
     * @type {AddDealRequest}
     * @memberof DealsApiAddDeal
     */
    readonly AddDealRequest?: AddDealRequest
}

/**
 * Request parameters for addDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiAddDealFollowerRequest
 */
export interface DealsApiAddDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealFollower
     */
    readonly id: number

    /**
     * 
     * @type {AddDealFollowerRequest}
     * @memberof DealsApiAddDealFollower
     */
    readonly AddDealFollowerRequest?: AddDealFollowerRequest
}

/**
 * Request parameters for addDealParticipant operation in DealsApi.
 * @export
 * @interface DealsApiAddDealParticipantRequest
 */
export interface DealsApiAddDealParticipantRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealParticipant
     */
    readonly id: number

    /**
     * 
     * @type {AddDealParticipantRequest}
     * @memberof DealsApiAddDealParticipant
     */
    readonly AddDealParticipantRequest?: AddDealParticipantRequest
}

/**
 * Request parameters for addDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiAddDealProductRequest
 */
export interface DealsApiAddDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiAddDealProduct
     */
    readonly id: number

    /**
     * 
     * @type {AddDealProductRequest}
     * @memberof DealsApiAddDealProduct
     */
    readonly AddDealProductRequest?: AddDealProductRequest
}

/**
 * Request parameters for deleteDeal operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealRequest
 */
export interface DealsApiDeleteDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDeal
     */
    readonly id: number
}

/**
 * Request parameters for deleteDealFollower operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealFollowerRequest
 */
export interface DealsApiDeleteDealFollowerRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly id: number

    /**
     * The ID of the follower
     * @type {number}
     * @memberof DealsApiDeleteDealFollower
     */
    readonly follower_id: number
}

/**
 * Request parameters for deleteDealParticipant operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealParticipantRequest
 */
export interface DealsApiDeleteDealParticipantRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealParticipant
     */
    readonly id: number

    /**
     * The ID of the participant of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealParticipant
     */
    readonly deal_participant_id: number
}

/**
 * Request parameters for deleteDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealProductRequest
 */
export interface DealsApiDeleteDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly id: number

    /**
     * The product attachment ID
     * @type {number}
     * @memberof DealsApiDeleteDealProduct
     */
    readonly product_attachment_id: number
}

/**
 * Request parameters for deleteDeals operation in DealsApi.
 * @export
 * @interface DealsApiDeleteDealsRequest
 */
export interface DealsApiDeleteDealsRequest {
    /**
     * The comma-separated IDs that will be deleted
     * @type {string}
     * @memberof DealsApiDeleteDeals
     */
    readonly ids: string
}

/**
 * Request parameters for duplicateDeal operation in DealsApi.
 * @export
 * @interface DealsApiDuplicateDealRequest
 */
export interface DealsApiDuplicateDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiDuplicateDeal
     */
    readonly id: number
}

/**
 * Request parameters for getDeal operation in DealsApi.
 * @export
 * @interface DealsApiGetDealRequest
 */
export interface DealsApiGetDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDeal
     */
    readonly id: number
}

/**
 * Request parameters for getDealActivities operation in DealsApi.
 * @export
 * @interface DealsApiGetDealActivitiesRequest
 */
export interface DealsApiGetDealActivitiesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealActivities
     */
    readonly limit?: number

    /**
     * Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @type {0 | 1}
     * @memberof DealsApiGetDealActivities
     */
    readonly done?: 0 | 1

    /**
     * A comma-separated string of activity IDs to exclude from result
     * @type {string}
     * @memberof DealsApiGetDealActivities
     */
    readonly exclude?: string
}

/**
 * Request parameters for getDealFiles operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFilesRequest
 */
export interface DealsApiGetDealFilesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealFiles
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @type {string}
     * @memberof DealsApiGetDealFiles
     */
    readonly sort?: string
}

/**
 * Request parameters for getDealFollowers operation in DealsApi.
 * @export
 * @interface DealsApiGetDealFollowersRequest
 */
export interface DealsApiGetDealFollowersRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealFollowers
     */
    readonly id: number
}

/**
 * Request parameters for getDealMailMessages operation in DealsApi.
 * @export
 * @interface DealsApiGetDealMailMessagesRequest
 */
export interface DealsApiGetDealMailMessagesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealMailMessages
     */
    readonly limit?: number
}

/**
 * Request parameters for getDealParticipants operation in DealsApi.
 * @export
 * @interface DealsApiGetDealParticipantsRequest
 */
export interface DealsApiGetDealParticipantsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealParticipants
     */
    readonly limit?: number
}

/**
 * Request parameters for getDealPersons operation in DealsApi.
 * @export
 * @interface DealsApiGetDealPersonsRequest
 */
export interface DealsApiGetDealPersonsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealPersons
     */
    readonly limit?: number
}

/**
 * Request parameters for getDealProducts operation in DealsApi.
 * @export
 * @interface DealsApiGetDealProductsRequest
 */
export interface DealsApiGetDealProductsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealProducts
     */
    readonly limit?: number

    /**
     * Whether to fetch product data along with each attached product (1) or not (0, default)
     * @type {0 | 1}
     * @memberof DealsApiGetDealProducts
     */
    readonly include_product_data?: 0 | 1
}

/**
 * Request parameters for getDealUpdates operation in DealsApi.
 * @export
 * @interface DealsApiGetDealUpdatesRequest
 */
export interface DealsApiGetDealUpdatesRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly id: number

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDealUpdates
     */
    readonly limit?: number

    /**
     * Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @type {string}
     * @memberof DealsApiGetDealUpdates
     */
    readonly all_changes?: string

    /**
     * A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change).
     * @type {string}
     * @memberof DealsApiGetDealUpdates
     */
    readonly items?: string
}

/**
 * Request parameters for getDealUsers operation in DealsApi.
 * @export
 * @interface DealsApiGetDealUsersRequest
 */
export interface DealsApiGetDealUsersRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiGetDealUsers
     */
    readonly id: number
}

/**
 * Request parameters for getDeals operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsRequest
 */
export interface DealsApiGetDealsRequest {
    /**
     * If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly user_id?: number

    /**
     * The ID of the filter to use
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly filter_id?: number

    /**
     * If supplied, only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly stage_id?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'}
     * @memberof DealsApiGetDeals
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'

    /**
     * Pagination start
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiGetDeals
     */
    readonly limit?: number

    /**
     * The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @type {string}
     * @memberof DealsApiGetDeals
     */
    readonly sort?: string

    /**
     * When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.
     * @type {0 | 1}
     * @memberof DealsApiGetDeals
     */
    readonly owned_by_you?: 0 | 1
}

/**
 * Request parameters for getDealsCollection operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsCollectionRequest
 */
export interface DealsApiGetDealsCollectionRequest {
    /**
     * For pagination, the marker (an opaque string value) representing the first item on the next page
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly cursor?: string

    /**
     * For pagination, the limit of entries to be returned. If not provided, 100 items will be returned. Please note that a maximum value of 500 is allowed.
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly limit?: number

    /**
     * The time boundary that points to the start of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly since?: string

    /**
     * The time boundary that points to the end of the range of data. Datetime in ISO 8601 format. E.g. 2022-11-01 08:55:59. Operates on the &#x60;update_time&#x60; field.
     * @type {string}
     * @memberof DealsApiGetDealsCollection
     */
    readonly until?: string

    /**
     * If supplied, only deals matching the given user will be returned
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly user_id?: number

    /**
     * If supplied, only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDealsCollection
     */
    readonly stage_id?: number

    /**
     * Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
     * @type {'open' | 'won' | 'lost' | 'deleted'}
     * @memberof DealsApiGetDealsCollection
     */
    readonly status?: 'open' | 'won' | 'lost' | 'deleted'
}

/**
 * Request parameters for getDealsSummary operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsSummaryRequest
 */
export interface DealsApiGetDealsSummaryRequest {
    /**
     * Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost.
     * @type {'open' | 'won' | 'lost'}
     * @memberof DealsApiGetDealsSummary
     */
    readonly status?: 'open' | 'won' | 'lost'

    /**
     * &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly filter_id?: number

    /**
     * Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly user_id?: number

    /**
     * Only deals within the given stage will be returned
     * @type {number}
     * @memberof DealsApiGetDealsSummary
     */
    readonly stage_id?: number
}

/**
 * Request parameters for getDealsTimeline operation in DealsApi.
 * @export
 * @interface DealsApiGetDealsTimelineRequest
 */
export interface DealsApiGetDealsTimelineRequest {
    /**
     * The date when the first interval starts. Format: YYYY-MM-DD.
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly start_date: string

    /**
     * The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @type {'day' | 'week' | 'month' | 'quarter'}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly interval: 'day' | 'week' | 'month' | 'quarter'

    /**
     * The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly amount: number

    /**
     * The date field key which deals will be retrieved from
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly field_key: string

    /**
     * If supplied, only deals matching the given user will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly user_id?: number

    /**
     * If supplied, only deals matching the given pipeline will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly pipeline_id?: number

    /**
     * If supplied, only deals matching the given filter will be returned
     * @type {number}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly filter_id?: number

    /**
     * Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
     * @type {0 | 1}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly exclude_deals?: 0 | 1

    /**
     * The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.
     * @type {string}
     * @memberof DealsApiGetDealsTimeline
     */
    readonly totals_convert_currency?: string
}

/**
 * Request parameters for mergeDeals operation in DealsApi.
 * @export
 * @interface DealsApiMergeDealsRequest
 */
export interface DealsApiMergeDealsRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiMergeDeals
     */
    readonly id: number

    /**
     * 
     * @type {MergeDealsRequest}
     * @memberof DealsApiMergeDeals
     */
    readonly MergeDealsRequest?: MergeDealsRequest
}

/**
 * Request parameters for searchDeals operation in DealsApi.
 * @export
 * @interface DealsApiSearchDealsRequest
 */
export interface DealsApiSearchDealsRequest {
    /**
     * The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;). Please note that the search term has to be URL encoded.
     * @type {string}
     * @memberof DealsApiSearchDeals
     */
    readonly term: string

    /**
     * A comma-separated string array. The fields to perform the search from. Defaults to all of them. Only the following custom field types are searchable: &#x60;address&#x60;, &#x60;varchar&#x60;, &#x60;text&#x60;, &#x60;varchar_auto&#x60;, &#x60;double&#x60;, &#x60;monetary&#x60; and &#x60;phone&#x60;. Read more about searching by custom fields &lt;a href&#x3D;\&quot;https://support.pipedrive.com/en/article/search-finding-what-you-need#searching-by-custom-fields\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;here&lt;/a&gt;.
     * @type {'custom_fields' | 'notes' | 'title'}
     * @memberof DealsApiSearchDeals
     */
    readonly fields?: 'custom_fields' | 'notes' | 'title'

    /**
     * When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @type {boolean}
     * @memberof DealsApiSearchDeals
     */
    readonly exact_match?: boolean

    /**
     * Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly person_id?: number

    /**
     * Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly organization_id?: number

    /**
     * Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @type {'open' | 'won' | 'lost'}
     * @memberof DealsApiSearchDeals
     */
    readonly status?: 'open' | 'won' | 'lost'

    /**
     * Supports including optional fields in the results which are not provided by default
     * @type {'deal.cc_email'}
     * @memberof DealsApiSearchDeals
     */
    readonly include_fields?: 'deal.cc_email'

    /**
     * Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof DealsApiSearchDeals
     */
    readonly limit?: number
}

/**
 * Request parameters for updateDeal operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealRequest
 */
export interface DealsApiUpdateDealRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDeal
     */
    readonly id: number

    /**
     * 
     * @type {UpdateDealRequest}
     * @memberof DealsApiUpdateDeal
     */
    readonly UpdateDealRequest?: UpdateDealRequest
}

/**
 * Request parameters for updateDealProduct operation in DealsApi.
 * @export
 * @interface DealsApiUpdateDealProductRequest
 */
export interface DealsApiUpdateDealProductRequest {
    /**
     * The ID of the deal
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly id: number

    /**
     * The ID of the deal-product (the ID of the product attached to the deal)
     * @type {number}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly product_attachment_id: number

    /**
     * 
     * @type {UpdateDealProductRequest}
     * @memberof DealsApiUpdateDealProduct
     */
    readonly UpdateDealProductRequest?: UpdateDealProductRequest
}

/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
export class DealsApi extends BaseAPI {
    /**
     * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {DealsApiAddDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDeal(requestParameters: DealsApiAddDealRequest = {}, ) {
        return DealsApiFp(this.configuration).addDeal(requestParameters.AddDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {DealsApiAddDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDealFollower(requestParameters: DealsApiAddDealFollowerRequest, ) {
        return DealsApiFp(this.configuration).addDealFollower(requestParameters.id, requestParameters.AddDealFollowerRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {DealsApiAddDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDealParticipant(requestParameters: DealsApiAddDealParticipantRequest, ) {
        return DealsApiFp(this.configuration).addDealParticipant(requestParameters.id, requestParameters.AddDealParticipantRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a product to a deal, creating a new item called a deal-product.
     * @summary Add a product to a deal
     * @param {DealsApiAddDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public addDealProduct(requestParameters: DealsApiAddDealProductRequest, ) {
        return DealsApiFp(this.configuration).addDealProduct(requestParameters.id, requestParameters.AddDealProductRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
     * @summary Delete a deal
     * @param {DealsApiDeleteDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDeal(requestParameters: DealsApiDeleteDealRequest, ) {
        return DealsApiFp(this.configuration).deleteDeal(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {DealsApiDeleteDealFollowerRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDealFollower(requestParameters: DealsApiDeleteDealFollowerRequest, ) {
        return DealsApiFp(this.configuration).deleteDealFollower(requestParameters.id, requestParameters.follower_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {DealsApiDeleteDealParticipantRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDealParticipant(requestParameters: DealsApiDeleteDealParticipantRequest, ) {
        return DealsApiFp(this.configuration).deleteDealParticipant(requestParameters.id, requestParameters.deal_participant_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * @summary Delete an attached product from a deal
     * @param {DealsApiDeleteDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDealProduct(requestParameters: DealsApiDeleteDealProductRequest, ) {
        return DealsApiFp(this.configuration).deleteDealProduct(requestParameters.id, requestParameters.product_attachment_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
     * @summary Delete multiple deals in bulk
     * @param {DealsApiDeleteDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public deleteDeals(requestParameters: DealsApiDeleteDealsRequest, ) {
        return DealsApiFp(this.configuration).deleteDeals(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {DealsApiDuplicateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public duplicateDeal(requestParameters: DealsApiDuplicateDealRequest, ) {
        return DealsApiFp(this.configuration).duplicateDeal(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {DealsApiGetDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDeal(requestParameters: DealsApiGetDealRequest, ) {
        return DealsApiFp(this.configuration).getDeal(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {DealsApiGetDealActivitiesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealActivities(requestParameters: DealsApiGetDealActivitiesRequest, ) {
        return DealsApiFp(this.configuration).getDealActivities(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.done, requestParameters.exclude, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {DealsApiGetDealFilesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealFiles(requestParameters: DealsApiGetDealFilesRequest, ) {
        return DealsApiFp(this.configuration).getDealFiles(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.sort, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {DealsApiGetDealFollowersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealFollowers(requestParameters: DealsApiGetDealFollowersRequest, ) {
        return DealsApiFp(this.configuration).getDealFollowers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {DealsApiGetDealMailMessagesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealMailMessages(requestParameters: DealsApiGetDealMailMessagesRequest, ) {
        return DealsApiFp(this.configuration).getDealMailMessages(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {DealsApiGetDealParticipantsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealParticipants(requestParameters: DealsApiGetDealParticipantsRequest, ) {
        return DealsApiFp(this.configuration).getDealParticipants(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List all persons associated with a deal
     * @param {DealsApiGetDealPersonsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealPersons(requestParameters: DealsApiGetDealPersonsRequest, ) {
        return DealsApiFp(this.configuration).getDealPersons(requestParameters.id, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {DealsApiGetDealProductsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealProducts(requestParameters: DealsApiGetDealProductsRequest, ) {
        return DealsApiFp(this.configuration).getDealProducts(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.include_product_data, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {DealsApiGetDealUpdatesRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealUpdates(requestParameters: DealsApiGetDealUpdatesRequest, ) {
        return DealsApiFp(this.configuration).getDealUpdates(requestParameters.id, requestParameters.start, requestParameters.limit, requestParameters.all_changes, requestParameters.items, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {DealsApiGetDealUsersRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealUsers(requestParameters: DealsApiGetDealUsersRequest, ) {
        return DealsApiFp(this.configuration).getDealUsers(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {DealsApiGetDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDeals(requestParameters: DealsApiGetDealsRequest = {}, ) {
        return DealsApiFp(this.configuration).getDeals(requestParameters.user_id, requestParameters.filter_id, requestParameters.stage_id, requestParameters.status, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.owned_by_you, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all deals. This is a cursor-paginated endpoint that is currently in BETA. For more information, please refer to our documentation on <a href=\"https://pipedrive.readme.io/docs/core-api-concepts-pagination\" target=\"_blank\" rel=\"noopener noreferrer\">pagination</a>. Please note that only global admins (those with global permissions) can access these endpoints. Users with regular permissions will receive a 403 response. Read more about global permissions <a href=\"https://support.pipedrive.com/en/article/global-user-management\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.
     * @summary Get all deals (BETA)
     * @param {DealsApiGetDealsCollectionRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealsCollection(requestParameters: DealsApiGetDealsCollectionRequest = {}, ) {
        return DealsApiFp(this.configuration).getDealsCollection(requestParameters.cursor, requestParameters.limit, requestParameters.since, requestParameters.until, requestParameters.user_id, requestParameters.stage_id, requestParameters.status, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {DealsApiGetDealsSummaryRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealsSummary(requestParameters: DealsApiGetDealsSummaryRequest = {}, ) {
        return DealsApiFp(this.configuration).getDealsSummary(requestParameters.status, requestParameters.filter_id, requestParameters.user_id, requestParameters.stage_id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {DealsApiGetDealsTimelineRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public getDealsTimeline(requestParameters: DealsApiGetDealsTimelineRequest, ) {
        return DealsApiFp(this.configuration).getDealsTimeline(requestParameters.start_date, requestParameters.interval, requestParameters.amount, requestParameters.field_key, requestParameters.user_id, requestParameters.pipeline_id, requestParameters.filter_id, requestParameters.exclude_deals, requestParameters.totals_convert_currency, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {DealsApiMergeDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public mergeDeals(requestParameters: DealsApiMergeDealsRequest, ) {
        return DealsApiFp(this.configuration).mergeDeals(requestParameters.id, requestParameters.MergeDealsRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {DealsApiSearchDealsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public searchDeals(requestParameters: DealsApiSearchDealsRequest, ) {
        return DealsApiFp(this.configuration).searchDeals(requestParameters.term, requestParameters.fields, requestParameters.exact_match, requestParameters.person_id, requestParameters.organization_id, requestParameters.status, requestParameters.include_fields, requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {DealsApiUpdateDealRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateDeal(requestParameters: DealsApiUpdateDealRequest, ) {
        return DealsApiFp(this.configuration).updateDeal(requestParameters.id, requestParameters.UpdateDealRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the details of the product that has been attached to a deal.
     * @summary Update the product attached to a deal
     * @param {DealsApiUpdateDealProductRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public updateDealProduct(requestParameters: DealsApiUpdateDealProductRequest, ) {
        return DealsApiFp(this.configuration).updateDealProduct(requestParameters.id, requestParameters.product_attachment_id, requestParameters.UpdateDealProductRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
