/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFieldRequest } from '../models';
// @ts-ignore
import { DeleteFieldsResponse } from '../models';
// @ts-ignore
import { DeleteResponse } from '../models';
// @ts-ignore
import { GetFieldResponse } from '../models';
// @ts-ignore
import { GetFieldsResponse } from '../models';
// @ts-ignore
import { UpdateFieldRequest } from '../models';
/**
 * OrganizationFieldsApi - axios parameter creator
 * @export
 */
export const OrganizationFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new organization field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new organization field
         * @param {CreateFieldRequest} [CreateFieldRequest] 

         * @throws {RequiredError}
         */
        addOrganizationField: async (CreateFieldRequest?: CreateFieldRequest, ): Promise<RequestArgs> => {
            const localVarPath = `/organizationFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(CreateFieldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete an organization field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        deleteOrganizationField: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganizationField', 'id', id)
            const localVarPath = `/organizationFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks multiple fields as deleted.
         * @summary Delete multiple organization fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        deleteOrganizationFields: async (ids: string, ): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteOrganizationFields', 'ids', ids)
            const localVarPath = `/organizationFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about a specific organization field.
         * @summary Get one organization field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        getOrganizationField: async (id: number, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationField', 'id', id)
            const localVarPath = `/organizationFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full", "admin"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns data about all organization fields.
         * @summary Get all organization fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        getOrganizationFields: async (start?: number, limit?: number, ): Promise<RequestArgs> => {
            const localVarPath = `/organizationFields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["contacts:read", "contacts:full", "admin"], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an organization field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update an organization field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest] 

         * @throws {RequiredError}
         */
        updateOrganizationField: async (id: number, UpdateFieldRequest?: UpdateFieldRequest, ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrganizationField', 'id', id)
            const localVarPath = `/organizationFields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "api_token", configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["admin"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, };
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateFieldRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * OrganizationFieldsApi - functional programming interface
 * @export
 */
export const OrganizationFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new organization field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new organization field
         * @param {CreateFieldRequest} [CreateFieldRequest] 

         * @throws {RequiredError}
         */
        async addOrganizationField(CreateFieldRequest?: CreateFieldRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrganizationField(CreateFieldRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete an organization field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        async deleteOrganizationField(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationField(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks multiple fields as deleted.
         * @summary Delete multiple organization fields in bulk
         * @param {string} ids The comma-separated field IDs to delete

         * @throws {RequiredError}
         */
        async deleteOrganizationFields(ids: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeleteFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationFields(ids, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about a specific organization field.
         * @summary Get one organization field
         * @param {number} id The ID of the field

         * @throws {RequiredError}
         */
        async getOrganizationField(id: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationField(id, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns data about all organization fields.
         * @summary Get all organization fields
         * @param {number} [start] Pagination start
         * @param {number} [limit] Items shown per page

         * @throws {RequiredError}
         */
        async getOrganizationFields(start?: number, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationFields(start, limit, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an organization field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update an organization field
         * @param {number} id The ID of the field
         * @param {UpdateFieldRequest} [UpdateFieldRequest] 

         * @throws {RequiredError}
         */
        async updateOrganizationField(id: number, UpdateFieldRequest?: UpdateFieldRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<GetFieldResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationField(id, UpdateFieldRequest, );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationFieldsApi - factory interface
 * @export
 */
export const OrganizationFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationFieldsApiFp(configuration)
    return {
        /**
         * Adds a new organization field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
         * @summary Add a new organization field
         * @param {OrganizationFieldsApiAddOrganizationFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        addOrganizationField(requestParameters: OrganizationFieldsApiAddOrganizationFieldRequest = {}, ): Promise<GetFieldResponse> {
            return localVarFp.addOrganizationField(requestParameters.CreateFieldRequest, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
         * @summary Delete an organization field
         * @param {OrganizationFieldsApiDeleteOrganizationFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationField(requestParameters: OrganizationFieldsApiDeleteOrganizationFieldRequest, ): Promise<DeleteResponse> {
            return localVarFp.deleteOrganizationField(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Marks multiple fields as deleted.
         * @summary Delete multiple organization fields in bulk
         * @param {OrganizationFieldsApiDeleteOrganizationFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        deleteOrganizationFields(requestParameters: OrganizationFieldsApiDeleteOrganizationFieldsRequest, ): Promise<DeleteFieldsResponse> {
            return localVarFp.deleteOrganizationFields(requestParameters.ids, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about a specific organization field.
         * @summary Get one organization field
         * @param {OrganizationFieldsApiGetOrganizationFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationField(requestParameters: OrganizationFieldsApiGetOrganizationFieldRequest, ): Promise<GetFieldResponse> {
            return localVarFp.getOrganizationField(requestParameters.id, ).then((request) => request(axios, basePath));
        },
        /**
         * Returns data about all organization fields.
         * @summary Get all organization fields
         * @param {OrganizationFieldsApiGetOrganizationFieldsRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        getOrganizationFields(requestParameters: OrganizationFieldsApiGetOrganizationFieldsRequest = {}, ): Promise<GetFieldsResponse> {
            return localVarFp.getOrganizationFields(requestParameters.start, requestParameters.limit, ).then((request) => request(axios, basePath));
        },
        /**
         * Updates an organization field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
         * @summary Update an organization field
         * @param {OrganizationFieldsApiUpdateOrganizationFieldRequest} requestParameters Request parameters.

         * @throws {RequiredError}
         */
        updateOrganizationField(requestParameters: OrganizationFieldsApiUpdateOrganizationFieldRequest, ): Promise<GetFieldResponse> {
            return localVarFp.updateOrganizationField(requestParameters.id, requestParameters.UpdateFieldRequest, ).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrganizationField operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiAddOrganizationFieldRequest
 */
export interface OrganizationFieldsApiAddOrganizationFieldRequest {
    /**
     * 
     * @type {CreateFieldRequest}
     * @memberof OrganizationFieldsApiAddOrganizationField
     */
    readonly CreateFieldRequest?: CreateFieldRequest
}

/**
 * Request parameters for deleteOrganizationField operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiDeleteOrganizationFieldRequest
 */
export interface OrganizationFieldsApiDeleteOrganizationFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof OrganizationFieldsApiDeleteOrganizationField
     */
    readonly id: number
}

/**
 * Request parameters for deleteOrganizationFields operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiDeleteOrganizationFieldsRequest
 */
export interface OrganizationFieldsApiDeleteOrganizationFieldsRequest {
    /**
     * The comma-separated field IDs to delete
     * @type {string}
     * @memberof OrganizationFieldsApiDeleteOrganizationFields
     */
    readonly ids: string
}

/**
 * Request parameters for getOrganizationField operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiGetOrganizationFieldRequest
 */
export interface OrganizationFieldsApiGetOrganizationFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof OrganizationFieldsApiGetOrganizationField
     */
    readonly id: number
}

/**
 * Request parameters for getOrganizationFields operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiGetOrganizationFieldsRequest
 */
export interface OrganizationFieldsApiGetOrganizationFieldsRequest {
    /**
     * Pagination start
     * @type {number}
     * @memberof OrganizationFieldsApiGetOrganizationFields
     */
    readonly start?: number

    /**
     * Items shown per page
     * @type {number}
     * @memberof OrganizationFieldsApiGetOrganizationFields
     */
    readonly limit?: number
}

/**
 * Request parameters for updateOrganizationField operation in OrganizationFieldsApi.
 * @export
 * @interface OrganizationFieldsApiUpdateOrganizationFieldRequest
 */
export interface OrganizationFieldsApiUpdateOrganizationFieldRequest {
    /**
     * The ID of the field
     * @type {number}
     * @memberof OrganizationFieldsApiUpdateOrganizationField
     */
    readonly id: number

    /**
     * 
     * @type {UpdateFieldRequest}
     * @memberof OrganizationFieldsApiUpdateOrganizationField
     */
    readonly UpdateFieldRequest?: UpdateFieldRequest
}

/**
 * OrganizationFieldsApi - object-oriented interface
 * @export
 * @class OrganizationFieldsApi
 * @extends {BaseAPI}
 */
export class OrganizationFieldsApi extends BaseAPI {
    /**
     * Adds a new organization field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new organization field
     * @param {OrganizationFieldsApiAddOrganizationFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public addOrganizationField(requestParameters: OrganizationFieldsApiAddOrganizationFieldRequest = {}, ) {
        return OrganizationFieldsApiFp(this.configuration).addOrganizationField(requestParameters.CreateFieldRequest, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete an organization field
     * @param {OrganizationFieldsApiDeleteOrganizationFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public deleteOrganizationField(requestParameters: OrganizationFieldsApiDeleteOrganizationFieldRequest, ) {
        return OrganizationFieldsApiFp(this.configuration).deleteOrganizationField(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks multiple fields as deleted.
     * @summary Delete multiple organization fields in bulk
     * @param {OrganizationFieldsApiDeleteOrganizationFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public deleteOrganizationFields(requestParameters: OrganizationFieldsApiDeleteOrganizationFieldsRequest, ) {
        return OrganizationFieldsApiFp(this.configuration).deleteOrganizationFields(requestParameters.ids, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about a specific organization field.
     * @summary Get one organization field
     * @param {OrganizationFieldsApiGetOrganizationFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public getOrganizationField(requestParameters: OrganizationFieldsApiGetOrganizationFieldRequest, ) {
        return OrganizationFieldsApiFp(this.configuration).getOrganizationField(requestParameters.id, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns data about all organization fields.
     * @summary Get all organization fields
     * @param {OrganizationFieldsApiGetOrganizationFieldsRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public getOrganizationFields(requestParameters: OrganizationFieldsApiGetOrganizationFieldsRequest = {}, ) {
        return OrganizationFieldsApiFp(this.configuration).getOrganizationFields(requestParameters.start, requestParameters.limit, ).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an organization field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update an organization field
     * @param {OrganizationFieldsApiUpdateOrganizationFieldRequest} requestParameters Request parameters.

     * @throws {RequiredError}
     * @memberof OrganizationFieldsApi
     */
    public updateOrganizationField(requestParameters: OrganizationFieldsApiUpdateOrganizationFieldRequest, ) {
        return OrganizationFieldsApiFp(this.configuration).updateOrganizationField(requestParameters.id, requestParameters.UpdateFieldRequest, ).then((request) => request(this.axios, this.basePath));
    }
}
